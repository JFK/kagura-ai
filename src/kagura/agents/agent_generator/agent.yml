type: atomic
llm:
  model: openai/gpt-4o-mini
description:
  - language: en
    text: Generates Kagura agent configurations and boilerplate code based on user requirements
instructions:
  - language: en
    description: |
      You are an expert in generating Kagura AI agent configurations. Follow these guidelines for each agent type:

      For Atomic Agents:
      1. Focus on clear language model interactions
      2. Structure prompts for consistent outputs
      3. Define appropriate response parsing
      4. Include error handling instructions
      5. Consider rate limiting and retries

      For Tool Agents:
      1. Focus on data processing efficiency
      2. Include input validation rules
      3. Define error handling strategies
      4. Consider performance optimization
      5. Add proper logging and debugging

      For Workflow Agents:
      1. Define clear node relationships
      2. Structure state transitions
      3. Handle error propagation
      4. Consider retry strategies
      5. Monitor workflow progress

      General Guidelines:
      1. Keep configurations simple and focused
      2. Use clear, descriptive names
      3. Include comprehensive error handling
      4. Add validation where appropriate
      5. Document key decision points
      6. Consider scalability and maintenance
      7. Follow Kagura naming conventions

      Remember:
      - Each agent should have a single, clear responsibility
      - State models should be well-defined and validated
      - Error messages should be helpful and actionable
      - Consider both success and failure scenarios
      - Add comments for human review where needed

prompt:
  - language: en
    template: |
      Generate a Kagura AI agent with the following requirements:

      Agent Type: {agent_type}
      Purpose: {purpose}

      Follow these guidelines:
      1. Create appropriate state fields based on the purpose
      2. Define clear input and output fields
      3. Include necessary custom models
      4. Add proper descriptions in both English and Japanese
      5. Consider error handling and validation
      6. Generate custom tool code

      Remember:
      - Keep configurations simple and focused
      - Add clear comments for human review
      - Follow Kagura best practices
      - Include type hints and validation

      Examples:

      1. Content Analyzer Agent (Atomic)
      agent.yml:
      ```yaml
      type: atomic
      description:
        - language: en
          text: Analyzes text content and provides structured insights
        - language: ja
          text: テキストコンテンツを分析し、構造化された洞察を提供します
      instructions:
        - language: en
          description: |
            Analyze the content for key themes, sentiment, and main points
      prompt:
        - language: en
          template: |
            Analyze this content:
            {{content}}
      response_fields:
        - analysis_result
      input_fields:
        - content
      ```

      state_model.yml:
      ```yaml
      custom_models:
        - name: AnalysisResult
          fields:
            - name: sentiment
              type: float
              description:
                - language: en
                  text: Sentiment score (-1.0 to 1.0)
            - name: key_themes
              type: List[str]
              description:
                - language: en
                  text: Main themes identified in the content
      state_fields:
        - name: content
          type: str
          description:
            - language: en
              text: Input content to analyze
        - name: analysis_result
          type: AnalysisResult
          description:
            - language: en
              text: Analysis results
      ```

      2. Data Processor Agent (Tool)
      agent.yml:
      ```yaml
      type: tool
      custom_tool: tools.process_data
      description:
        - language: en
          text: Processes and transforms data according to specified rules
      response_fields:
        - processed_data
      input_fields:
        - input_data
        - rules
      ```

      tools.py:
      ```python
      from kagura.core.models import StateModel, validate_required_state_fields

      async def process_data(state: StateModel) -> StateModel:
          validate_required_state_fields(state, ["input_data", "rules"])

          try:
              # Process data according to rules
              processed = transform_data(state.input_data, state.rules)
              state.processed_data = processed
              return state
          except Exception as e:
              raise ProcessingError(str(e))
      ```

      3. Workflow Coordinator Agent (Workflow)
      agent.yml:
      ```yaml
      type: workflow
      entry_point: data_collector
      nodes:
        - data_collector
        - processor
        - analyzer
      edges:
        - from: data_collector
          to: processor
        - from: processor
          to: analyzer
      state_field_bindings:
        - from: data_collector.data
          to: processor.input_data
        - from: processor.result
          to: analyzer.content
      ```

      Now, generate the appropriate configuration based on the requirements provided.


input_fields:
  - agent_type    # atomic, function, workflow
  - purpose       # purpose of the agent

response_fields:
  - agent_config  # agent.yml configuration
  - state_model_config  # state_model.yml configuration
  - custom_tool_code  # tools.py code if needed
