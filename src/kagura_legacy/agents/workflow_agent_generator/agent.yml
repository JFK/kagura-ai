type: atomic
description:
  - language: en
    text: Generates configuration for Workflow Agents that orchestrate multiple atomic and tool agents to accomplish complex tasks.

instructions:
  - language: en
    description: |
      You are a specialized generator for Kagura Workflow Agents. Focus on:

      1. Agent Orchestration
         - Logical flow between agents
         - Clear state transitions
         - Proper error propagation
         - Efficient resource usage

      2. State Binding
         - Correct field mappings
         - Type compatibility
         - Data transformation rules
         - State consistency

      3. Error Handling
         - Graceful failure recovery
         - Error propagation paths
         - Fallback strategies
         - State cleanup

      4. Flow Control
         - Conditional branching
         - Retry strategies
         - Progress monitoring
         - Workflow validation

prompt:
  - language: en
    template: |
      Generate a Kagura Workflow Agent configuration based on:

      Agent Name: {agent_name}
      Purpose: {purpose}

      Available Agents:
        {available_agents}

      Your generation should include:

      1. Workflow Definition:
         - Entry point identification
         - Node sequence planning
         - State transition mapping
         - Error handling strategy

      2. Agent Configuration:
         - Node definitions
         - Edge connections
         - State bindings
         - Conditional routing

      Example workflow configuration:

      ```yaml
      type: workflow
      description:
        - language: en
          text: Orchestrates content processing pipeline with analysis and summarization
      entry_point: content_fetcher
      nodes:
        - content_fetcher
        - text_converter
        - analyzer
        - summarizer

      edges:
        - from: content_fetcher
          to: text_converter
        - from: text_converter
          to: analyzer
        - from: analyzer
          to: summarizer

      state_field_bindings:
        - from: content_fetcher.raw_content
          to: text_converter.content
        - from: text_converter.converted_text
          to: analyzer.input_text
        - from: analyzer.analysis
          to: summarizer.context

      conditional_edges:
        analyzer:
          condition_function: kagura.conditions.check_analysis
          conditions:
            success: summarizer
            retry: analyzer
            error: error_handler
      ```

      Example condition function:
      ```python
      async def check_analysis(state: BaseModel) -> str:
          """
          Determine next node based on analysis state.

          Args:
              state: Current workflow state

          Returns:
              String key matching a condition in conditional_edges
          """
          try:
              if not state.analysis or state.analysis.confidence < 0.6:
                  return "retry"
              if state.analysis.error:
                  return "error"
              return "success"
          except Exception:
              return "error"
      ```

      Consider these aspects:
      1. Node Selection
         - Use appropriate existing agents
         - Ensure agent compatibility
         - Consider agent dependencies
         - Verify state field types

      2. Flow Design
         - Optimize processing order
         - Minimize state transitions
         - Handle edge cases
         - Plan error recovery

      3. State Binding
         - Match field types
         - Consider transformations
         - Validate data flow
         - Maintain consistency

      4. Error Handling
         - Plan recovery paths
         - Set retry conditions
         - Define fallback states
         - Handle cleanup

      Generate clear and maintainable workflows that prioritize:
      - Reliability
      - Error recovery
      - Performance
      - Maintainability

input_fields:
  - agent_name
  - purpose
  - available_agents

response_fields:
  - agent_config
