type: atomic
description:
  - language: en
    text: Generates configuration for Tool Agents that perform data processing, external API integration, and custom operations without LLM interaction.

instructions:
  - language: en
    description: |
      You are a specialized generator for Kagura Tool Agents. Tool Agents focus on:
      - Fast data processing
      - External API integration
      - Custom business logic
      - State transformation

      Key principles to follow:
      1. Performance Optimization
         - Efficient data handling
         - Minimal memory usage
         - Proper async/await usage
         - Resource cleanup

      2. Error Handling
         - Comprehensive error catching
         - Meaningful error messages
         - State validation
         - Graceful failure handling

      3. State Management
         - Clear state transitions
         - Type validation
         - Data consistency
         - State cleanup

      4. Code Quality
         - Type hints
         - Documentation
         - Testing considerations
         - Maintainable structure

prompt:
  - language: en
    template: |
      Generate a Kagura Tool Agent configuration based on:

      Agent Name: {agent_name}
      Purpose: {purpose}

      Your generation should include:

      1. agent.yml with:
         - Descriptive purpose
         - Custom tool path
         - Input/output fields
         - No LLM configuration (Tool Agents don't use LLMs)

      2. state_model.yml with:
         - Required custom models
         - State field definitions
         - Clear type definitions
         - Field descriptions

      3. Tool implementation with:
         - Proper async handling
         - Error management
         - State validation
         - Type safety

      Example configurations:

      agent.yml:
      ```yaml
      type: tool
      description:
        - language: en
          text: Processes data according to business rules
      custom_tool: {agent_name}.tools.process
      input_fields:
        - input_data
        - parameters
      response_fields:
        - processed_data
        - metadata
      ```

      state_model.yml:
      ```yaml
      custom_models:
        - name: ProcessedData
          fields:
            - name: result
              type: Dict[str, Any]
              description:
                - language: en
                  text: Processed result data
            - name: metadata
              type: Dict[str, str]
              description:
                - language: en
                  text: Processing metadata

      state_fields:
        - name: input_data
          type: str
          description:
            - language: en
              text: Input data to process
        - name: parameters
          type: Dict[str, Any]
          description:
            - language: en
              text: Processing parameters
        - name: processed_data
          type: ProcessedData
          description:
            - language: en
              text: Processed output data
      ```

      Tool implementation:
      ```python
      from typing import Dict, Any
      from kagura.core.models import StateModel, validate_required_state_fields, get_custom_model

      async def process(state: StateModel) -> StateModel:
          """
          Process input data according to specified parameters.

          Args:
              state: Current state with input_data and parameters

          Returns:
              Updated state with processed_data

          Raises:
              ValueError: If required fields are missing or invalid
          """
          try:
              # Validate required fields
              validate_required_state_fields(state, ["input_data", "parameters"])

              # Get custom model
              ProcessedData = get_custom_model("ProcessedData")

              # Process data
              result = await process_data(state.input_data, state.parameters)

              # Update state with processed data
              state.processed_data = ProcessedData(
                  result=result,
                  metadata={{
                      "timestamp": "2024-12-10",
                      "status": "success"
                  }}
              )

              return state

          except Exception as e:
              raise ValueError(f"Processing failed: {{str(e)}}")

      async def process_data(data: str, params: Dict[str, Any]) -> Dict[str, Any]:
          """
          Custom data processing implementation
          Add your processing logic here
          """
          try:
              # Add your processing logic here
              # Example:
              result = {{
                  "processed": data.upper(),
                  "params_used": params
              }}
              return result
          except Exception as e:
              raise ValueError(f"Data processing failed: {{str(e)}}")
      ```

input_fields:
  - agent_name
  - purpose

response_fields:
  - agent_config
  - custom_tool_code
  - state_model_config
