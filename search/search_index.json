{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Kagura AI 2.0","text":"<p>Python-First AI Agent Framework with Code Execution</p> <p>Kagura AI 2.0 is a modern framework that makes building AI agents as simple as writing a Python function. With a single <code>@agent</code> decorator, you can transform any async function into a powerful AI agent.</p>"},{"location":"#what-is-kagura-ai","title":"What is Kagura AI?","text":"<p>Kagura AI 2.0 is a modern framework focused on developer experience and simplicity. You write agents in pure Python with familiar async/await patterns.</p> <pre><code>from kagura import agent\n\n@agent\nasync def hello(name: str) -&gt; str:\n    '''Say hello to {{ name }}'''\n    pass\n\nresult = await hello(\"World\")\n# \"Hello, World!\"\n</code></pre>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>One-Line Agent Creation: <code>@agent</code> decorator converts functions to AI agents</li> <li>Jinja2 Templates: Dynamic prompts using template syntax in docstrings</li> <li>Type-Based Parsing: Automatic response conversion using Python type hints</li> <li>Pydantic Support: First-class structured output with Pydantic models</li> <li>Code Execution: Built-in safe Python code generation and execution</li> <li>Interactive REPL: <code>kagura repl</code> for rapid prototyping</li> <li>Multi-LLM Support: Works with OpenAI, Anthropic, Google, and more</li> </ul>"},{"location":"#core-concepts","title":"Core Concepts","text":""},{"location":"#1-agent-decorator","title":"1. Agent Decorator","text":"<p>Transform any async function into an AI agent:</p> <pre><code>@agent\nasync def my_agent(input: str) -&gt; str:\n    '''Process {{ input }}'''\n    pass\n</code></pre> <p>The decorator: - Extracts the function signature - Uses the docstring as a Jinja2 template - Calls the LLM with rendered prompt - Parses the response based on return type</p>"},{"location":"#2-template-engine","title":"2. Template Engine","text":"<p>Use Jinja2 templates in docstrings for dynamic prompts:</p> <pre><code>@agent\nasync def translator(text: str, lang: str = \"ja\") -&gt; str:\n    '''Translate to {{ lang }}: {{ text }}'''\n    pass\n</code></pre>"},{"location":"#3-type-based-parser","title":"3. Type-Based Parser","text":"<p>Automatic response parsing based on return type hints:</p> <pre><code>from pydantic import BaseModel\n\nclass Person(BaseModel):\n    name: str\n    age: int\n\n@agent\nasync def extract_person(text: str) -&gt; Person:\n    '''Extract person info from: {{ text }}'''\n    pass\n</code></pre> <p>Returns a fully validated Pydantic model instance.</p>"},{"location":"#4-code-execution","title":"4. Code Execution","text":"<p>Safe Python code generation and execution:</p> <pre><code>from kagura.agents import execute_code\n\nresult = await execute_code(\"Calculate the factorial of 10\")\n# Generates code, executes safely, returns result\n</code></pre>"},{"location":"#architecture","title":"Architecture","text":"<p>Kagura AI 2.0 follows a clean, layered architecture:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         @agent Decorator            \u2502\n\u2502  (Function \u2192 Agent transformation)  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502       Template Engine (Jinja2)      \u2502\n\u2502    (Docstring \u2192 Rendered prompt)    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         LLM Layer (LiteLLM)         \u2502\n\u2502   (Prompt \u2192 LLM \u2192 Raw response)     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    Parser (Type-based parsing)      \u2502\n\u2502  (Raw response \u2192 Typed Python obj)  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"#design-philosophy","title":"Design Philosophy","text":"<p>Kagura AI 2.0 is built on these principles:</p> <ul> <li>Python-First: No external configuration files</li> <li>Type Safety: Leverages Python's type system</li> <li>Developer Experience: Simple API, fast iteration</li> <li>Composability: Agents are just async functions</li> <li>Explicitness: Clear data flow, no magic</li> </ul>"},{"location":"#get-started","title":"Get Started","text":"<p>Ready to build your first agent?</p> <ul> <li>Installation Guide - Install Kagura AI</li> <li>Quick Start Tutorial - Build your first agent in 5 minutes</li> <li>API Reference - Detailed API documentation</li> <li>Examples - More examples and patterns</li> </ul> <p>Get Started \u2192</p>"},{"location":"en/faq/","title":"Frequently Asked Questions","text":"<p>Common questions about Kagura AI 2.0.</p>"},{"location":"en/faq/#general","title":"General","text":""},{"location":"en/faq/#what-is-kagura-ai-20","title":"What is Kagura AI 2.0?","text":"<p>Kagura AI 2.0 is a Python-first AI agent framework that lets you convert any async function into an AI agent with a single <code>@agent</code> decorator. It features type-based response parsing, Jinja2 templates, and safe code execution.</p>"},{"location":"en/faq/#whats-the-difference-between-kagura-ai-1x-and-20","title":"What's the difference between Kagura AI 1.x and 2.0?","text":"<p>1.x used YAML configuration files and a complex multi-agent orchestration system: <pre><code># agent.yml\ntype: atomic\nllm:\n  model: gpt-4\nprompt:\n  - language: en\n    template: \"You are helpful\"\n</code></pre></p> <p>2.0 is Python-first with a simple decorator: <pre><code>@agent\nasync def assistant(query: str) -&gt; str:\n    '''You are helpful. Answer: {{ query }}'''\n    pass\n</code></pre></p> <p>Key changes: - No more YAML configuration - Simple <code>@agent</code> decorator instead of <code>Agent.assigner()</code> - <code>kagura repl</code> instead of <code>kagura chat</code> - Built-in code execution - Type-based parsing with Pydantic</p> <p>See the Migration Guide for details.</p>"},{"location":"en/faq/#which-llm-providers-are-supported","title":"Which LLM providers are supported?","text":"<p>Kagura AI uses LiteLLM, supporting 100+ providers:</p> <ul> <li>OpenAI: <code>gpt-4o</code>, <code>gpt-4o-mini</code>, <code>gpt-3.5-turbo</code></li> <li>Anthropic: <code>claude-3-5-sonnet-20241022</code>, <code>claude-3-haiku-20240307</code></li> <li>Google: <code>gemini/gemini-pro</code>, <code>gemini/gemini-1.5-flash</code></li> <li>Azure OpenAI: <code>azure/gpt-4</code></li> <li>Ollama: <code>ollama/llama3.2</code>, <code>ollama/gemma2</code></li> <li>Cohere: <code>command-r-plus</code>, <code>command-r</code></li> <li>Groq: <code>groq/llama3-70b</code>, <code>groq/mixtral-8x7b</code></li> <li>And many more...</li> </ul>"},{"location":"en/faq/#what-python-version-is-required","title":"What Python version is required?","text":"<p>Python 3.11 or higher.</p>"},{"location":"en/faq/#how-do-i-install-kagura-ai","title":"How do I install Kagura AI?","text":"<pre><code>pip install kagura-ai\n</code></pre> <p>Or with uv: <pre><code>uv add kagura-ai\n</code></pre></p> <p>See Installation Guide for details.</p>"},{"location":"en/faq/#usage","title":"Usage","text":""},{"location":"en/faq/#how-do-i-set-my-api-key","title":"How do I set my API key?","text":"<p>Set the appropriate environment variable before running your code:</p> <pre><code># OpenAI\nexport OPENAI_API_KEY=\"your-key-here\"\n\n# Anthropic\nexport ANTHROPIC_API_KEY=\"your-key-here\"\n\n# Google\nexport GOOGLE_API_KEY=\"your-key-here\"\n</code></pre> <p>Or in Python: <pre><code>import os\nos.environ[\"OPENAI_API_KEY\"] = \"your-key-here\"\n</code></pre></p>"},{"location":"en/faq/#how-do-i-handle-errors-in-agents","title":"How do I handle errors in agents?","text":"<p>Wrap agent calls in try-except:</p> <pre><code>from litellm import APIError\nfrom pydantic import ValidationError\n\ntry:\n    result = await my_agent(\"input\")\nexcept APIError as e:\n    # LLM API error (auth, rate limit, etc.)\n    print(f\"API error: {e}\")\nexcept ValidationError as e:\n    # Pydantic parsing error\n    print(f\"Validation error: {e}\")\nexcept Exception as e:\n    # Other errors\n    print(f\"Error: {e}\")\n</code></pre>"},{"location":"en/faq/#can-i-use-custom-pydantic-validators","title":"Can I use custom Pydantic validators?","text":"<p>Yes! All Pydantic features work:</p> <pre><code>from pydantic import BaseModel, Field, field_validator\n\nclass Person(BaseModel):\n    name: str = Field(min_length=1, max_length=100)\n    age: int = Field(ge=0, le=150)\n    email: str\n\n    @field_validator('email')\n    @classmethod\n    def validate_email(cls, v):\n        if '@' not in v:\n            raise ValueError('Invalid email')\n        return v\n\n@agent\nasync def extract_person(text: str) -&gt; Person:\n    '''Extract person from: {{ text }}'''\n    pass\n</code></pre>"},{"location":"en/faq/#how-do-i-use-different-models-for-different-agents","title":"How do I use different models for different agents?","text":"<p>Specify the model parameter:</p> <pre><code>@agent(model=\"gpt-4o-mini\")  # Fast, cheap\nasync def simple_task(x: str) -&gt; str:\n    '''{{ x }}'''\n    pass\n\n@agent(model=\"gpt-4o\")  # Powerful, expensive\nasync def complex_task(x: str) -&gt; str:\n    '''{{ x }}'''\n    pass\n\n@agent(model=\"claude-3-5-sonnet-20241022\")  # Long context\nasync def long_context_task(x: str) -&gt; str:\n    '''{{ x }}'''\n    pass\n</code></pre>"},{"location":"en/faq/#can-agents-call-other-agents","title":"Can agents call other agents?","text":"<p>Yes! Agents are just async functions:</p> <pre><code>@agent\nasync def summarize(text: str) -&gt; str:\n    '''Summarize: {{ text }}'''\n    pass\n\n@agent\nasync def translate(text: str, lang: str) -&gt; str:\n    '''Translate to {{ lang }}: {{ text }}'''\n    pass\n\n# Compose\ntext = \"Long article...\"\nsummary = await summarize(text)\njapanese = await translate(summary, \"Japanese\")\n</code></pre>"},{"location":"en/faq/#how-do-i-pass-complex-objects-to-agents","title":"How do I pass complex objects to agents?","text":"<p>Use Jinja2 templates to access object properties:</p> <pre><code>from pydantic import BaseModel\n\nclass Document(BaseModel):\n    title: str\n    content: str\n    author: str\n\n@agent\nasync def analyze(doc: Document) -&gt; str:\n    '''Analyze this document:\n    Title: {{ doc.title }}\n    Author: {{ doc.author }}\n    Content: {{ doc.content }}\n    '''\n    pass\n\ndoc = Document(title=\"...\", content=\"...\", author=\"...\")\nresult = await analyze(doc)\n</code></pre>"},{"location":"en/faq/#templates","title":"Templates","text":""},{"location":"en/faq/#what-templating-language-is-used","title":"What templating language is used?","text":"<p>Jinja2 - a powerful Python template engine.</p> <p>Basic syntax: - Variables: <code>{{ variable }}</code> - Conditionals: <code>{% if condition %} ... {% endif %}</code> - Loops: <code>{% for item in items %} ... {% endfor %}</code> - Filters: <code>{{ text|upper }}</code></p>"},{"location":"en/faq/#how-do-i-use-conditionals-in-prompts","title":"How do I use conditionals in prompts?","text":"<pre><code>@agent\nasync def respond(query: str, formal: bool = False) -&gt; str:\n    '''\n    {% if formal %}\n    Provide a formal, professional response to: {{ query }}\n    {% else %}\n    Respond casually to: {{ query }}\n    {% endif %}\n    '''\n    pass\n</code></pre>"},{"location":"en/faq/#how-do-i-loop-over-lists-in-prompts","title":"How do I loop over lists in prompts?","text":"<pre><code>@agent\nasync def process_items(items: list[str]) -&gt; str:\n    '''Process these items:\n    {% for item in items %}\n    - {{ item }}\n    {% endfor %}\n    '''\n    pass\n</code></pre>"},{"location":"en/faq/#code-execution","title":"Code Execution","text":""},{"location":"en/faq/#how-does-code-execution-work","title":"How does code execution work?","text":"<p>The <code>execute_code()</code> function: 1. Takes a natural language task 2. Uses LLM to generate Python code 3. Validates code with AST analysis 4. Executes in a sandboxed environment 5. Returns the result</p> <pre><code>from kagura.agents import execute_code\n\nresult = await execute_code(\"Calculate fibonacci(10)\")\n# Returns: {\"success\": True, \"code\": \"...\", \"result\": 55}\n</code></pre>"},{"location":"en/faq/#how-secure-is-code-execution","title":"How secure is code execution?","text":"<p>Code executor has multiple security layers:</p> <ol> <li>Forbidden imports: Blocks <code>os</code>, <code>sys</code>, <code>subprocess</code>, etc.</li> <li>AST validation: Analyzes code before execution</li> <li>Timeout: Default 30 seconds</li> <li>Resource limits: Memory constraints</li> <li>No file I/O: Cannot read/write files</li> <li>No network: Cannot make HTTP requests</li> </ol> <p>However, still use caution: - Don't execute untrusted user code without review - Set appropriate timeouts - Monitor execution logs - Consider additional sandboxing for production</p>"},{"location":"en/faq/#what-libraries-can-i-use-in-code-execution","title":"What libraries can I use in code execution?","text":"<p>Safe libraries allowed by default: - <code>math</code>, <code>statistics</code>, <code>random</code> - <code>datetime</code>, <code>json</code>, <code>re</code> - <code>collections</code>, <code>itertools</code>, <code>functools</code> - <code>typing</code></p> <p>Forbidden: - <code>os</code>, <code>sys</code>, <code>subprocess</code> - <code>socket</code>, <code>urllib</code>, <code>requests</code> - <code>open</code> (built-in) - <code>eval</code>, <code>exec</code>, <code>compile</code></p>"},{"location":"en/faq/#can-i-add-custom-allowed-imports","title":"Can I add custom allowed imports?","text":"<p>Yes, use <code>CodeExecutor</code> directly:</p> <pre><code>from kagura.core.executor import CodeExecutor\n\nexecutor = CodeExecutor(\n    allowed_imports={\"math\", \"numpy\", \"pandas\"}\n)\n\nresult = await executor.execute(\"\"\"\nimport numpy as np\nresult = np.array([1, 2, 3]).mean()\n\"\"\")\n</code></pre>"},{"location":"en/faq/#type-parsing","title":"Type Parsing","text":""},{"location":"en/faq/#what-types-are-supported","title":"What types are supported?","text":"Type Example <code>str</code> <code>-&gt; str</code> <code>int</code> <code>-&gt; int</code> <code>float</code> <code>-&gt; float</code> <code>bool</code> <code>-&gt; bool</code> <code>list[T]</code> <code>-&gt; list[str]</code> <code>dict[K, V]</code> <code>-&gt; dict[str, int]</code> <code>Pydantic Model</code> <code>-&gt; Person</code> <code>Optional[T]</code> <code>-&gt; Optional[str]</code>"},{"location":"en/faq/#how-do-i-return-lists","title":"How do I return lists?","text":"<pre><code>@agent\nasync def extract_keywords(text: str) -&gt; list[str]:\n    '''Extract keywords from: {{ text }}'''\n    pass\n\n# Returns: ['Python', 'AI', 'framework']\n</code></pre>"},{"location":"en/faq/#how-do-i-return-nested-structures","title":"How do I return nested structures?","text":"<p>Use Pydantic models:</p> <pre><code>class Address(BaseModel):\n    street: str\n    city: str\n\nclass Person(BaseModel):\n    name: str\n    address: Address\n\n@agent\nasync def extract(text: str) -&gt; Person:\n    '''Extract person with address from: {{ text }}'''\n    pass\n</code></pre>"},{"location":"en/faq/#what-if-the-llm-returns-invalid-json","title":"What if the LLM returns invalid JSON?","text":"<p>The parser will raise a <code>ValidationError</code>:</p> <pre><code>try:\n    result = await my_agent(\"input\")\nexcept ValidationError as e:\n    print(f\"Failed to parse: {e}\")\n    # Handle error - maybe retry with more explicit instructions\n</code></pre>"},{"location":"en/faq/#performance","title":"Performance","text":""},{"location":"en/faq/#how-do-i-reduce-latency","title":"How do I reduce latency?","text":"<ol> <li> <p>Use faster models:    <pre><code>@agent(model=\"gpt-4o-mini\")  # Fast\nasync def quick_task(x: str) -&gt; str:\n    pass\n</code></pre></p> </li> <li> <p>Shorter prompts:    <pre><code># Better\n'''Summarize in 1 sentence: {{ text }}'''\n\n# Slower\n'''Provide a comprehensive summary...'''\n</code></pre></p> </li> <li> <p>Parallel execution:    <pre><code>import asyncio\n\nresults = await asyncio.gather(\n    agent1(\"task1\"),\n    agent2(\"task2\"),\n    agent3(\"task3\"),\n)\n</code></pre></p> </li> </ol>"},{"location":"en/faq/#how-do-i-reduce-costs","title":"How do I reduce costs?","text":"<ol> <li>Use cheaper models (<code>gpt-4o-mini</code> instead of <code>gpt-4o</code>)</li> <li>Shorter prompts and responses</li> <li>Cache results for repeated queries</li> <li>Use local models (Ollama) when possible</li> </ol>"},{"location":"en/faq/#can-i-use-local-models","title":"Can I use local models?","text":"<p>Yes, via Ollama:</p> <pre><code># Install Ollama and pull a model\nollama pull llama3.2\n</code></pre> <pre><code>@agent(model=\"ollama/llama3.2\")\nasync def local_agent(query: str) -&gt; str:\n    '''Answer: {{ query }}'''\n    pass\n</code></pre>"},{"location":"en/faq/#debugging","title":"Debugging","text":""},{"location":"en/faq/#how-do-i-see-the-actual-prompt-sent-to-the-llm","title":"How do I see the actual prompt sent to the LLM?","text":"<p>Currently, prompts are not exposed directly, but you can:</p> <ol> <li> <p>Use logging:    <pre><code>import logging\nlogging.basicConfig(level=logging.DEBUG)\n</code></pre></p> </li> <li> <p>Test templates manually:    <pre><code>from jinja2 import Template\n\ntemplate = Template('''Say hello to {{ name }}''')\nprint(template.render(name=\"World\"))\n</code></pre></p> </li> </ol>"},{"location":"en/faq/#how-do-i-debug-parsing-errors","title":"How do I debug parsing errors?","text":"<pre><code>from pydantic import ValidationError\n\ntry:\n    result = await my_agent(\"input\")\nexcept ValidationError as e:\n    print(\"Validation error:\")\n    print(e.errors())\n    # Shows which fields failed validation\n</code></pre>"},{"location":"en/faq/#why-is-my-agent-not-working","title":"Why is my agent not working?","text":"<p>Common issues:</p> <ol> <li> <p>No API key:    <pre><code>AuthenticationError: API key not found\n</code></pre>    Solution: Set <code>OPENAI_API_KEY</code></p> </li> <li> <p>Missing return type:    <pre><code># Won't parse correctly\nasync def my_agent(x: str):\n    pass\n\n# Better\nasync def my_agent(x: str) -&gt; str:\n    pass\n</code></pre></p> </li> <li> <p>Missing await:    <pre><code>result = my_agent(\"x\")  # Wrong\nresult = await my_agent(\"x\")  # Correct\n</code></pre></p> </li> <li> <p>Empty docstring:    <pre><code>@agent\nasync def my_agent(x: str) -&gt; str:\n    pass  # No prompt!\n</code></pre></p> </li> </ol>"},{"location":"en/faq/#advanced","title":"Advanced","text":""},{"location":"en/faq/#can-i-stream-responses","title":"Can I stream responses?","text":"<p>Not yet in v2.0.0-alpha.1. Streaming support is planned for a future release.</p>"},{"location":"en/faq/#can-i-use-function-calling-tools","title":"Can I use function calling / tools?","text":"<p>Not directly in v2.0.0-alpha.1, but you can implement it:</p> <pre><code>from kagura import agent\n\ntools = {\n    \"calculator\": lambda x, y: x + y,\n    \"search\": lambda q: f\"Results for {q}\",\n}\n\n@agent\nasync def use_tool(task: str) -&gt; str:\n    '''Determine which tool to use and what arguments for: {{ task }}\n\n    Available tools:\n    - calculator(x, y): Add two numbers\n    - search(query): Search for information\n    '''\n    pass\n\n# Parse response and call tool\nresponse = await use_tool(\"What is 5 + 3?\")\n</code></pre>"},{"location":"en/faq/#how-do-i-implement-retry-logic","title":"How do I implement retry logic?","text":"<pre><code>async def agent_with_retry(task: str, max_retries: int = 3):\n    for attempt in range(max_retries):\n        try:\n            result = await my_agent(task)\n            return result\n        except Exception as e:\n            if attempt == max_retries - 1:\n                raise\n            print(f\"Attempt {attempt + 1} failed: {e}\")\n            await asyncio.sleep(2 ** attempt)  # Exponential backoff\n</code></pre>"},{"location":"en/faq/#can-i-customize-the-llm-parameters","title":"Can I customize the LLM parameters?","text":"<p>Yes, pass any LiteLLM parameter:</p> <pre><code>@agent(\n    model=\"gpt-4o\",\n    temperature=0.5,\n    max_tokens=1000,\n    top_p=0.9,\n    frequency_penalty=0.5\n)\nasync def my_agent(query: str) -&gt; str:\n    '''Answer: {{ query }}'''\n    pass\n</code></pre>"},{"location":"en/faq/#troubleshooting","title":"Troubleshooting","text":""},{"location":"en/faq/#module-not-found-error","title":"Module not found error","text":"<pre><code>ModuleNotFoundError: No module named 'kagura'\n</code></pre> <p>Solution: 1. Ensure installed: <code>pip list | grep kagura</code> 2. Check Python version: <code>python --version</code> (must be 3.11+) 3. Reinstall: <code>pip install kagura-ai</code></p>"},{"location":"en/faq/#import-error-with-pydantic","title":"Import error with Pydantic","text":"<pre><code>ImportError: cannot import name 'BaseModel'\n</code></pre> <p>Solution: Ensure Pydantic v2: <pre><code>pip install \"pydantic&gt;=2.10\"\n</code></pre></p>"},{"location":"en/faq/#repl-not-starting","title":"REPL not starting","text":"<pre><code>kagura: command not found\n</code></pre> <p>Solution: 1. Ensure installed: <code>pip install kagura-ai</code> 2. Check PATH: <code>which kagura</code> 3. Try full path: <code>python -m kagura.cli repl</code></p>"},{"location":"en/faq/#getting-help","title":"Getting Help","text":"<ul> <li>Documentation: https://www.kagura-ai.com/</li> <li>GitHub Issues: https://github.com/JFK/kagura-ai/issues</li> <li>Discussions: https://github.com/JFK/kagura-ai/discussions</li> </ul>"},{"location":"en/faq/#related","title":"Related","text":"<ul> <li>Quick Start</li> <li>API Reference</li> <li>Tutorials</li> <li>Examples</li> </ul>"},{"location":"en/installation/","title":"Installation","text":""},{"location":"en/installation/#requirements","title":"Requirements","text":"<ul> <li>Python 3.11 or higher</li> <li>pip or uv package manager</li> </ul>"},{"location":"en/installation/#install-from-pypi","title":"Install from PyPI","text":""},{"location":"en/installation/#using-pip","title":"Using pip","text":"<pre><code>pip install kagura-ai\n</code></pre>"},{"location":"en/installation/#using-uv-recommended","title":"Using uv (recommended)","text":"<pre><code>uv add kagura-ai\n</code></pre>"},{"location":"en/installation/#verify-installation","title":"Verify Installation","text":"<p>Check that Kagura AI is installed correctly:</p> <pre><code>kagura version\n</code></pre> <p>You should see output like:</p> <pre><code>Kagura AI v2.0.0-alpha.1\n</code></pre>"},{"location":"en/installation/#set-api-key","title":"Set API Key","text":"<p>Kagura AI uses LiteLLM, which supports multiple LLM providers. You need to set the appropriate API key for your chosen provider.</p>"},{"location":"en/installation/#openai","title":"OpenAI","text":"<pre><code>export OPENAI_API_KEY=\"your-key-here\"\n</code></pre> <p>Or in Python: <pre><code>import os\nos.environ[\"OPENAI_API_KEY\"] = \"your-key-here\"\n</code></pre></p>"},{"location":"en/installation/#anthropic-claude","title":"Anthropic (Claude)","text":"<pre><code>export ANTHROPIC_API_KEY=\"your-key-here\"\n</code></pre>"},{"location":"en/installation/#google-gemini","title":"Google (Gemini)","text":"<pre><code>export GOOGLE_API_KEY=\"your-key-here\"\n</code></pre>"},{"location":"en/installation/#azure-openai","title":"Azure OpenAI","text":"<pre><code>export AZURE_API_KEY=\"your-key-here\"\nexport AZURE_API_BASE=\"https://your-endpoint.openai.azure.com/\"\nexport AZURE_API_VERSION=\"2023-05-15\"\n</code></pre>"},{"location":"en/installation/#test-your-installation","title":"Test Your Installation","text":"<p>Create a simple test file:</p> <pre><code># test_kagura.py\nfrom kagura import agent\n\n@agent\nasync def hello(name: str) -&gt; str:\n    '''Say hello to {{ name }}'''\n    pass\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    async def main():\n        result = await hello(\"Kagura AI\")\n        print(result)\n\n    asyncio.run(main())\n</code></pre> <p>Run it:</p> <pre><code>python test_kagura.py\n</code></pre> <p>If successful, you should see a greeting message.</p>"},{"location":"en/installation/#development-installation","title":"Development Installation","text":"<p>For contributing to Kagura AI or running from source:</p>"},{"location":"en/installation/#clone-repository","title":"Clone Repository","text":"<pre><code>git clone https://github.com/JFK/kagura-ai.git\ncd kagura-ai\n</code></pre>"},{"location":"en/installation/#install-dependencies","title":"Install Dependencies","text":"<p>Using uv (recommended):</p> <pre><code>uv sync --dev\n</code></pre> <p>This will install: - All runtime dependencies - Development dependencies (pytest, pyright, ruff, etc.)</p>"},{"location":"en/installation/#run-tests","title":"Run Tests","text":"<pre><code>pytest\n</code></pre>"},{"location":"en/installation/#type-checking","title":"Type Checking","text":"<pre><code>pyright\n</code></pre>"},{"location":"en/installation/#code-formatting","title":"Code Formatting","text":"<pre><code>ruff check src/\n</code></pre>"},{"location":"en/installation/#optional-dependencies","title":"Optional Dependencies","text":""},{"location":"en/installation/#for-development","title":"For Development","text":"<p>Development tools are already included with <code>--dev</code> flag:</p> <ul> <li><code>pytest</code> - Testing framework</li> <li><code>pytest-asyncio</code> - Async test support</li> <li><code>pytest-cov</code> - Code coverage</li> <li><code>pyright</code> - Type checker</li> <li><code>ruff</code> - Linter and formatter</li> </ul>"},{"location":"en/installation/#for-documentation","title":"For Documentation","text":"<p>To build documentation locally:</p> <pre><code>pip install mkdocs mkdocs-material\nmkdocs serve\n</code></pre> <p>Then visit <code>http://localhost:8000</code></p>"},{"location":"en/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"en/installation/#import-error","title":"Import Error","text":"<p>If you get import errors:</p> <pre><code>ImportError: cannot import name 'agent' from 'kagura'\n</code></pre> <p>Make sure you're using Python 3.11+:</p> <pre><code>python --version\n</code></pre>"},{"location":"en/installation/#api-key-not-found","title":"API Key Not Found","text":"<p>If you see authentication errors:</p> <pre><code>AuthenticationError: The api_key client option must be set\n</code></pre> <p>Set your API key as described above. The key must be set before importing kagura.</p>"},{"location":"en/installation/#type-errors","title":"Type Errors","text":"<p>If pyright shows errors in your IDE:</p> <ol> <li>Make sure your Python interpreter is set to 3.11+</li> <li>Ensure kagura-ai is installed in your environment</li> <li>Restart your IDE/language server</li> </ol>"},{"location":"en/installation/#upgrading","title":"Upgrading","text":""},{"location":"en/installation/#from-pypi","title":"From PyPI","text":"<pre><code>pip install --upgrade kagura-ai\n</code></pre> <p>or with uv:</p> <pre><code>uv add kagura-ai --upgrade\n</code></pre>"},{"location":"en/installation/#from-git","title":"From Git","text":"<pre><code>cd kagura-ai\ngit pull\nuv sync --dev\n</code></pre>"},{"location":"en/installation/#uninstalling","title":"Uninstalling","text":"<pre><code>pip uninstall kagura-ai\n</code></pre> <p>or with uv:</p> <pre><code>uv remove kagura-ai\n</code></pre>"},{"location":"en/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Quick Start - Build your first agent</li> <li>API Reference - Detailed API documentation</li> <li>Examples - Example code</li> </ul>"},{"location":"en/kagura/","title":"Why Kagura AI?","text":"<p>The name \"Kagura\" draws inspiration from traditional Japanese performance art, reflecting key principles that guide our approach to AI Multi Agent development.</p>"},{"location":"en/kagura/#core-values-in-architecture","title":"Core Values in Architecture","text":""},{"location":"en/kagura/#harmony-in-design","title":"Harmony in Design","text":"<p>Kagura AI's architecture reflects the harmonious nature of its namesake:</p> <ul> <li>Modular Components: Like individual performers in Kagura, each agent has a specific role</li> <li>Coordinated Workflows: Agents work together in orchestrated sequences, similar to synchronized dance movements</li> <li>Balanced Integration: Technologies and tools are integrated thoughtfully, maintaining system coherence</li> </ul>"},{"location":"en/kagura/#flow-of-execution","title":"Flow of Execution","text":"<p>The framework embodies the flowing movements of Kagura:</p> <ul> <li>Smooth State Transitions: Data flows naturally between agents</li> <li>Dynamic Routing: Flexible pathways adapt to different scenarios</li> <li>Efficient Coordination: Streamlined communication between components</li> </ul>"},{"location":"en/kagura/#simplicity-and-power","title":"Simplicity and Power","text":"<p>Like Kagura's combination of simple movements into complex performances:</p> <ul> <li>Simple Configuration: YAML-based setup for sophisticated behaviors</li> <li>Composable Elements: Basic components combine for complex operations</li> <li>Clear Structure: Intuitive organization of agents and workflows</li> </ul>"},{"location":"en/kagura/#technical-foundation","title":"Technical Foundation","text":""},{"location":"en/kagura/#agent-architecture","title":"Agent Architecture","text":"<p>The spiritual aspects of Kagura inspire practical technical decisions:</p> <ul> <li>Independent Agents: Self-contained units with clear responsibilities</li> <li>Collaborative Systems: Agents working together toward common goals</li> <li>Adaptive Workflows: Flexible response to changing requirements</li> </ul>"},{"location":"en/kagura/#state-management","title":"State Management","text":"<p>Maintaining balance through careful state handling:</p> <ul> <li>Type Safety: Ensuring data integrity across the system</li> <li>Clear Communication: Well-defined paths for information flow</li> <li>Consistent Behavior: Predictable and reliable agent interactions</li> </ul>"},{"location":"en/kagura/#framework-vision","title":"Framework Vision","text":"<p>Kagura AI aims to embody both technical excellence and thoughtful design:</p> <ul> <li>Practical Efficiency: Streamlined development of AI Multi Agent systems</li> <li>Sustainable Growth: Easily extensible architecture for future needs</li> <li>Community Focus: Open source collaboration fostering innovation</li> </ul> <p>By combining these elements, Kagura AI creates a framework that is both powerful and accessible, enabling developers to build sophisticated AI Multi Agent systems while maintaining clarity and purpose in their design.</p>"},{"location":"en/quickstart/","title":"Quick Start","text":"<p>Get started with Kagura AI 2.0 in 5 minutes.</p>"},{"location":"en/quickstart/#installation","title":"Installation","text":"<pre><code>pip install kagura-ai\n</code></pre> <p>or with uv:</p> <pre><code>uv add kagura-ai\n</code></pre>"},{"location":"en/quickstart/#set-api-key","title":"Set API Key","text":"<p>Kagura AI uses LiteLLM, which supports multiple LLM providers. Set your API key:</p> <pre><code>export OPENAI_API_KEY=\"your-key-here\"\n</code></pre>"},{"location":"en/quickstart/#your-first-agent","title":"Your First Agent","text":"<p>Create a simple conversational agent:</p> <pre><code># chat.py\nfrom kagura import agent\n\n@agent\nasync def chat(message: str) -&gt; str:\n    '''You are a friendly AI assistant. Respond to: {{ message }}'''\n    pass\n\n# Run\nif __name__ == \"__main__\":\n    import asyncio\n\n    async def main():\n        response = await chat(\"Hello! How are you?\")\n        print(response)\n\n    asyncio.run(main())\n</code></pre> <p>Run it: <pre><code>python chat.py\n</code></pre></p> <p>Output: <pre><code>Hello! I'm doing well, thank you for asking! How can I help you today?\n</code></pre></p>"},{"location":"en/quickstart/#structured-output-with-pydantic","title":"Structured Output with Pydantic","text":"<p>Extract structured data using Pydantic models:</p> <pre><code># extract.py\nfrom kagura import agent\nfrom pydantic import BaseModel\n\nclass Person(BaseModel):\n    name: str\n    age: int\n    occupation: str\n\n@agent\nasync def extract_person(text: str) -&gt; Person:\n    '''Extract person information from: {{ text }}'''\n    pass\n\n# Use it\nif __name__ == \"__main__\":\n    import asyncio\n\n    async def main():\n        result = await extract_person(\n            \"Alice is 30 years old and works as a software engineer\"\n        )\n        print(f\"Name: {result.name}\")\n        print(f\"Age: {result.age}\")\n        print(f\"Occupation: {result.occupation}\")\n\n    asyncio.run(main())\n</code></pre> <p>Output: <pre><code>Name: Alice\nAge: 30\nOccupation: software engineer\n</code></pre></p>"},{"location":"en/quickstart/#multiple-parameters","title":"Multiple Parameters","text":"<p>Use multiple parameters in your templates:</p> <pre><code>from kagura import agent\n\n@agent\nasync def translator(text: str, target_lang: str = \"ja\") -&gt; str:\n    '''Translate to {{ target_lang }}: {{ text }}'''\n    pass\n\n# Use with default\nresult = await translator(\"Hello, world!\")\n# Output: \"\u3053\u3093\u306b\u3061\u306f\u3001\u4e16\u754c\uff01\"\n\n# Use with custom language\nresult = await translator(\"Hello, world!\", target_lang=\"fr\")\n# Output: \"Bonjour, le monde!\"\n</code></pre>"},{"location":"en/quickstart/#code-execution","title":"Code Execution","text":"<p>Generate and execute Python code:</p> <pre><code>from kagura.agents import execute_code\n\nresult = await execute_code(\"Calculate the factorial of 10\")\n\nif result[\"success\"]:\n    print(f\"Code:\\n{result['code']}\\n\")\n    print(f\"Result: {result['result']}\")\nelse:\n    print(f\"Error: {result['error']}\")\n</code></pre> <p>Output: <pre><code>Code:\nimport math\nresult = math.factorial(10)\n\nResult: 3628800\n</code></pre></p>"},{"location":"en/quickstart/#interactive-repl","title":"Interactive REPL","text":"<p>Try the interactive REPL for rapid prototyping:</p> <pre><code>kagura repl\n</code></pre> <p>Available commands: - <code>/help</code> - Show available commands - <code>/agents</code> - List defined agents - <code>/exit</code> - Exit REPL - <code>/clear</code> - Clear screen</p> <p>Example REPL session:</p> <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Kagura AI REPL                       \u2502\n\u2502 Python-First AI Agent Framework      \u2502\n\u2502                                      \u2502\n\u2502 Type /help for commands, /exit to    \u2502\n\u2502 quit                                 \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n&gt;&gt;&gt; @agent\n... async def hello(name: str) -&gt; str:\n...     '''Say hello to {{ name }}'''\n...     pass\n...\n\n&gt;&gt;&gt; await hello(\"World\")\nHello, World!\n\n&gt;&gt;&gt; /exit\nGoodbye!\n</code></pre>"},{"location":"en/quickstart/#list-operations","title":"List Operations","text":"<p>Return lists from agents:</p> <pre><code>@agent\nasync def extract_keywords(text: str) -&gt; list[str]:\n    '''Extract keywords from: {{ text }}'''\n    pass\n\nkeywords = await extract_keywords(\n    \"Python is a programming language used for AI and web development\"\n)\nprint(keywords)\n# ['Python', 'programming language', 'AI', 'web development']\n</code></pre>"},{"location":"en/quickstart/#complex-data-structures","title":"Complex Data Structures","text":"<p>Work with nested Pydantic models:</p> <pre><code>from pydantic import BaseModel\nfrom typing import List\n\nclass Task(BaseModel):\n    title: str\n    priority: int\n    completed: bool\n\nclass Project(BaseModel):\n    name: str\n    tasks: List[Task]\n\n@agent\nasync def plan_project(goal: str) -&gt; Project:\n    '''Create a project plan for: {{ goal }}'''\n    pass\n\nproject = await plan_project(\"Build a web application\")\nprint(f\"Project: {project.name}\")\nfor task in project.tasks:\n    status = \"\u2713\" if task.completed else \"\u25cb\"\n    print(f\"{status} [{task.priority}] {task.title}\")\n</code></pre>"},{"location":"en/quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>API Reference - Detailed API documentation</li> <li>Examples - More examples and patterns</li> <li>Code Executor - Deep dive into code execution</li> <li>REPL Guide - Advanced REPL usage</li> </ul>"},{"location":"en/system-configuration/","title":"System Configuration","text":"<p>Create <code>system.yml</code> in <code>~/.config/kagura/</code>:</p> <pre><code>system:\n  language: en\nprompt:\n  instructions:\n    - language: en\n      description: |\n        Your name is Kagura.\n        You will always respond in English.\n    - language: ja\n      description: |\n        \u3042\u306a\u305f\u306e\u540d\u524d\u306f\u3001\u795e\u697d\uff08\u304b\u3050\u3089\uff09\u3067\u3059\u3002\n        \u3042\u305f\u306a\u305f\u306f\u3001\u5fc5\u305a\u65e5\u672c\u8a9e\u3067\u8fd4\u7b54\u3057\u307e\u3059\u3002\nmemory:\n  message_history:\n    history_uuid: kagura_personal_chat\n    window_size: 1000\n    context_window: 20\n    ttl_hours: 24\n  backend:\n    default_ttl_hours: 24\n    cleanup_interval_hours: 1\nllm:\n  model: openai/gpt-4o-mini\n  max_tokens: 4096\n  retry_count: 3\nbackends:\n - name: redis\n   host: localhost\n   port: 6379\n   db: 0\n</code></pre>"},{"location":"en/system-configuration/#field-descriptions","title":"Field Descriptions","text":"<p>system:</p> <ul> <li><code>language</code>: Defines the default language for system instructions. Supported values include <code>en</code> (English) and <code>ja</code> (Japanese).</li> </ul> <p>prompt:</p> <ul> <li><code>instructions</code>: A list of language-specific instructions describing how the assistant should behave.</li> <li><code>language</code>: Specifies the language of the instruction.</li> <li><code>description</code>: Detailed instructions for the assistant's behavior.</li> </ul> <p>memory.message_history:</p> <ul> <li><code>history_uuid</code>: Unique identifier for the chat history.</li> <li><code>window_size</code>: Number of messages to store in history.</li> <li><code>context_window</code>: Number of messages to consider as context for responses.</li> <li><code>ttl_hours</code>: Time-to-live for the chat history in hours.</li> </ul> <p>memory.backend:</p> <ul> <li><code>default_ttl_hours</code>: Default time-to-live for memory storage.</li> <li><code>cleanup_interval_hours</code>: Interval in hours for cleaning up memory storage.</li> </ul> <p>llm:</p> <ul> <li><code>model</code>: The LLM model to use (e.g., <code>openai/gpt-4o-mini</code>).</li> <li><code>max_tokens</code>: Maximum number of tokens the model can generate per response.</li> <li><code>retry_count</code>: Number of retry attempts in case of model failure.</li> </ul> <p>backends:</p> <p>List of backend services for storage or processing.</p> <ul> <li><code>name</code>: Name of the backend (e.g., <code>redis</code>).</li> <li><code>host</code>: Host address of the backend.</li> <li><code>port</code>: Port number for the backend service.</li> <li><code>db</code>: Database index to use in the backend.</li> </ul>"},{"location":"en/system-configuration/#supported-llm-providers","title":"Supported LLM Providers","text":"<p>Kagura supports multiple providers via LiteLLM:</p> <ul> <li>OpenAI (<code>openai/gpt-4</code>, <code>openai/gpt-3.5-turbo</code>)</li> <li>Anthropic (<code>anthropic/claude-3-opus</code>, <code>anthropic/claude-3-sonnet</code>)</li> <li>Ollama (<code>ollama/llama3.2</code>, <code>ollama/gemma2.5</code>)</li> <li>Google (<code>google/gemini-pro</code>)</li> </ul> <p>For a complete list of supported providers, see the LiteLLM Documentation.</p>"},{"location":"en/system-configuration/#ai-agents-configuration","title":"AI Agents Configuration","text":"<p>For a detailed explanation of agent-related settings, refer to the AI Agents Overview:</p> <p>Quick Start \u2192</p>"},{"location":"en/advanced/state-management/","title":"State Management in Kagura AI","text":""},{"location":"en/advanced/state-management/#introduction","title":"Introduction","text":"<p>Kagura AI's state management system has been enhanced with INPUT_QUERY and TEXT_OUTPUT fields to provide clearer separation between inputs and outputs while maintaining state consistency. This guide explains how to effectively use these features in your agents.</p>"},{"location":"en/advanced/state-management/#core-concepts","title":"Core Concepts","text":""},{"location":"en/advanced/state-management/#input_query","title":"INPUT_QUERY","text":"<ul> <li>Stores structured input field data</li> <li>Preserves original input context</li> <li>Enables input tracking and validation</li> </ul>"},{"location":"en/advanced/state-management/#text_output","title":"TEXT_OUTPUT","text":"<ul> <li>Stores converted response text</li> <li>Provides standardized output format</li> <li>Facilitates response processing</li> </ul>"},{"location":"en/advanced/state-management/#implementation-example","title":"Implementation Example","text":""},{"location":"en/advanced/state-management/#basic-agent-configuration","title":"Basic Agent Configuration","text":"<pre><code># agent.yml\ninput_fields:\n  - text_input\n  - parameters\n\nresponse_fields:\n  - analysis_result\n  - summary\n</code></pre> <pre><code># state_model.yml\nstate_fields:\n  - name: text_input\n    type: str\n    description:\n      - language: en\n        text: Input text for processing\n  - name: parameters\n    type: Dict[str, Any]\n    description:\n      - language: en\n        text: Processing parameters\n  - name: analysis_result\n    type: str\n    description:\n      - language: en\n        text: Analysis output\n  - name: summary\n    type: str\n    description:\n      - language: en\n        text: Summarized results\n</code></pre>"},{"location":"en/advanced/state-management/#using-state-management","title":"Using State Management","text":"<pre><code>from kagura.core.agent import Agent\n\nasync def process_text():\n    # Initialize agent with input data\n    input_data = {\n        \"text_input\": \"Sample text for analysis\",\n        \"parameters\": {\"depth\": \"detailed\"}\n    }\n\n    agent = Agent.assigner(\"text_analyzer\", input_data)\n    result = await agent.execute()\n\n    # Access stored input\n    print(\"Input Data:\", result.INPUT_QUERY)\n\n    # Access converted output\n    print(\"Text Output:\", result.TEXT_OUTPUT)\n\n    # Access specific fields\n    print(\"Analysis:\", result.analysis_result)\n    print(\"Summary:\", result.summary)\n</code></pre>"},{"location":"en/advanced/state-management/#best-practices","title":"Best Practices","text":""},{"location":"en/advanced/state-management/#1-input-field-storage","title":"1. Input Field Storage","text":"<ul> <li>Store all input fields in INPUT_QUERY</li> <li>Validate input data structure</li> <li>Maintain input field relationships</li> </ul>"},{"location":"en/advanced/state-management/#2-text-output-conversion","title":"2. Text Output Conversion","text":"<ul> <li>Convert complex responses to readable text</li> <li>Handle different data types appropriately</li> <li>Maintain output consistency</li> </ul>"},{"location":"en/advanced/state-management/#3-state-consistency","title":"3. State Consistency","text":"<ul> <li>Keep INPUT_QUERY and TEXT_OUTPUT synchronized</li> <li>Handle state transitions cleanly</li> <li>Validate state at each step</li> </ul>"},{"location":"en/advanced/state-management/#advanced-features","title":"Advanced Features","text":""},{"location":"en/advanced/state-management/#custom-text-conversion","title":"Custom Text Conversion","text":"<p>You can customize how responses are converted to text by modifying the <code>_convert_response_to_text</code> method:</p> <pre><code>async def _convert_response_to_text(self) -&gt; str:\n    \"\"\"Custom text conversion logic\"\"\"\n    text_parts = []\n\n    for field in self.response_fields:\n        value = getattr(self._state, field)\n        if isinstance(value, str):\n            text_parts.append(value)\n        elif isinstance(value, (list, dict)):\n            text_parts.append(\n                json.dumps(value, indent=2, ensure_ascii=False)\n            )\n        elif isinstance(value, BaseModel):\n            text_parts.append(\n                value.model_dump_json(indent=2)\n            )\n\n    return \"\\n\\n\".join(text_parts)\n</code></pre>"},{"location":"en/advanced/state-management/#state-validation","title":"State Validation","text":"<p>Implement custom validation for your state:</p> <pre><code>from pydantic import validator\n\nclass MyStateModel(BaseStateModel):\n    @validator('INPUT_QUERY')\n    def validate_input_query(cls, v):\n        if not v.get('required_field'):\n            raise ValueError(\"Missing required field\")\n        return v\n</code></pre>"},{"location":"en/advanced/state-management/#testing","title":"Testing","text":""},{"location":"en/advanced/state-management/#example-test-cases","title":"Example Test Cases","text":"<pre><code>@pytest.mark.asyncio\nasync def test_state_management():\n    agent = Agent.assigner(\"my_agent\")\n    input_data = {\n        \"text_input\": \"Test input\",\n        \"parameters\": {\"key\": \"value\"}\n    }\n\n    result = await agent.execute(input_data)\n\n    # Verify INPUT_QUERY storage\n    assert result.INPUT_QUERY[\"text_input\"] == \"Test input\"\n    assert result.INPUT_QUERY[\"parameters\"][\"key\"] == \"value\"\n\n    # Verify TEXT_OUTPUT conversion\n    assert result.TEXT_OUTPUT is not None\n    assert isinstance(result.TEXT_OUTPUT, str)\n</code></pre>"},{"location":"en/advanced/state-management/#common-patterns","title":"Common Patterns","text":""},{"location":"en/advanced/state-management/#1-input-processing","title":"1. Input Processing","text":"<pre><code>def process_input(state: BaseStateModel) -&gt; None:\n    # Access stored input data\n    input_data = state.INPUT_QUERY\n\n    # Process specific fields\n    text_input = input_data.get(\"text_input\", \"\")\n    parameters = input_data.get(\"parameters\", {})\n\n    # Perform validation or transformation\n    if not text_input:\n        raise ValueError(\"Text input is required\")\n</code></pre>"},{"location":"en/advanced/state-management/#2-output-formatting","title":"2. Output Formatting","text":"<pre><code>def format_output(state: BaseStateModel) -&gt; None:\n    # Generate formatted output\n    formatted_text = []\n\n    # Add analysis results\n    if state.analysis_result:\n        formatted_text.append(f\"Analysis: {state.analysis_result}\")\n\n    # Add summary\n    if state.summary:\n        formatted_text.append(f\"Summary: {state.summary}\")\n\n    # Update TEXT_OUTPUT\n    state.TEXT_OUTPUT = \"\\n\".join(formatted_text)\n</code></pre>"},{"location":"en/advanced/state-management/#troubleshooting","title":"Troubleshooting","text":""},{"location":"en/advanced/state-management/#common-issues","title":"Common Issues","text":"<ol> <li>Missing Input Data</li> <li>Verify all required input fields are provided</li> <li>Check INPUT_QUERY structure</li> <li> <p>Validate input data types</p> </li> <li> <p>Text Conversion Errors</p> </li> <li>Check response field definitions</li> <li>Verify data type handling</li> <li> <p>Review text conversion logic</p> </li> <li> <p>State Consistency</p> </li> <li>Ensure state transitions are handled</li> <li>Verify field updates</li> <li>Check validation rules</li> </ol>"},{"location":"en/advanced/state-management/#best-practices-summary","title":"Best Practices Summary","text":"<ol> <li>Always validate input data before processing</li> <li>Maintain clear separation between input and output states</li> <li>Use type hints and validation for better reliability</li> <li>Document state transitions and transformations</li> <li>Implement comprehensive error handling</li> <li>Write tests for state management logic</li> <li>Keep input and output structures consistent</li> <li>Use appropriate data types for state fields</li> <li>Handle state cleanup properly</li> <li>Monitor state changes for debugging</li> </ol>"},{"location":"en/advanced/state-management/#future-considerations","title":"Future Considerations","text":"<ol> <li>State History Tracking</li> <li>Enhanced Validation Rules</li> <li>Custom Serialization Formats</li> <li>State Migration Support</li> <li>Performance Optimization</li> </ol>"},{"location":"en/agents/configuration/","title":"Agent Configuration","text":"<p>Kagura agents are configured using YAML files, allowing you to define their roles, behavior, and state models. This document provides an overview of the configuration structure and examples for each agent type.</p>"},{"location":"en/agents/configuration/#configuration-basics","title":"Configuration Basics","text":"<p>Each agent requires at least one YAML file:</p> <ol> <li><code>agent.yml</code>: Defines the agent's behavior, prompts, and tools.</li> </ol> <p>For Atomic Agent and Tool Agent, an optional <code>state_model.yml</code> can be used to specify the state model. Orchestrator Agent dose not require a <code>state_model.yml</code> as they rely on predefined Atomic Agent and Tool Agent configurations.</p>"},{"location":"en/agents/configuration/#directory-structure","title":"Directory Structure","text":"<pre><code>agents/\n\u2514\u2500\u2500 agent_name/\n    \u251c\u2500\u2500 agent.yml         # Core configuration\n    \u251c\u2500\u2500 state_model.yml   # State definition\n    \u2514\u2500\u2500 tools.py          # Custom tools\n</code></pre>"},{"location":"en/agents/configuration/#agentyml","title":"agent.yml","text":"<p>The <code>agent.yml</code> file defines the agent's role, behavior, and processing logic.</p>"},{"location":"en/agents/configuration/#key-configuration-fields","title":"Key Configuration Fields","text":""},{"location":"en/agents/configuration/#atomic-agent","title":"Atomic Agent","text":"<ul> <li><code>llm</code>: Configuration for the language model (e.g., <code>model</code>, <code>max_tokens</code>, <code>retry_count</code>).</li> <li><code>response_fields</code>: Specifies the expected output fields of the agent. Each field listed here must also be included in the <code>state_model.yml</code> under <code>state_fields</code> to ensure consistency.</li> <li><code>post_custom_tool</code>: Specifies a custom tool to be executed as a post-processing hook for state data.</li> <li><code>pre_custom_tool</code>: Specifies a custom tool to be executed as a pre-processing hook for state data.</li> </ul>"},{"location":"en/agents/configuration/#tool-agent","title":"Tool Agent","text":"<ul> <li><code>custom_tool</code>: Defines the path to a custom tool that the agent will use. This is the primary configuration field for Tool Agents, allowing them to execute custom logic for specific tasks.</li> <li><code>response_fields</code>: Required when specifying the fields that the tool is expected to produce. These fields must align with the <code>state_model.yml</code> definitions for consistency.</li> </ul>"},{"location":"en/agents/configuration/#orchestrator-agent","title":"Orchestrator Agent","text":"<ul> <li><code>entry_point</code>: Specifies the starting node in a workflow. Orchestrator Agents are built using predefined Atomic Agent and Tool Agent configurations and do not require their own <code>state_model.yml</code>.</li> <li><code>nodes</code>: Lists the agents involved in the workflow.</li> <li><code>edges</code>: Defines the connections between workflow nodes.</li> <li><code>state_field_bindings</code>: Maps the state fields between agents in the workflow.</li> <li><code>conditional_edges</code>: Defines conditional transitions between nodes based on runtime evaluations.</li> </ul>"},{"location":"en/agents/configuration/#example-atomic-agent","title":"Example: Atomic Agent","text":"<pre><code>type: atomic  # atomic, tool, or workflow\nllm:\n  model: openai/gpt-4o-mini # Cusomize the LLM model to use (optional)\n  max_tokens: 2048\n  retry_count: 3\ndescription:\n  - language: en\n    text: An agent for summarizing documents.\ninstructions:\n  - language: en\n    text: Summarize the following text.\nprompt:\n  - language: en\n    template: |\n      {content}\nresponse_fields:\n  - summary\ninput_fields:\n  - content\npost_custom_tool: agent_name.tools.postprocess_summary  # Finalize the summary output\n</code></pre>"},{"location":"en/agents/configuration/#example-tool-agent","title":"Example: Tool Agent","text":"<pre><code>type: tool\ncustom_tool: agents.[agent_name].tools.data_fetcher\nresponse_fields: # state fields that the tool produces or updates\n  - data\ninput_fields: # state fields that the tool expects\n  - url\n  - params\n</code></pre>"},{"location":"en/agents/configuration/#example-workflow-agent","title":"Example: Workflow Agent","text":"<pre><code>type: workflow\nentry_point: data_collector\nnodes:\n  - data_collector\n  - analyzer\n  - summarizer\n\nedges:\n  - from: data_collector\n    to: analyzer\n  - from: analyzer\n    to: summarizer\n\nstate_field_bindings:\n  - from: data_collector.data\n    to: analyzer.input_data\n  - from: analyzer.result.text\n    to: summarizer.context\n\nconditional_edges:\n  - analyzer:\n      condition_function: kagura.conditions.check_analysis\n      conditions:\n        success: summarizer\n        retry: analyzer\n        failure: error_handler\n</code></pre>"},{"location":"en/agents/configuration/#state_modelyml","title":"state_model.yml","text":"<p>The <code>state_model.yml</code> file defines the input, output, and intermediate state fields for the agent. This file is optional for Atomic Agent and Tool Agent and not used by Orchestrator Agent agents.</p>"},{"location":"en/agents/configuration/#example-atomic-agent-state-model","title":"Example: Atomic Agent State Model","text":"<pre><code>custom_models: # You can define own custom models here\n  - name: SummaryData\n    fields:\n      - name: text\n        type: str\n        description:\n          - language: en\n            text: Text to summarize\n      - name: summary\n        type: str\n        description:\n          - language: en\n            text: Generated summary\n\nstate_fields: # Define the state fields used by the agent and tools\n  - name: input_text\n    type: str\n    description:\n      - language: en\n        text: Input text for summarization\n  - name: output_summary\n    type: SummaryData\n    description:\n      - language: en\n        text: Generated summary data\n</code></pre>"},{"location":"en/agents/configuration/#custom-tools","title":"Custom Tools","text":"<p>Custom tools can be used to extend the functionality of agents. These tools should be located in the <code>agent_name/</code> directory and defined in the <code>agent.yml</code> file. You can change the name of <code>tools.py</code> to any other name, but make sure to update the path in the <code>agent.yml</code> file.</p>"},{"location":"en/agents/configuration/#example-custom-tool","title":"Example: Custom Tool","text":"<pre><code>from kagura.core.models import StateModel\n\nasync def fetch_data(state: StateModel) -&gt; StateModel:\n    \"\"\"\n    Custom tool for fetching data from an external API.\n    \"\"\"\n    try:\n        state.data = await external_api_fetch(state.url)\n        return state\n    except Exception as e:\n        raise Exception(f\"Data fetching failed: {str(e)}\")\n</code></pre>"},{"location":"en/agents/configuration/#best-practices","title":"Best Practices","text":"<ul> <li>Keep YAML configurations simple and focused on the agent's specific role.</li> <li>Use descriptive field names and comments to ensure maintainability.</li> <li>Validate your state models using tools like <code>pydantic</code> to avoid runtime errors.</li> <li>Leverage pre- and post-processing hooks to customize state data.</li> </ul>"},{"location":"en/agents/overview/","title":"Overview","text":"<p>Kagura AI Agents are the core building blocks of the Kagura AI system. These modular components enable developers to create flexible, reusable, and scalable workflows for various applications.</p>"},{"location":"en/agents/overview/#what-is-a-kagura-ai-agent","title":"What is a Kagura AI Agent?","text":"<p>A Kagura agent is a self-contained unit designed to:</p> <ul> <li>Perform specific tasks in an AI workflow.</li> <li>Manage state data through YAML-defined models.</li> <li>Interact with other agents via state sharing and orchestration.</li> </ul> <p>Agents are configurable and extensible, making them adaptable to diverse use cases.</p>"},{"location":"en/agents/overview/#core-agent-properties","title":"Core Agent Properties","text":"<ol> <li>Independence: Each agent operates as a standalone module with its own state and logic.</li> <li>Collaboration: Agents can share states and collaborate within workflows.</li> <li>Extensibility: Agents can include custom tools and pre/post-processing hooks.</li> <li>Type Safety: All data is validated using Pydantic models, ensuring consistency.</li> </ol>"},{"location":"en/agents/overview/#agent-types","title":"Agent Types","text":"<p>Kagura offers three primary agent types, each designed for specific use cases:</p> <p>Atomic Agent:</p> <ul> <li>Core stateful agent for LLM tasks.</li> <li>Supports pre- and post-processing hooks for flexibility.</li> <li>Generates structured outputs with type-safe validation.</li> </ul> <p>Tool Agent:</p> <ul> <li>Focuses on non-LLM data processing.</li> <li>Ideal for data transformations, API integrations, and fast execution.</li> </ul> <p>Workflow Agent:</p> <ul> <li>Manages workflows involving multiple agents.</li> <li>Enables conditional routing, error recovery, and progress monitoring.</li> <li>Uses predefined Atomic Agent and Tool Agent to orchestrate tasks.</li> </ul> <p>For a detailed description of each agent type, see the Agent Types document.</p>"},{"location":"en/agents/overview/#agent-configuration","title":"Agent Configuration","text":"<p>Agents are configured using YAML files, which define their roles, state models, and interactions. The basic structure of an agent is as follows:</p> <pre><code>agents/\n\u2514\u2500\u2500 agent_name/\n    \u251c\u2500\u2500 agent.yml         # Core configuration\n    \u251c\u2500\u2500 state_model.yml   # State definition\n    \u2514\u2500\u2500 tools.py          # Custom tools\n</code></pre> <p>To learn more about setting up agents, refer to the Agent Configuration document.</p>"},{"location":"en/agents/overview/#workflow-integration","title":"Workflow Integration","text":"<p>Agents are orchestrated to form complex workflows. The workflow agent handles state sharing, data transformations, and conditional logic between agents. For more information on orchestrating agents, see the Workflow Agent section.</p>"},{"location":"en/agents/overview/#custom-tools","title":"Custom Tools","text":"<p>Agents can be extended with custom tools for specialized tasks. These tools integrate seamlessly into the agent\u2019s lifecycle, providing additional functionality. See the Custom Tool section for more details.</p>"},{"location":"en/agents/overview/#next-steps","title":"Next Steps","text":"<p>To start building with Kagura agents:</p> <ul> <li>Understand the available Agent Types.</li> <li>Learn how to set up Agent Configurations.</li> </ul> <p>These guides will help you effectively utilize Kagura agents in your projects.</p>"},{"location":"en/agents/types/","title":"Agent Types","text":"<p>Kagura provides three core agent types, each tailored for specific tasks and workflows. Understanding these types will help you choose the best one for your project.</p>"},{"location":"en/agents/types/#atomic-agent","title":"Atomic Agent","text":""},{"location":"en/agents/types/#overview","title":"Overview","text":"<p>The Atomic Agent is the foundational building block for stateful AI tasks. It interacts with LLMs and supports flexible configurations for complex processing.</p>"},{"location":"en/agents/types/#key-features","title":"Key Features","text":"<ul> <li>Stateful LLM Processing: Manages input and output states using YAML-defined models.</li> <li>Pre/Post-Processing Hooks: Allows for additional customization before and after LLM interactions.</li> <li>Structured Outputs: Ensures consistency through type-safe validation.</li> </ul>"},{"location":"en/agents/types/#use-cases","title":"Use Cases","text":"<ul> <li>Generating structured content like summaries or reports.</li> <li>Answering complex queries with context-aware responses.</li> <li>Processing multi-step LLM workflows.</li> </ul>"},{"location":"en/agents/types/#example-configuration","title":"Example Configuration","text":"<pre><code># agent.yml\ntype: atomic  # atomic, tool, or workflow\nllm: # Custom LLM configuration for the agent (optional)\n  model: openai/gpt-4o-mini\n  max_tokens: 2048\n  retry_count: 3\ndescription:\n  - language: en\n    text: An agent for summarizing documents.\nprompt:\n  - language: en\n    template: |\n      Summarize: {content}\nresponse_fields:\n  - summary\ninput_fields:\n  - content\n</code></pre>"},{"location":"en/agents/types/#tool-agent","title":"Tool Agent","text":""},{"location":"en/agents/types/#overview_1","title":"Overview","text":"<p>The Tool Agent is designed for tasks that do not involve LLMs. It excels at fast data transformations and external API integrations.</p>"},{"location":"en/agents/types/#key-features_1","title":"Key Features","text":"<ul> <li>No LLM Dependency: Focuses on computational tasks.</li> <li>Fast Execution: Optimized for quick processing.</li> <li>Extensibility: Supports integration with custom tools and APIs.</li> </ul>"},{"location":"en/agents/types/#use-cases_1","title":"Use Cases","text":"<ul> <li>Fetching data from external sources.</li> <li>Transforming or validating structured data.</li> <li>Integrating with external APIs for domain-specific tasks.</li> </ul>"},{"location":"en/agents/types/#example-configuration_1","title":"Example Configuration","text":"<pre><code># agent.yml\ncustom_tool: agent_name.tools.data_fetcher\nresponse_fields:\n  - data  # State fields updated or generated by the tool\ninput_fields:  # State fields required for the tool\n  - url\n  - params\n</code></pre>"},{"location":"en/agents/types/#workflow-agent","title":"Workflow Agent","text":""},{"location":"en/agents/types/#overview_2","title":"Overview","text":"<p>The Workflow Agent coordinates workflows involving multiple agents. It manages state sharing, conditional routing, and error handling across agents.</p>"},{"location":"en/agents/types/#key-features_2","title":"Key Features","text":"<ul> <li>Multi-Agent Workflows: Integrates and coordinates multiple agents (Atomic Agent and Tool Agent) in a single workflow.</li> <li>State Binding: Shares and transfers state between agents seamlessly.</li> <li>Conditional Routing: Supports dynamic transitions between workflow nodes based on runtime conditions.</li> <li>Error Recovery: Handles errors gracefully with retry mechanisms and fallback options.</li> <li>No State Model Requirement: Relies on predefined configurations of Atomic Agent and Tool Agent, eliminating the need for its own <code>state_model.yml</code>.</li> </ul>"},{"location":"en/agents/types/#use-cases_2","title":"Use Cases","text":"<ul> <li>Coordinating a pipeline for document analysis and summarization.</li> <li>Managing workflows that combine data processing and LLM interactions.</li> <li>Implementing complex multi-step decision-making systems.</li> </ul>"},{"location":"en/agents/types/#example-configuration_2","title":"Example Configuration","text":"<pre><code># agent.yml\nentry_point: data_collector\nnodes:\n  - data_collector\n  - analyzer\n  - summarizer\n\nedges:\n  - from: data_collector\n    to: analyzer\n  - from: analyzer\n    to: summarizer\n\nstate_field_bindings:\n  - from: data_collector.data\n    to: analyzer.input_text\n  - from: analyzer.result.text\n    to: summarizer.context\n</code></pre>"},{"location":"en/agents/types/#choosing-the-right-agent","title":"Choosing the Right Agent","text":"Agent Type Use When You Need Atomic Agent Context-aware LLM interactions. Tool Agent Fast data transformations and API calls. Worfklow Agent Complex, multi-step workflows."},{"location":"en/api/","title":"API Reference","text":"<p>Complete API documentation for Kagura AI 2.0.</p>"},{"location":"en/api/#core-components","title":"Core Components","text":""},{"location":"en/api/#agent-decorator","title":"@agent Decorator","text":"<p>Convert async functions into AI agents with automatic LLM integration.</p> <pre><code>from kagura import agent\n\n@agent\nasync def hello(name: str) -&gt; str:\n    '''Say hello to {{ name }}'''\n    pass\n</code></pre> <p>Key Features: - One-line agent creation - Type-based response parsing - Jinja2 template support - Multi-LLM support via LiteLLM</p> <p>Read more \u2192</p>"},{"location":"en/api/#code-executor","title":"Code Executor","text":"<p>Safe Python code generation and execution.</p> <pre><code>from kagura.agents import execute_code\n\nresult = await execute_code(\"Calculate factorial of 10\")\nprint(result[\"result\"])  # 3628800\n</code></pre> <p>Key Features: - Natural language \u2192 Python code - AST-based security validation - Resource limits (timeout, memory) - Safe module whitelist</p> <p>Read more \u2192</p>"},{"location":"en/api/#cli-commands","title":"CLI Commands","text":"<p>Command-line interface for Kagura AI.</p> <pre><code># Start interactive REPL\nkagura repl\n\n# Check version\nkagura version\n</code></pre> <p>Key Features: - Interactive REPL for rapid prototyping - Multi-line input support - Syntax highlighting - Command history</p> <p>Read more \u2192</p>"},{"location":"en/api/#quick-links","title":"Quick Links","text":"<ul> <li>Getting Started - Build your first agent</li> <li>Tutorials - Step-by-step guides</li> <li>Examples - Code examples</li> <li>FAQ - Frequently asked questions</li> </ul>"},{"location":"en/api/#api-overview","title":"API Overview","text":""},{"location":"en/api/#core-functions","title":"Core Functions","text":"Function Description <code>@agent</code> Convert function to AI agent <code>execute_code()</code> Generate and execute Python code"},{"location":"en/api/#configuration","title":"Configuration","text":"<p>Agents can be configured with: - <code>model</code>: LLM model to use - <code>temperature</code>: Sampling temperature - <code>max_tokens</code>: Maximum response tokens</p> <p>Example:</p> <pre><code>@agent(model=\"gpt-4o\", temperature=0.5)\nasync def my_agent(query: str) -&gt; str:\n    '''Answer: {{ query }}'''\n    pass\n</code></pre>"},{"location":"en/api/#type-support","title":"Type Support","text":"<p>Supported return types:</p> Type Example Description <code>str</code> <code>-&gt; str</code> Plain text response <code>int</code> <code>-&gt; int</code> Integer value <code>float</code> <code>-&gt; float</code> Floating point number <code>bool</code> <code>-&gt; bool</code> Boolean value <code>list[T]</code> <code>-&gt; list[str]</code> List of items <code>dict</code> <code>-&gt; dict</code> Dictionary <code>BaseModel</code> <code>-&gt; Person</code> Pydantic model <code>Optional[T]</code> <code>-&gt; Optional[str]</code> Optional value"},{"location":"en/api/#template-syntax","title":"Template Syntax","text":"<p>Agent docstrings use Jinja2 syntax:</p> <pre><code>@agent\nasync def greet(name: str, time: str = \"morning\") -&gt; str:\n    '''\n    Good {{ time }}, {{ name }}!\n    {% if time == \"evening\" %}\n    Hope you had a great day.\n    {% endif %}\n    '''\n    pass\n</code></pre> <p>Supported Jinja2 features: - Variable interpolation: <code>{{ variable }}</code> - Conditionals: <code>{% if condition %}</code> - Loops: <code>{% for item in items %}</code> - Filters: <code>{{ text|upper }}</code></p>"},{"location":"en/api/#error-handling","title":"Error Handling","text":"<p>All agents can raise these exceptions:</p> <pre><code>from litellm import APIError\nfrom pydantic import ValidationError\n\ntry:\n    result = await my_agent(\"input\")\nexcept APIError as e:\n    # LLM API error (auth, rate limit, etc.)\n    print(f\"API error: {e}\")\nexcept ValidationError as e:\n    # Pydantic parsing error\n    print(f\"Validation error: {e}\")\nexcept Exception as e:\n    # Other errors\n    print(f\"Unexpected error: {e}\")\n</code></pre>"},{"location":"en/api/#environment-variables","title":"Environment Variables","text":"<p>Kagura AI respects these environment variables:</p> Variable Description <code>OPENAI_API_KEY</code> OpenAI API key <code>ANTHROPIC_API_KEY</code> Anthropic (Claude) API key <code>GOOGLE_API_KEY</code> Google (Gemini) API key <code>AZURE_API_KEY</code> Azure OpenAI API key <p>Set them before running your agents:</p> <pre><code>export OPENAI_API_KEY=\"your-key-here\"\npython my_agent.py\n</code></pre>"},{"location":"en/api/#best-practices","title":"Best Practices","text":""},{"location":"en/api/#1-use-type-hints","title":"1. Use Type Hints","text":"<p>Always specify return types for automatic parsing:</p> <pre><code># Good\n@agent\nasync def extract_keywords(text: str) -&gt; list[str]:\n    '''Extract keywords from: {{ text }}'''\n    pass\n\n# Less good\n@agent\nasync def extract_keywords(text: str):  # No return type\n    '''Extract keywords from: {{ text }}'''\n    pass\n</code></pre>"},{"location":"en/api/#2-clear-instructions","title":"2. Clear Instructions","text":"<p>Write explicit docstrings:</p> <pre><code># Good\n@agent\nasync def summarize(text: str, max_words: int) -&gt; str:\n    '''Summarize the following text in {{ max_words }} words or less.\n\n    Text: {{ text }}\n    '''\n    pass\n\n# Less clear\n@agent\nasync def summarize(text: str, max_words: int) -&gt; str:\n    '''Summarize {{ text }} in {{ max_words }} words'''\n    pass\n</code></pre>"},{"location":"en/api/#3-pydantic-models","title":"3. Pydantic Models","text":"<p>Use Pydantic for structured data:</p> <pre><code>from pydantic import BaseModel, Field\n\nclass Person(BaseModel):\n    name: str = Field(description=\"Full name\")\n    age: int = Field(ge=0, le=150, description=\"Age in years\")\n    email: str = Field(pattern=r\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$\")\n\n@agent\nasync def extract_person(text: str) -&gt; Person:\n    '''Extract person information from: {{ text }}'''\n    pass\n</code></pre>"},{"location":"en/api/#4-error-handling","title":"4. Error Handling","text":"<p>Always handle errors in production:</p> <pre><code>async def safe_agent_call():\n    try:\n        result = await my_agent(\"input\")\n        return {\"success\": True, \"data\": result}\n    except Exception as e:\n        logger.error(f\"Agent failed: {e}\")\n        return {\"success\": False, \"error\": str(e)}\n</code></pre>"},{"location":"en/api/#version-information","title":"Version Information","text":"<p>Check Kagura AI version:</p> <pre><code>import kagura\nprint(kagura.__version__)  # \"2.0.0-alpha.1\"\n</code></pre> <p>Or via CLI:</p> <pre><code>kagura version\n</code></pre>"},{"location":"en/api/#support","title":"Support","text":"<ul> <li>GitHub Issues</li> <li>Discussion Forum</li> <li>Documentation</li> </ul>"},{"location":"en/api/#related","title":"Related","text":"<ul> <li>Quick Start Guide</li> <li>Tutorials</li> <li>Examples</li> <li>FAQ</li> </ul>"},{"location":"en/api/agent/","title":"@agent Decorator","text":"<p>The <code>@agent</code> decorator is the core of Kagura AI 2.0, converting any async function into an AI agent with automatic LLM integration.</p>"},{"location":"en/api/agent/#overview","title":"Overview","text":"<p>The decorator: 1. Extracts function signature and parameters 2. Uses the docstring as a Jinja2 template 3. Calls the LLM with the rendered prompt 4. Parses the response based on return type hints 5. Returns a properly typed result</p>"},{"location":"en/api/agent/#signature","title":"Signature","text":"<pre><code>def agent(\n    fn: Callable = None,\n    *,\n    model: str = \"gpt-4o-mini\",\n    temperature: float = 0.7,\n    max_tokens: int | None = None,\n    **kwargs\n) -&gt; Callable\n</code></pre>"},{"location":"en/api/agent/#parameters","title":"Parameters","text":""},{"location":"en/api/agent/#required-parameters","title":"Required Parameters","text":"<ul> <li>fn (<code>Callable</code>): The async function to convert into an agent. When using <code>@agent</code> without parentheses, this is automatically passed.</li> </ul>"},{"location":"en/api/agent/#optional-parameters","title":"Optional Parameters","text":"<ul> <li>model (<code>str</code>, default: <code>\"gpt-4o-mini\"</code>): The LLM model to use. Supports any model from LiteLLM:</li> <li>OpenAI: <code>\"gpt-4o\"</code>, <code>\"gpt-4o-mini\"</code>, <code>\"gpt-3.5-turbo\"</code></li> <li>Anthropic: <code>\"claude-3-5-sonnet-20241022\"</code>, <code>\"claude-3-haiku-20240307\"</code></li> <li>Google: <code>\"gemini/gemini-pro\"</code>, <code>\"gemini/gemini-1.5-flash\"</code></li> <li> <p>Ollama: <code>\"ollama/llama3.2\"</code>, <code>\"ollama/gemma2\"</code></p> </li> <li> <p>temperature (<code>float</code>, default: <code>0.7</code>): Sampling temperature (0.0 to 2.0). Lower values make output more focused and deterministic.</p> </li> <li> <p>max_tokens (<code>int | None</code>, default: <code>None</code>): Maximum tokens in the response. If not specified, uses the model's default.</p> </li> <li> <p>kwargs: Additional parameters passed to LiteLLM's <code>completion()</code> function.</p> </li> </ul>"},{"location":"en/api/agent/#return-value","title":"Return Value","text":"<p>Returns a wrapped async function with the same signature as the original, but with AI-powered behavior.</p>"},{"location":"en/api/agent/#usage","title":"Usage","text":""},{"location":"en/api/agent/#basic-usage","title":"Basic Usage","text":"<pre><code>from kagura import agent\n\n@agent\nasync def hello(name: str) -&gt; str:\n    '''Say hello to {{ name }}'''\n    pass\n\nresult = await hello(\"World\")\nprint(result)  # \"Hello, World! How can I help you today?\"\n</code></pre>"},{"location":"en/api/agent/#with-custom-model","title":"With Custom Model","text":"<pre><code>@agent(model=\"gpt-4o\")\nasync def analyze(text: str) -&gt; str:\n    '''Analyze the sentiment of: {{ text }}'''\n    pass\n\nresult = await analyze(\"I love this product!\")\nprint(result)  # \"Positive sentiment...\"\n</code></pre>"},{"location":"en/api/agent/#with-temperature-control","title":"With Temperature Control","text":"<pre><code># More deterministic (lower temperature)\n@agent(temperature=0.2)\nasync def translate(text: str, lang: str) -&gt; str:\n    '''Translate to {{ lang }}: {{ text }}'''\n    pass\n\n# More creative (higher temperature)\n@agent(temperature=1.5)\nasync def creative_story(topic: str) -&gt; str:\n    '''Write a creative story about: {{ topic }}'''\n    pass\n</code></pre>"},{"location":"en/api/agent/#with-pydantic-models","title":"With Pydantic Models","text":"<pre><code>from pydantic import BaseModel\n\nclass Person(BaseModel):\n    name: str\n    age: int\n    occupation: str\n\n@agent\nasync def extract_person(text: str) -&gt; Person:\n    '''Extract person information from: {{ text }}'''\n    pass\n\nperson = await extract_person(\"Alice is 30 years old and works as a software engineer\")\nprint(f\"{person.name}, {person.age}, {person.occupation}\")\n# Output: Alice, 30, software engineer\n</code></pre>"},{"location":"en/api/agent/#with-list-return-types","title":"With List Return Types","text":"<pre><code>@agent\nasync def extract_keywords(text: str) -&gt; list[str]:\n    '''Extract keywords from: {{ text }}'''\n    pass\n\nkeywords = await extract_keywords(\"Python is a programming language for AI\")\nprint(keywords)\n# Output: ['Python', 'programming language', 'AI']\n</code></pre>"},{"location":"en/api/agent/#multiple-parameters","title":"Multiple Parameters","text":"<pre><code>@agent\nasync def summarize(text: str, max_words: int = 50) -&gt; str:\n    '''Summarize in {{ max_words }} words or less: {{ text }}'''\n    pass\n\nsummary = await summarize(\"Long text here...\", max_words=30)\n</code></pre>"},{"location":"en/api/agent/#docstring-templates","title":"Docstring Templates","text":"<p>The docstring is treated as a Jinja2 template. All function parameters are available as template variables.</p>"},{"location":"en/api/agent/#simple-variable-interpolation","title":"Simple Variable Interpolation","text":"<pre><code>@agent\nasync def greet(name: str, greeting: str = \"Hello\") -&gt; str:\n    '''{{ greeting }}, {{ name }}! How are you?'''\n    pass\n</code></pre>"},{"location":"en/api/agent/#conditional-logic","title":"Conditional Logic","text":"<pre><code>@agent\nasync def format_response(query: str, formal: bool = False) -&gt; str:\n    '''\n    {% if formal %}\n    Respond formally to: {{ query }}\n    {% else %}\n    Respond casually to: {{ query }}\n    {% endif %}\n    '''\n    pass\n</code></pre>"},{"location":"en/api/agent/#loops","title":"Loops","text":"<pre><code>@agent\nasync def process_items(items: list[str]) -&gt; str:\n    '''\n    Process the following items:\n    {% for item in items %}\n    - {{ item }}\n    {% endfor %}\n    '''\n    pass\n</code></pre>"},{"location":"en/api/agent/#type-based-response-parsing","title":"Type-Based Response Parsing","text":"<p>The decorator automatically parses LLM responses based on the return type annotation:</p> Return Type Parsing Behavior <code>str</code> Returns raw response <code>int</code> Parses as integer <code>float</code> Parses as float <code>bool</code> Parses as boolean <code>list[T]</code> Parses as list of type T <code>dict[K, V]</code> Parses as dictionary <code>Pydantic Model</code> Validates and returns model instance <code>Optional[T]</code> Allows None values"},{"location":"en/api/agent/#error-handling","title":"Error Handling","text":""},{"location":"en/api/agent/#llm-api-errors","title":"LLM API Errors","text":"<pre><code>from litellm import APIError\n\n@agent\nasync def my_agent(query: str) -&gt; str:\n    '''Process: {{ query }}'''\n    pass\n\ntry:\n    result = await my_agent(\"test\")\nexcept APIError as e:\n    print(f\"LLM API error: {e}\")\n</code></pre>"},{"location":"en/api/agent/#parsing-errors","title":"Parsing Errors","text":"<pre><code>from pydantic import ValidationError\n\n@agent\nasync def extract_data(text: str) -&gt; Person:\n    '''Extract person from: {{ text }}'''\n    pass\n\ntry:\n    result = await extract_data(\"invalid text\")\nexcept ValidationError as e:\n    print(f\"Failed to parse response: {e}\")\n</code></pre>"},{"location":"en/api/agent/#advanced-features","title":"Advanced Features","text":""},{"location":"en/api/agent/#accessing-agent-metadata","title":"Accessing Agent Metadata","text":"<pre><code>@agent(model=\"gpt-4o\", temperature=0.5)\nasync def my_agent(query: str) -&gt; str:\n    '''Answer: {{ query }}'''\n    pass\n\n# Check if function is an agent\nprint(hasattr(my_agent, '_is_agent'))  # True\n\n# Access configuration\nprint(my_agent._model)  # \"gpt-4o\"\n</code></pre>"},{"location":"en/api/agent/#agent-composition","title":"Agent Composition","text":"<p>Agents can call other agents:</p> <pre><code>@agent\nasync def extract_topic(text: str) -&gt; str:\n    '''Extract the main topic from: {{ text }}'''\n    pass\n\n@agent\nasync def elaborate(topic: str) -&gt; str:\n    '''Elaborate on: {{ topic }}'''\n    pass\n\n# Compose agents\ntext = \"Quantum computing is revolutionary\"\ntopic = await extract_topic(text)\nelaboration = await elaborate(topic)\n</code></pre>"},{"location":"en/api/agent/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Clear Docstrings: Write explicit instructions in the docstring    <pre><code># Good\n'''Extract the person's name, age, and occupation from: {{ text }}'''\n\n# Less clear\n'''Process {{ text }}'''\n</code></pre></p> </li> <li> <p>Appropriate Return Types: Use the most specific type possible    <pre><code># Good\nasync def extract_person(text: str) -&gt; Person:\n\n# Less good\nasync def extract_person(text: str) -&gt; dict:\n</code></pre></p> </li> <li> <p>Temperature Selection:</p> </li> <li>Use low temperature (0.0-0.3) for factual, deterministic tasks</li> <li>Use medium temperature (0.7-1.0) for balanced responses</li> <li> <p>Use high temperature (1.0-2.0) for creative tasks</p> </li> <li> <p>Model Selection:</p> </li> <li>Use <code>gpt-4o-mini</code> for simple tasks (faster, cheaper)</li> <li>Use <code>gpt-4o</code> or <code>claude-3-5-sonnet</code> for complex reasoning</li> <li>Use <code>claude-3-haiku</code> for fast, cost-effective responses</li> </ol>"},{"location":"en/api/agent/#related","title":"Related","text":"<ul> <li>Template Engine - Jinja2 templating details</li> <li>Type Parser - Response parsing details</li> <li>Quick Start - Getting started guide</li> </ul>"},{"location":"en/api/cli/","title":"CLI Commands","text":"<p>Kagura AI 2.0 provides a command-line interface for version checking, running agents, and interactive development.</p>"},{"location":"en/api/cli/#overview","title":"Overview","text":"<p>The CLI is built with Click and provides: - Version information - Interactive REPL for rapid prototyping - Agent file execution (future)</p>"},{"location":"en/api/cli/#installation","title":"Installation","text":"<p>The CLI is automatically installed with Kagura AI:</p> <pre><code>pip install kagura-ai\n</code></pre> <p>Verify installation:</p> <pre><code>kagura --version\n</code></pre>"},{"location":"en/api/cli/#commands","title":"Commands","text":""},{"location":"en/api/cli/#kagura","title":"kagura","text":"<p>Main command group.</p> <pre><code>kagura [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options: - <code>--help</code>: Show help message - <code>--version</code>: Show version information</p>"},{"location":"en/api/cli/#kagura-version","title":"kagura version","text":"<p>Display Kagura AI version information.</p> <pre><code>kagura version\n</code></pre> <p>Output: <pre><code>Kagura AI v2.0.0-alpha.1\n</code></pre></p>"},{"location":"en/api/cli/#kagura-repl","title":"kagura repl","text":"<p>Start an interactive REPL (Read-Eval-Print Loop) for rapid agent prototyping.</p> <pre><code>kagura repl [OPTIONS]\n</code></pre> <p>Options: - <code>--model TEXT</code>: Default LLM model to use (default: <code>gpt-4o-mini</code>) - <code>--temperature FLOAT</code>: Default temperature (default: <code>0.7</code>) - <code>--help</code>: Show help message</p> <p>Example: <pre><code># Start REPL with default settings\nkagura repl\n\n# Start with custom model\nkagura repl --model gpt-4o\n\n# Start with higher temperature\nkagura repl --temperature 1.0\n</code></pre></p>"},{"location":"en/api/cli/#interactive-repl","title":"Interactive REPL","text":"<p>The REPL provides an interactive Python environment optimized for AI agent development.</p>"},{"location":"en/api/cli/#starting-the-repl","title":"Starting the REPL","text":"<pre><code>kagura repl\n</code></pre> <p>Welcome screen: <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Kagura AI REPL                       \u2502\n\u2502 Python-First AI Agent Framework      \u2502\n\u2502                                      \u2502\n\u2502 Type /help for commands, /exit to    \u2502\n\u2502 quit                                 \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n&gt;&gt;&gt;\n</code></pre></p>"},{"location":"en/api/cli/#repl-commands","title":"REPL Commands","text":"<p>Commands start with <code>/</code> and provide special functionality:</p>"},{"location":"en/api/cli/#help","title":"/help","text":"<p>Show available commands and usage information.</p> <pre><code>&gt;&gt;&gt; /help\n</code></pre> <p>Output: <pre><code>Available Commands:\n  /help      - Show this help message\n  /agents    - List all defined agents\n  /exit      - Exit REPL\n  /clear     - Clear screen\n  /model     - Show or set default model\n  /temp      - Show or set default temperature\n</code></pre></p>"},{"location":"en/api/cli/#agents","title":"/agents","text":"<p>List all agents defined in the current session.</p> <pre><code>&gt;&gt;&gt; /agents\n</code></pre> <p>Output: <pre><code>Defined Agents:\n  hello(name: str) -&gt; str\n  translate(text: str, lang: str) -&gt; str\n  extract_person(text: str) -&gt; Person\n</code></pre></p>"},{"location":"en/api/cli/#exit","title":"/exit","text":"<p>Exit the REPL.</p> <pre><code>&gt;&gt;&gt; /exit\n</code></pre> <p>Output: <pre><code>Goodbye!\n</code></pre></p>"},{"location":"en/api/cli/#clear","title":"/clear","text":"<p>Clear the terminal screen.</p> <pre><code>&gt;&gt;&gt; /clear\n</code></pre>"},{"location":"en/api/cli/#model","title":"/model","text":"<p>Show or set the default model for new agents.</p> <pre><code>&gt;&gt;&gt; /model\nCurrent model: gpt-4o-mini\n\n&gt;&gt;&gt; /model gpt-4o\nModel changed to: gpt-4o\n</code></pre>"},{"location":"en/api/cli/#temp","title":"/temp","text":"<p>Show or set the default temperature.</p> <pre><code>&gt;&gt;&gt; /temp\nCurrent temperature: 0.7\n\n&gt;&gt;&gt; /temp 1.0\nTemperature changed to: 1.0\n</code></pre>"},{"location":"en/api/cli/#defining-agents-in-repl","title":"Defining Agents in REPL","text":"<p>Use Python syntax to define agents:</p> <pre><code>&gt;&gt;&gt; from kagura import agent\n&gt;&gt;&gt;\n&gt;&gt;&gt; @agent\n... async def hello(name: str) -&gt; str:\n...     '''Say hello to {{ name }}'''\n...     pass\n...\nAgent 'hello' defined\n\n&gt;&gt;&gt; await hello(\"World\")\nHello, World! How can I help you today?\n</code></pre>"},{"location":"en/api/cli/#multi-line-input","title":"Multi-line Input","text":"<p>The REPL supports multi-line input for complex definitions:</p> <pre><code>&gt;&gt;&gt; from pydantic import BaseModel\n&gt;&gt;&gt;\n&gt;&gt;&gt; class Person(BaseModel):\n...     name: str\n...     age: int\n...\n&gt;&gt;&gt;\n&gt;&gt;&gt; @agent\n... async def extract_person(text: str) -&gt; Person:\n...     '''Extract person info from: {{ text }}'''\n...     pass\n...\nAgent 'extract_person' defined\n\n&gt;&gt;&gt; result = await extract_person(\"Alice is 30 years old\")\n&gt;&gt;&gt; result.name\nAlice\n&gt;&gt;&gt; result.age\n30\n</code></pre>"},{"location":"en/api/cli/#importing-modules","title":"Importing Modules","text":"<p>Import any Python module as usual:</p> <pre><code>&gt;&gt;&gt; from kagura import agent\n&gt;&gt;&gt; from pydantic import BaseModel\n&gt;&gt;&gt; from typing import List\n&gt;&gt;&gt; import json\n</code></pre>"},{"location":"en/api/cli/#executing-code","title":"Executing Code","text":"<p>Execute arbitrary Python code:</p> <pre><code>&gt;&gt;&gt; x = 10\n&gt;&gt;&gt; y = 20\n&gt;&gt;&gt; x + y\n30\n\n&gt;&gt;&gt; [i**2 for i in range(5)]\n[0, 1, 4, 9, 16]\n</code></pre>"},{"location":"en/api/cli/#using-code-execution","title":"Using Code Execution","text":"<pre><code>&gt;&gt;&gt; from kagura.agents import execute_code\n&gt;&gt;&gt;\n&gt;&gt;&gt; result = await execute_code(\"Calculate fibonacci(10)\")\n&gt;&gt;&gt; result[\"result\"]\n55\n</code></pre>"},{"location":"en/api/cli/#repl-features","title":"REPL Features","text":""},{"location":"en/api/cli/#syntax-highlighting","title":"Syntax Highlighting","text":"<p>Code is syntax-highlighted using Pygments for better readability.</p>"},{"location":"en/api/cli/#command-history","title":"Command History","text":"<p>Use arrow keys to navigate command history: - \u2191 (Up): Previous command - \u2193 (Down): Next command</p>"},{"location":"en/api/cli/#auto-completion","title":"Auto-completion","text":"<p>Tab completion for: - Python keywords - Variable names - Function names - Module names</p>"},{"location":"en/api/cli/#error-handling","title":"Error Handling","text":"<p>Errors are displayed with helpful messages:</p> <pre><code>&gt;&gt;&gt; await hello()\nError: hello() missing 1 required positional argument: 'name'\n\n&gt;&gt;&gt; result = await extract_person(\"invalid\")\nError: Validation error - could not parse response\n</code></pre>"},{"location":"en/api/cli/#examples","title":"Examples","text":""},{"location":"en/api/cli/#example-1-simple-agent","title":"Example 1: Simple Agent","text":"<pre><code>$ kagura repl\n&gt;&gt;&gt; from kagura import agent\n&gt;&gt;&gt;\n&gt;&gt;&gt; @agent\n... async def sentiment(text: str) -&gt; str:\n...     '''Analyze sentiment of: {{ text }}'''\n...     pass\n...\n&gt;&gt;&gt; await sentiment(\"I love this product!\")\nThe sentiment is overwhelmingly positive...\n</code></pre>"},{"location":"en/api/cli/#example-2-data-extraction","title":"Example 2: Data Extraction","text":"<pre><code>$ kagura repl\n&gt;&gt;&gt; from kagura import agent\n&gt;&gt;&gt; from pydantic import BaseModel\n&gt;&gt;&gt; from typing import List\n&gt;&gt;&gt;\n&gt;&gt;&gt; class Task(BaseModel):\n...     title: str\n...     priority: int\n...\n&gt;&gt;&gt; @agent\n... async def extract_tasks(text: str) -&gt; List[Task]:\n...     '''Extract tasks from: {{ text }}'''\n...     pass\n...\n&gt;&gt;&gt; tasks = await extract_tasks(\"1. Fix bug (high), 2. Write docs (low)\")\n&gt;&gt;&gt; for task in tasks:\n...     print(f\"{task.title}: Priority {task.priority}\")\n...\nFix bug: Priority 3\nWrite docs: Priority 1\n</code></pre>"},{"location":"en/api/cli/#example-3-code-generation","title":"Example 3: Code Generation","text":"<pre><code>$ kagura repl --model gpt-4o\n&gt;&gt;&gt; from kagura.agents import execute_code\n&gt;&gt;&gt;\n&gt;&gt;&gt; result = await execute_code(\"Calculate prime numbers up to 20\")\n&gt;&gt;&gt; result[\"result\"]\n[2, 3, 5, 7, 11, 13, 17, 19]\n</code></pre>"},{"location":"en/api/cli/#example-4-agent-composition","title":"Example 4: Agent Composition","text":"<pre><code>$ kagura repl\n&gt;&gt;&gt; from kagura import agent\n&gt;&gt;&gt;\n&gt;&gt;&gt; @agent\n... async def summarize(text: str) -&gt; str:\n...     '''Summarize in one sentence: {{ text }}'''\n...     pass\n...\n&gt;&gt;&gt; @agent\n... async def translate(text: str, lang: str) -&gt; str:\n...     '''Translate to {{ lang }}: {{ text }}'''\n...     pass\n...\n&gt;&gt;&gt; text = \"Long article text here...\"\n&gt;&gt;&gt; summary = await summarize(text)\n&gt;&gt;&gt; japanese = await translate(summary, \"Japanese\")\n&gt;&gt;&gt; print(japanese)\n</code></pre>"},{"location":"en/api/cli/#configuration","title":"Configuration","text":""},{"location":"en/api/cli/#environment-variables","title":"Environment Variables","text":"<ul> <li><code>OPENAI_API_KEY</code>: OpenAI API key</li> <li><code>ANTHROPIC_API_KEY</code>: Anthropic API key</li> <li><code>GOOGLE_API_KEY</code>: Google API key</li> </ul> <p>Set before starting REPL:</p> <pre><code>export OPENAI_API_KEY=\"your-key-here\"\nkagura repl\n</code></pre>"},{"location":"en/api/cli/#model-selection","title":"Model Selection","text":"<p>Use different models for different tasks:</p> <pre><code># Fast, cheap model for simple tasks\nkagura repl --model gpt-4o-mini\n\n# Powerful model for complex reasoning\nkagura repl --model gpt-4o\n\n# Claude for long context\nkagura repl --model claude-3-5-sonnet-20241022\n\n# Local model with Ollama\nkagura repl --model ollama/llama3.2\n</code></pre>"},{"location":"en/api/cli/#tips-and-tricks","title":"Tips and Tricks","text":""},{"location":"en/api/cli/#1-quick-testing","title":"1. Quick Testing","text":"<p>Use REPL for quick agent testing:</p> <pre><code>&gt;&gt;&gt; @agent\n... async def test(x: str) -&gt; str:\n...     '''{{ x }}'''\n...     pass\n...\n&gt;&gt;&gt; await test(\"Is this working?\")\n</code></pre>"},{"location":"en/api/cli/#2-iterative-development","title":"2. Iterative Development","text":"<p>Refine prompts interactively:</p> <pre><code>&gt;&gt;&gt; @agent\n... async def v1(text: str) -&gt; str:\n...     '''Summarize: {{ text }}'''\n...     pass\n...\n&gt;&gt;&gt; @agent\n... async def v2(text: str) -&gt; str:\n...     '''Summarize in technical terms: {{ text }}'''\n...     pass\n...\n&gt;&gt;&gt; await v1(text)  # Try first version\n&gt;&gt;&gt; await v2(text)  # Try improved version\n</code></pre>"},{"location":"en/api/cli/#3-debugging","title":"3. Debugging","text":"<p>Print intermediate results:</p> <pre><code>&gt;&gt;&gt; result = await my_agent(\"test\")\n&gt;&gt;&gt; print(result)\n&gt;&gt;&gt; print(type(result))\n&gt;&gt;&gt; print(result.model_dump())  # For Pydantic models\n</code></pre>"},{"location":"en/api/cli/#4-saving-work","title":"4. Saving Work","text":"<p>Copy working code from REPL to a <code>.py</code> file:</p> <pre><code># In REPL - test and refine\n&gt;&gt;&gt; @agent\n... async def my_agent(x: str) -&gt; str:\n...     '''Process {{ x }}'''\n...     pass\n\n# Then save to agent.py:\n# from kagura import agent\n#\n# @agent\n# async def my_agent(x: str) -&gt; str:\n#     '''Process {{ x }}'''\n#     pass\n</code></pre>"},{"location":"en/api/cli/#troubleshooting","title":"Troubleshooting","text":""},{"location":"en/api/cli/#repl-wont-start","title":"REPL Won't Start","text":"<pre><code>$ kagura repl\nError: 'kagura' command not found\n</code></pre> <p>Solution: Ensure Kagura AI is installed and in your PATH: <pre><code>pip install kagura-ai\nwhich kagura  # Should show path to kagura command\n</code></pre></p>"},{"location":"en/api/cli/#import-errors","title":"Import Errors","text":"<pre><code>&gt;&gt;&gt; from kagura import agent\nModuleNotFoundError: No module named 'kagura'\n</code></pre> <p>Solution: Check your Python environment: <pre><code>python --version  # Should be 3.11+\npip list | grep kagura\n</code></pre></p>"},{"location":"en/api/cli/#api-key-errors","title":"API Key Errors","text":"<pre><code>&gt;&gt;&gt; await hello(\"test\")\nAuthenticationError: API key not found\n</code></pre> <p>Solution: Set your API key: <pre><code>export OPENAI_API_KEY=\"your-key-here\"\n</code></pre></p>"},{"location":"en/api/cli/#memory-issues","title":"Memory Issues","text":"<p>If REPL becomes slow or unresponsive:</p> <ol> <li>Exit and restart: <code>/exit</code></li> <li>Clear variables: <code>del large_variable</code></li> <li>Use <code>/clear</code> to clear screen</li> </ol>"},{"location":"en/api/cli/#related","title":"Related","text":"<ul> <li>@agent Decorator - Creating agents</li> <li>Quick Start - Getting started</li> <li>REPL Tutorial - Detailed REPL guide</li> </ul>"},{"location":"en/api/executor/","title":"Code Executor","text":"<p>The Code Executor provides safe Python code generation and execution capabilities in Kagura AI 2.0.</p>"},{"location":"en/api/executor/#overview","title":"Overview","text":"<p>The code execution system consists of: 1. CodeExecutor: Low-level code execution with security constraints 2. execute_code(): High-level agent that generates and executes code from natural language</p>"},{"location":"en/api/executor/#execute_code-function","title":"execute_code() Function","text":"<p>The simplest way to use code execution is through the <code>execute_code()</code> convenience function.</p>"},{"location":"en/api/executor/#signature","title":"Signature","text":"<pre><code>async def execute_code(task: str, *, model: str = \"gpt-4o-mini\") -&gt; dict\n</code></pre>"},{"location":"en/api/executor/#parameters","title":"Parameters","text":"<ul> <li>task (<code>str</code>): Natural language description of what to calculate or compute</li> <li>model (<code>str</code>, optional): LLM model to use for code generation</li> </ul>"},{"location":"en/api/executor/#return-value","title":"Return Value","text":"<p>Returns a dictionary with the following keys:</p> <pre><code>{\n    \"success\": bool,          # True if execution succeeded\n    \"code\": str,              # Generated Python code\n    \"result\": Any,            # Value of the 'result' variable\n    \"error\": str | None,      # Error message if failed\n}\n</code></pre>"},{"location":"en/api/executor/#examples","title":"Examples","text":""},{"location":"en/api/executor/#basic-calculation","title":"Basic Calculation","text":"<pre><code>from kagura.agents import execute_code\n\nresult = await execute_code(\"Calculate the factorial of 10\")\n\nif result[\"success\"]:\n    print(f\"Code:\\n{result['code']}\\n\")\n    print(f\"Result: {result['result']}\")\n    # Code:\n    # import math\n    # result = math.factorial(10)\n    #\n    # Result: 3628800\nelse:\n    print(f\"Error: {result['error']}\")\n</code></pre>"},{"location":"en/api/executor/#string-processing","title":"String Processing","text":"<pre><code>result = await execute_code(\"Reverse the string 'Hello, World!' and make it uppercase\")\n\nif result[\"success\"]:\n    print(result['result'])  # \"!DLROW ,OLLEH\"\n</code></pre>"},{"location":"en/api/executor/#list-operations","title":"List Operations","text":"<pre><code>result = await execute_code(\"Create a list of squares of numbers from 1 to 10\")\n\nif result[\"success\"]:\n    print(result['result'])  # [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n</code></pre>"},{"location":"en/api/executor/#statistical-analysis","title":"Statistical Analysis","text":"<pre><code>result = await execute_code(\n    \"Calculate the mean and standard deviation of [10, 20, 30, 40, 50]\"\n)\n\nif result[\"success\"]:\n    print(result['result'])\n    # {'mean': 30.0, 'stdev': 15.811388300841896}\n</code></pre>"},{"location":"en/api/executor/#error-handling","title":"Error Handling","text":"<pre><code>result = await execute_code(\"Divide 100 by 0\")\n\nif not result[\"success\"]:\n    print(f\"Error: {result['error']}\")\n    # Error: division by zero\n</code></pre>"},{"location":"en/api/executor/#codeexecutor-class","title":"CodeExecutor Class","text":"<p>For more control, use the <code>CodeExecutor</code> class directly.</p>"},{"location":"en/api/executor/#signature_1","title":"Signature","text":"<pre><code>class CodeExecutor:\n    def __init__(\n        self,\n        timeout: float = 30.0,\n        max_memory: int = 512 * 1024 * 1024,  # 512MB\n        allowed_imports: set[str] | None = None\n    )\n</code></pre>"},{"location":"en/api/executor/#parameters_1","title":"Parameters","text":"<ul> <li>timeout (<code>float</code>, default: <code>30.0</code>): Maximum execution time in seconds</li> <li>max_memory (<code>int</code>, default: <code>512MB</code>): Maximum memory usage in bytes</li> <li>allowed_imports (<code>set[str] | None</code>): Set of allowed import modules. If <code>None</code>, uses default safe list.</li> </ul>"},{"location":"en/api/executor/#methods","title":"Methods","text":""},{"location":"en/api/executor/#execute","title":"execute()","text":"<pre><code>async def execute(self, code: str) -&gt; ExecutionResult\n</code></pre> <p>Executes Python code and returns the result.</p> <p>Parameters: - code (<code>str</code>): Python code to execute. Must set a variable named <code>result</code>.</p> <p>Returns: - <code>ExecutionResult</code> object with fields:   - <code>success</code> (<code>bool</code>): Whether execution succeeded   - <code>result</code> (<code>Any</code>): Value of the <code>result</code> variable   - <code>error</code> (<code>str | None</code>): Error message if failed   - <code>stdout</code> (<code>str</code>): Captured stdout output   - <code>stderr</code> (<code>str</code>): Captured stderr output</p>"},{"location":"en/api/executor/#examples_1","title":"Examples","text":""},{"location":"en/api/executor/#basic-usage","title":"Basic Usage","text":"<pre><code>from kagura.core.executor import CodeExecutor\n\nexecutor = CodeExecutor()\n\nresult = await executor.execute(\"\"\"\nimport math\nresult = math.sqrt(16)\n\"\"\")\n\nprint(result.success)  # True\nprint(result.result)   # 4.0\n</code></pre>"},{"location":"en/api/executor/#custom-timeout","title":"Custom Timeout","text":"<pre><code>executor = CodeExecutor(timeout=60.0)\n\nresult = await executor.execute(\"\"\"\nimport time\ntime.sleep(2)\nresult = \"completed\"\n\"\"\")\n</code></pre>"},{"location":"en/api/executor/#capturing-output","title":"Capturing Output","text":"<pre><code>result = await executor.execute(\"\"\"\nprint(\"Debug message\")\nresult = 42\n\"\"\")\n\nprint(result.stdout)  # \"Debug message\\n\"\nprint(result.result)  # 42\n</code></pre>"},{"location":"en/api/executor/#security-features","title":"Security Features","text":"<p>The Code Executor has built-in security constraints to prevent malicious code execution.</p>"},{"location":"en/api/executor/#forbidden-imports","title":"Forbidden Imports","text":"<p>The following modules are blocked by default:</p> <ul> <li>System Access: <code>os</code>, <code>sys</code>, <code>subprocess</code>, <code>shutil</code></li> <li>File I/O: <code>open</code> (built-in), <code>io</code> (restricted)</li> <li>Network: <code>socket</code>, <code>urllib</code>, <code>requests</code>, <code>http</code></li> <li>Process Control: <code>multiprocessing</code>, <code>threading</code> (restricted)</li> <li>Code Execution: <code>eval</code>, <code>exec</code>, <code>compile</code> (built-in)</li> <li>Dangerous Modules: <code>pickle</code>, <code>ctypes</code>, <code>importlib</code></li> </ul>"},{"location":"en/api/executor/#allowed-imports","title":"Allowed Imports","text":"<p>Safe modules that are allowed by default:</p> <pre><code>ALLOWED_IMPORTS = {\n    \"math\",\n    \"statistics\",\n    \"random\",\n    \"datetime\",\n    \"json\",\n    \"re\",\n    \"collections\",\n    \"itertools\",\n    \"functools\",\n    \"typing\",\n}\n</code></pre>"},{"location":"en/api/executor/#ast-validation","title":"AST Validation","text":"<p>Before execution, code is analyzed using Python's Abstract Syntax Tree (AST) to detect:</p> <ul> <li>Forbidden function calls (<code>eval</code>, <code>exec</code>, <code>open</code>, etc.)</li> <li>Forbidden imports</li> <li>Dangerous operations</li> </ul> <p>Example validation error:</p> <pre><code>result = await executor.execute(\"\"\"\nimport os\nresult = os.system('ls')\n\"\"\")\n\nprint(result.error)\n# \"Forbidden import: os\"\n</code></pre>"},{"location":"en/api/executor/#resource-limits","title":"Resource Limits","text":"<ul> <li>Timeout: Code execution is terminated after the timeout period</li> <li>Memory: Process memory is monitored (platform-dependent)</li> <li>CPU: No infinite loops allowed (enforced via timeout)</li> </ul>"},{"location":"en/api/executor/#advanced-usage","title":"Advanced Usage","text":""},{"location":"en/api/executor/#custom-allowed-imports","title":"Custom Allowed Imports","text":"<pre><code>executor = CodeExecutor(\n    allowed_imports={\"math\", \"numpy\", \"pandas\"}\n)\n\nresult = await executor.execute(\"\"\"\nimport numpy as np\nresult = np.array([1, 2, 3]).mean()\n\"\"\")\n</code></pre>"},{"location":"en/api/executor/#error-recovery","title":"Error Recovery","text":"<pre><code>executor = CodeExecutor()\n\ncode = \"\"\"\nimport math\nresult = math.factorial(10)\n\"\"\"\n\ntry:\n    result = await executor.execute(code)\n    if result.success:\n        print(f\"Success: {result.result}\")\n    else:\n        print(f\"Execution error: {result.error}\")\nexcept TimeoutError:\n    print(\"Code execution timed out\")\nexcept Exception as e:\n    print(f\"Unexpected error: {e}\")\n</code></pre>"},{"location":"en/api/executor/#combining-with-agents","title":"Combining with Agents","text":"<pre><code>from kagura import agent\nfrom kagura.core.executor import CodeExecutor\n\nexecutor = CodeExecutor()\n\n@agent\nasync def generate_code(task: str) -&gt; str:\n    '''Generate Python code to: {{ task }}\n\n    Return only the code, nothing else.\n    '''\n    pass\n\nasync def run_task(task: str):\n    # Generate code\n    code = await generate_code(task)\n\n    # Execute code\n    result = await executor.execute(code)\n\n    return result\n\n# Use it\nresult = await run_task(\"Calculate fibonacci(15)\")\nprint(result.result)\n</code></pre>"},{"location":"en/api/executor/#best-practices","title":"Best Practices","text":""},{"location":"en/api/executor/#1-always-check-success","title":"1. Always Check Success","text":"<pre><code>result = await execute_code(\"some task\")\n\nif result[\"success\"]:\n    # Use result[\"result\"]\n    process(result[\"result\"])\nelse:\n    # Handle error\n    log_error(result[\"error\"])\n</code></pre>"},{"location":"en/api/executor/#2-set-appropriate-timeouts","title":"2. Set Appropriate Timeouts","text":"<pre><code># Short tasks\nexecutor = CodeExecutor(timeout=5.0)\n\n# Long computations\nexecutor = CodeExecutor(timeout=300.0)\n</code></pre>"},{"location":"en/api/executor/#3-use-result-variable","title":"3. Use result Variable","text":"<p>The executor looks for a variable named <code>result</code>:</p> <pre><code># Good\nresult = await executor.execute(\"\"\"\nx = 10\ny = 20\nresult = x + y\n\"\"\")\n\n# Won't work - no 'result' variable\nresult = await executor.execute(\"\"\"\nx = 10\ny = 20\nprint(x + y)\n\"\"\")\n</code></pre>"},{"location":"en/api/executor/#4-handle-errors-gracefully","title":"4. Handle Errors Gracefully","text":"<pre><code>result = await execute_code(task)\n\nif not result[\"success\"]:\n    # Retry with more explicit instructions\n    task = f\"{task}. Show step by step.\"\n    result = await execute_code(task)\n</code></pre>"},{"location":"en/api/executor/#limitations","title":"Limitations","text":"<ol> <li>No File I/O: Cannot read or write files</li> <li>No Network Access: Cannot make HTTP requests</li> <li>No System Commands: Cannot execute shell commands</li> <li>Limited Libraries: Only safe, pre-approved libraries</li> <li>Memory Constraints: Large data structures may fail</li> <li>Execution Time: Long-running code will timeout</li> </ol>"},{"location":"en/api/executor/#security-considerations","title":"Security Considerations","text":"<p>\u26a0\ufe0f Important: While the Code Executor has security constraints, it should still be used with caution:</p> <ol> <li>User Input: Be careful with untrusted user input</li> <li>Production Use: Consider additional sandboxing for production</li> <li>Resource Limits: Set appropriate timeouts and memory limits</li> <li>Monitoring: Log all code execution for auditing</li> </ol>"},{"location":"en/api/executor/#related","title":"Related","text":"<ul> <li>@agent Decorator - Creating AI agents</li> <li>Code Generator Example - Full example</li> <li>Quick Start - Getting started</li> </ul>"},{"location":"en/tutorials/01-basic-agent/","title":"Tutorial 1: Creating Your First Agent","text":"<p>Learn how to create a basic AI agent using the <code>@agent</code> decorator.</p>"},{"location":"en/tutorials/01-basic-agent/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11 or higher</li> <li>Kagura AI installed (<code>pip install kagura-ai</code>)</li> <li>OpenAI API key (or other LLM provider)</li> </ul>"},{"location":"en/tutorials/01-basic-agent/#goal","title":"Goal","text":"<p>By the end of this tutorial, you will: - Understand the <code>@agent</code> decorator - Create a simple conversational agent - Run and test your agent - Understand how prompts work</p>"},{"location":"en/tutorials/01-basic-agent/#step-1-set-up-your-environment","title":"Step 1: Set Up Your Environment","text":"<p>First, set your API key:</p> <pre><code>export OPENAI_API_KEY=\"your-key-here\"\n</code></pre> <p>Create a new file called <code>hello_agent.py</code>:</p> <pre><code>touch hello_agent.py\n</code></pre>"},{"location":"en/tutorials/01-basic-agent/#step-2-import-kagura","title":"Step 2: Import Kagura","text":"<p>Open <code>hello_agent.py</code> and add the import:</p> <pre><code>import asyncio\nfrom kagura import agent\n</code></pre> <p>Explanation: - <code>asyncio</code>: Python's built-in library for async operations - <code>agent</code>: The core decorator from Kagura AI</p>"},{"location":"en/tutorials/01-basic-agent/#step-3-define-your-first-agent","title":"Step 3: Define Your First Agent","text":"<p>Add this agent definition:</p> <pre><code>@agent\nasync def hello(name: str) -&gt; str:\n    '''Say hello to {{ name }}'''\n    pass\n</code></pre> <p>Let's break this down:</p> <ol> <li><code>@agent</code> - The decorator that converts the function into an AI agent</li> <li><code>async def hello</code> - An async function (required for all agents)</li> <li><code>(name: str)</code> - Function parameter with type hint</li> <li><code>-&gt; str</code> - Return type annotation (tells parser to expect a string)</li> <li><code>'''Say hello to {{ name }}'''</code> - The prompt template using Jinja2 syntax</li> <li><code>pass</code> - Function body (ignored, as decorator replaces it)</li> </ol>"},{"location":"en/tutorials/01-basic-agent/#step-4-create-a-main-function","title":"Step 4: Create a Main Function","text":"<p>Add code to run the agent:</p> <pre><code>async def main():\n    # Call the agent\n    result = await hello(\"World\")\n    print(result)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"en/tutorials/01-basic-agent/#step-5-run-your-agent","title":"Step 5: Run Your Agent","text":"<p>Execute the script:</p> <pre><code>python hello_agent.py\n</code></pre> <p>Expected output: <pre><code>Hello, World! How can I assist you today?\n</code></pre></p> <p>\ud83c\udf89 Congratulations! You've created your first AI agent.</p>"},{"location":"en/tutorials/01-basic-agent/#complete-code","title":"Complete Code","text":"<p>Here's the full <code>hello_agent.py</code>:</p> <pre><code>import asyncio\nfrom kagura import agent\n\n\n@agent\nasync def hello(name: str) -&gt; str:\n    '''Say hello to {{ name }}'''\n    pass\n\n\nasync def main():\n    result = await hello(\"World\")\n    print(result)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"en/tutorials/01-basic-agent/#understanding-what-happened","title":"Understanding What Happened","text":"<p>Let's trace the execution:</p> <ol> <li>You call: <code>await hello(\"World\")</code></li> <li>Decorator extracts: Parameter <code>name = \"World\"</code></li> <li>Template renders: <code>\"Say hello to World\"</code></li> <li>LLM is called: With the rendered prompt</li> <li>Response is parsed: As a string (because <code>-&gt; str</code>)</li> <li>Result returned: <code>\"Hello, World! How can I assist you today?\"</code></li> </ol>"},{"location":"en/tutorials/01-basic-agent/#experiment-different-names","title":"Experiment: Different Names","text":"<p>Try calling with different names:</p> <pre><code>async def main():\n    print(await hello(\"Alice\"))\n    print(await hello(\"Bob\"))\n    print(await hello(\"\u795e\u697d\"))  # Japanese name\n</code></pre> <p>Output: <pre><code>Hello, Alice! How can I help you?\nHello, Bob! Nice to meet you!\n\u3053\u3093\u306b\u3061\u306f\u3001\u795e\u697d\u3055\u3093\uff01\u304a\u624b\u4f1d\u3044\u3067\u304d\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u3059\u304b\uff1f\n</code></pre></p> <p>Notice how the LLM adapts its response based on the input!</p>"},{"location":"en/tutorials/01-basic-agent/#experiment-multiple-parameters","title":"Experiment: Multiple Parameters","text":"<p>Let's create an agent with multiple parameters:</p> <pre><code>@agent\nasync def greet(name: str, time_of_day: str = \"morning\") -&gt; str:\n    '''Good {{ time_of_day }}, {{ name }}! How are you doing?'''\n    pass\n\n\nasync def main():\n    print(await greet(\"Alice\"))\n    print(await greet(\"Bob\", \"evening\"))\n</code></pre> <p>Output: <pre><code>Good morning, Alice! How are you doing?\nI hope you're doing well!\n\nGood evening, Bob! How are you doing?\nI hope you had a great day!\n</code></pre></p>"},{"location":"en/tutorials/01-basic-agent/#experiment-different-prompts","title":"Experiment: Different Prompts","text":"<p>The prompt greatly affects the response. Try these variations:</p>"},{"location":"en/tutorials/01-basic-agent/#formal-greeting","title":"Formal Greeting","text":"<pre><code>@agent\nasync def formal_greet(name: str) -&gt; str:\n    '''Provide a formal business greeting to {{ name }}, a potential client.'''\n    pass\n</code></pre>"},{"location":"en/tutorials/01-basic-agent/#casual-greeting","title":"Casual Greeting","text":"<pre><code>@agent\nasync def casual_greet(name: str) -&gt; str:\n    '''Give a super casual, friendly greeting to {{ name }}, your best friend.'''\n    pass\n</code></pre>"},{"location":"en/tutorials/01-basic-agent/#poetic-greeting","title":"Poetic Greeting","text":"<pre><code>@agent\nasync def poetic_greet(name: str) -&gt; str:\n    '''Write a short, poetic greeting to {{ name }} (2-3 lines).'''\n    pass\n</code></pre>"},{"location":"en/tutorials/01-basic-agent/#key-concepts-learned","title":"Key Concepts Learned","text":""},{"location":"en/tutorials/01-basic-agent/#1-the-agent-decorator","title":"1. The @agent Decorator","text":"<p>Converts a function into an AI agent: - Extracts function signature - Uses docstring as prompt template - Calls LLM automatically - Parses response based on return type</p>"},{"location":"en/tutorials/01-basic-agent/#2-asyncawait","title":"2. Async/Await","text":"<p>All agents are async functions: <pre><code>result = await hello(\"World\")  # \u2713 Correct\nresult = hello(\"World\")        # \u2717 Wrong - missing await\n</code></pre></p>"},{"location":"en/tutorials/01-basic-agent/#3-type-hints","title":"3. Type Hints","text":"<p>Type hints tell the parser how to handle the response: <pre><code>async def hello(name: str) -&gt; str:  # Returns string\n    pass\n</code></pre></p>"},{"location":"en/tutorials/01-basic-agent/#4-prompt-templates","title":"4. Prompt Templates","text":"<p>Docstrings use Jinja2 syntax for dynamic prompts: <pre><code>'''Say hello to {{ name }}'''  # {{ }} injects variables\n</code></pre></p>"},{"location":"en/tutorials/01-basic-agent/#common-mistakes","title":"Common Mistakes","text":""},{"location":"en/tutorials/01-basic-agent/#1-forgetting-asyncawait","title":"1. Forgetting <code>async</code>/<code>await</code>","text":"<pre><code># Wrong\n@agent\ndef hello(name: str) -&gt; str:  # Missing 'async'\n    pass\n\nresult = hello(\"World\")  # Missing 'await'\n\n# Correct\n@agent\nasync def hello(name: str) -&gt; str:\n    pass\n\nresult = await hello(\"World\")\n</code></pre>"},{"location":"en/tutorials/01-basic-agent/#2-missing-return-type","title":"2. Missing Return Type","text":"<pre><code># Less good\n@agent\nasync def hello(name: str):  # No return type\n    pass\n\n# Better\n@agent\nasync def hello(name: str) -&gt; str:  # Explicit return type\n    pass\n</code></pre>"},{"location":"en/tutorials/01-basic-agent/#3-empty-docstring","title":"3. Empty Docstring","text":"<pre><code># Won't work well\n@agent\nasync def hello(name: str) -&gt; str:\n    pass  # No docstring = no prompt!\n\n# Correct\n@agent\nasync def hello(name: str) -&gt; str:\n    '''Say hello to {{ name }}'''\n    pass\n</code></pre>"},{"location":"en/tutorials/01-basic-agent/#next-steps","title":"Next Steps","text":"<p>Now that you understand basic agents, you can:</p> <ol> <li>Learn about templates - Tutorial 2: Template Engine</li> <li>Explore type parsing - Tutorial 3: Type-Based Parsing</li> <li>Try the REPL - Run <code>kagura repl</code> for interactive testing</li> </ol>"},{"location":"en/tutorials/01-basic-agent/#practice-exercises","title":"Practice Exercises","text":""},{"location":"en/tutorials/01-basic-agent/#exercise-1-sentiment-analysis","title":"Exercise 1: Sentiment Analysis","text":"<p>Create an agent that analyzes sentiment:</p> <pre><code>@agent\nasync def analyze_sentiment(text: str) -&gt; str:\n    '''Analyze the sentiment (positive/negative/neutral) of: {{ text }}'''\n    pass\n</code></pre> <p>Test it: <pre><code>print(await analyze_sentiment(\"I love this product!\"))\nprint(await analyze_sentiment(\"This is terrible.\"))\nprint(await analyze_sentiment(\"It's okay.\"))\n</code></pre></p>"},{"location":"en/tutorials/01-basic-agent/#exercise-2-language-translation","title":"Exercise 2: Language Translation","text":"<p>Create a translation agent:</p> <pre><code>@agent\nasync def translate(text: str, target_language: str) -&gt; str:\n    '''Translate to {{ target_language }}: {{ text }}'''\n    pass\n</code></pre> <p>Test it: <pre><code>print(await translate(\"Hello, world!\", \"Japanese\"))\nprint(await translate(\"Hello, world!\", \"French\"))\n</code></pre></p>"},{"location":"en/tutorials/01-basic-agent/#exercise-3-question-answering","title":"Exercise 3: Question Answering","text":"<p>Create a Q&amp;A agent:</p> <pre><code>@agent\nasync def answer_question(question: str) -&gt; str:\n    '''Answer this question concisely: {{ question }}'''\n    pass\n</code></pre> <p>Test it: <pre><code>print(await answer_question(\"What is Python?\"))\nprint(await answer_question(\"How do I install Kagura AI?\"))\n</code></pre></p>"},{"location":"en/tutorials/01-basic-agent/#summary","title":"Summary","text":"<p>You learned: - \u2713 How to use the <code>@agent</code> decorator - \u2713 How to create async agent functions - \u2713 How to use type hints for return types - \u2713 How to write prompt templates with Jinja2 - \u2713 How to call and test agents</p> <p>Continue to Tutorial 2: Template Engine to learn more advanced prompting techniques!</p>"},{"location":"en/tutorials/02-templates/","title":"Tutorial 02: Template Engine","text":"<p>Learn how to use Jinja2 templates in your AI agents to create dynamic prompts.</p>"},{"location":"en/tutorials/02-templates/#what-youll-learn","title":"What You'll Learn","text":"<ul> <li>How to use Jinja2 template syntax in agent docstrings</li> <li>Template variables and expressions</li> <li>Advanced template features (loops, conditionals)</li> <li>Best practices for prompt engineering</li> </ul>"},{"location":"en/tutorials/02-templates/#prerequisites","title":"Prerequisites","text":"<ul> <li>Completed Tutorial 01: Your First Agent</li> <li>Basic understanding of Python f-strings</li> </ul>"},{"location":"en/tutorials/02-templates/#template-basics","title":"Template Basics","text":"<p>Kagura uses Jinja2 template syntax in agent docstrings. Templates are rendered before being sent to the LLM.</p>"},{"location":"en/tutorials/02-templates/#simple-variables","title":"Simple Variables","text":"<pre><code>from kagura import agent\n\n@agent\nasync def greet(name: str) -&gt; str:\n    \"\"\"Say hello to {{ name }}\"\"\"\n    pass\n\n# Template renders to: \"Say hello to Alice\"\nresult = await greet(\"Alice\")\n</code></pre> <p>Key Points: - Use <code>{{ variable }}</code> to insert values - Variable names must match function parameters - Values are automatically escaped</p>"},{"location":"en/tutorials/02-templates/#multiple-variables","title":"Multiple Variables","text":"<pre><code>@agent\nasync def introduce(name: str, age: int, occupation: str) -&gt; str:\n    \"\"\"\n    Introduce yourself as {{ name }}, a {{ age }}-year-old {{ occupation }}.\n    Be friendly and professional.\n    \"\"\"\n    pass\n\nresult = await introduce(\"Bob\", 30, \"engineer\")\n# Template renders to: \"Introduce yourself as Bob, a 30-year-old engineer...\"\n</code></pre>"},{"location":"en/tutorials/02-templates/#template-expressions","title":"Template Expressions","text":"<p>Jinja2 supports Python-like expressions:</p> <pre><code>@agent\nasync def analyze(score: int) -&gt; str:\n    \"\"\"\n    The score is {{ score }}.\n    {% if score &gt;= 80 %}\n    This is excellent performance!\n    {% elif score &gt;= 60 %}\n    This is good performance.\n    {% else %}\n    This needs improvement.\n    {% endif %}\n    \"\"\"\n    pass\n</code></pre> <p>Expressions You Can Use: - Arithmetic: <code>{{ price * 1.1 }}</code> - Comparison: <code>{% if age &gt; 18 %}</code> - String methods: <code>{{ name.upper() }}</code> - List access: <code>{{ items[0] }}</code></p>"},{"location":"en/tutorials/02-templates/#loops","title":"Loops","text":"<p>Process lists and dictionaries in templates:</p> <pre><code>from typing import List\n\n@agent\nasync def summarize_items(items: List[str]) -&gt; str:\n    \"\"\"\n    Summarize the following items:\n    {% for item in items %}\n    - {{ item }}\n    {% endfor %}\n\n    Provide a brief overview.\n    \"\"\"\n    pass\n\nresult = await summarize_items([\"apples\", \"oranges\", \"bananas\"])\n</code></pre> <p>Loop Features: - <code>{% for item in list %}</code>: Iterate over lists - <code>{{ loop.index }}</code>: Current iteration (1-based) - <code>{{ loop.first }}</code>: True on first iteration - <code>{{ loop.last }}</code>: True on last iteration</p>"},{"location":"en/tutorials/02-templates/#filters","title":"Filters","text":"<p>Transform values with filters:</p> <pre><code>@agent\nasync def format_text(text: str) -&gt; str:\n    \"\"\"\n    Original: {{ text }}\n    Uppercase: {{ text | upper }}\n    Capitalized: {{ text | capitalize }}\n    First 50 chars: {{ text[:50] }}\n    \"\"\"\n    pass\n</code></pre> <p>Common Filters: - <code>upper</code>, <code>lower</code>, <code>capitalize</code>: Text transformation - <code>length</code>: Get length of string/list - <code>default(value)</code>: Default value if undefined - <code>join(separator)</code>: Join list items</p>"},{"location":"en/tutorials/02-templates/#complex-data-structures","title":"Complex Data Structures","text":"<p>Work with dictionaries and objects:</p> <pre><code>from pydantic import BaseModel\nfrom typing import Dict\n\nclass User(BaseModel):\n    name: str\n    email: str\n    age: int\n\n@agent\nasync def analyze_user(user: User) -&gt; str:\n    \"\"\"\n    Analyze user profile:\n    - Name: {{ user.name }}\n    - Email: {{ user.email }}\n    - Age: {{ user.age }}\n\n    Provide insights about this user.\n    \"\"\"\n    pass\n\nuser = User(name=\"Alice\", email=\"alice@example.com\", age=25)\nresult = await analyze_user(user)\n</code></pre> <p>Accessing Data: - Dictionary: <code>{{ data['key'] }}</code> or <code>{{ data.key }}</code> - Object attributes: <code>{{ obj.attribute }}</code> - Nested: <code>{{ user.address.city }}</code></p>"},{"location":"en/tutorials/02-templates/#multiline-templates","title":"Multiline Templates","text":"<p>For complex prompts, use multiline docstrings:</p> <pre><code>@agent\nasync def write_email(\n    recipient: str,\n    subject: str,\n    points: List[str],\n    tone: str = \"professional\"\n) -&gt; str:\n    \"\"\"\n    Write an email with the following specifications:\n\n    To: {{ recipient }}\n    Subject: {{ subject }}\n    Tone: {{ tone }}\n\n    Key points to cover:\n    {% for point in points %}\n    {{ loop.index }}. {{ point }}\n    {% endfor %}\n\n    Make it {{ tone }} and concise.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"en/tutorials/02-templates/#best-practices","title":"Best Practices","text":""},{"location":"en/tutorials/02-templates/#1-clear-instructions","title":"1. Clear Instructions","text":"<pre><code># \u2705 Good: Clear instructions\n@agent\nasync def translate(text: str, target_lang: str) -&gt; str:\n    \"\"\"\n    Translate the following text to {{ target_lang }}:\n    {{ text }}\n\n    Return only the translated text, no explanations.\n    \"\"\"\n    pass\n\n# \u274c Bad: Vague instructions\n@agent\nasync def translate(text: str, target_lang: str) -&gt; str:\n    \"\"\"{{ text }} {{ target_lang }}\"\"\"\n    pass\n</code></pre>"},{"location":"en/tutorials/02-templates/#2-structure-your-prompts","title":"2. Structure Your Prompts","text":"<pre><code>@agent\nasync def analyze(data: str) -&gt; str:\n    \"\"\"\n    ## Task\n    Analyze the following data.\n\n    ## Data\n    {{ data }}\n\n    ## Requirements\n    - Identify key trends\n    - Provide insights\n    - Be concise\n    \"\"\"\n    pass\n</code></pre>"},{"location":"en/tutorials/02-templates/#3-use-conditionals-wisely","title":"3. Use Conditionals Wisely","text":"<pre><code>@agent\nasync def respond(message: str, context: str = None) -&gt; str:\n    \"\"\"\n    {% if context %}\n    Context: {{ context }}\n    {% endif %}\n\n    User message: {{ message }}\n\n    Respond appropriately{{ \" based on the context\" if context else \"\" }}.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"en/tutorials/02-templates/#4-validate-input","title":"4. Validate Input","text":"<pre><code>@agent\nasync def process(items: List[str]) -&gt; str:\n    \"\"\"\n    {% if items %}\n    Process these items:\n    {% for item in items %}\n    - {{ item }}\n    {% endfor %}\n    {% else %}\n    No items to process.\n    {% endif %}\n    \"\"\"\n    pass\n</code></pre>"},{"location":"en/tutorials/02-templates/#common-patterns","title":"Common Patterns","text":""},{"location":"en/tutorials/02-templates/#chain-of-thought","title":"Chain of Thought","text":"<pre><code>@agent\nasync def solve_math(problem: str) -&gt; str:\n    \"\"\"\n    Solve this math problem: {{ problem }}\n\n    Think step by step:\n    1. First, identify the operation\n    2. Then, calculate the result\n    3. Finally, verify your answer\n    \"\"\"\n    pass\n</code></pre>"},{"location":"en/tutorials/02-templates/#few-shot-learning","title":"Few-Shot Learning","text":"<pre><code>@agent\nasync def classify(text: str) -&gt; str:\n    \"\"\"\n    Classify the sentiment of the text.\n\n    Examples:\n    Text: \"I love this!\" \u2192 Sentiment: positive\n    Text: \"This is terrible\" \u2192 Sentiment: negative\n    Text: \"It's okay\" \u2192 Sentiment: neutral\n\n    Text: {{ text }} \u2192 Sentiment: ?\n    \"\"\"\n    pass\n</code></pre>"},{"location":"en/tutorials/02-templates/#role-based-prompts","title":"Role-Based Prompts","text":"<pre><code>@agent\nasync def code_review(code: str, language: str) -&gt; str:\n    \"\"\"\n    You are an expert {{ language }} developer.\n    Review this code and provide suggestions:\n\n    ```{{ language }}\n    {{ code }}\n    ```\n\n    Focus on:\n    - Code quality\n    - Best practices\n    - Potential bugs\n    \"\"\"\n    pass\n</code></pre>"},{"location":"en/tutorials/02-templates/#troubleshooting","title":"Troubleshooting","text":""},{"location":"en/tutorials/02-templates/#template-syntax-errors","title":"Template Syntax Errors","text":"<pre><code># \u274c Wrong: Missing closing tag\n\"\"\"\n{% for item in items %}\n{{ item }}\n\"\"\"\n\n# \u2705 Correct: Proper closing\n\"\"\"\n{% for item in items %}\n{{ item }}\n{% endfor %}\n\"\"\"\n</code></pre>"},{"location":"en/tutorials/02-templates/#variable-not-found","title":"Variable Not Found","text":"<pre><code># \u274c Wrong: Variable doesn't match parameter\n@agent\nasync def greet(name: str) -&gt; str:\n    \"\"\"Hello {{ username }}\"\"\"  # username doesn't exist\n    pass\n\n# \u2705 Correct: Variable matches parameter\n@agent\nasync def greet(name: str) -&gt; str:\n    \"\"\"Hello {{ name }}\"\"\"\n    pass\n</code></pre>"},{"location":"en/tutorials/02-templates/#escaping-special-characters","title":"Escaping Special Characters","text":"<pre><code># If you need literal {{ or }}\n@agent\nasync def explain() -&gt; str:\n    \"\"\"\n    In Jinja2, use {% raw %}{{ variable }}{% endraw %} for templates.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"en/tutorials/02-templates/#practice-exercises","title":"Practice Exercises","text":""},{"location":"en/tutorials/02-templates/#exercise-1-user-profile-generator","title":"Exercise 1: User Profile Generator","text":"<p>Create an agent that generates user profiles:</p> <pre><code>from typing import List\n\n@agent\nasync def create_profile(\n    name: str,\n    skills: List[str],\n    experience_years: int\n) -&gt; str:\n    \"\"\"\n    # TODO: Write template that:\n    # - Introduces the person\n    # - Lists their skills\n    # - Mentions experience level\n    \"\"\"\n    pass\n</code></pre>"},{"location":"en/tutorials/02-templates/#exercise-2-conditional-email-writer","title":"Exercise 2: Conditional Email Writer","text":"<p>Create an agent with conditional formatting:</p> <pre><code>@agent\nasync def write_email(\n    recipient: str,\n    is_urgent: bool,\n    has_attachments: bool\n) -&gt; str:\n    \"\"\"\n    # TODO: Write template that:\n    # - Adds [URGENT] to subject if urgent\n    # - Mentions attachments if present\n    \"\"\"\n    pass\n</code></pre>"},{"location":"en/tutorials/02-templates/#exercise-3-data-analyzer","title":"Exercise 3: Data Analyzer","text":"<p>Create an agent that analyzes data with loops:</p> <pre><code>from typing import Dict\n\n@agent\nasync def analyze_metrics(metrics: Dict[str, float]) -&gt; str:\n    \"\"\"\n    # TODO: Write template that:\n    # - Iterates over metrics\n    # - Highlights values &gt; 80\n    # - Provides summary\n    \"\"\"\n    pass\n</code></pre>"},{"location":"en/tutorials/02-templates/#next-steps","title":"Next Steps","text":"<ul> <li>Tutorial 03: Type-Based Parsing - Learn how to parse structured responses</li> <li>API Reference: Templates - Complete template documentation</li> </ul>"},{"location":"en/tutorials/02-templates/#additional-resources","title":"Additional Resources","text":"<ul> <li>Jinja2 Documentation</li> <li>Prompt Engineering Guide</li> </ul>"},{"location":"en/tutorials/03-type-parsing/","title":"Tutorial 03: Type-Based Parsing","text":"<p>Learn how to use Python type hints to automatically parse LLM responses into structured data.</p>"},{"location":"en/tutorials/03-type-parsing/#what-youll-learn","title":"What You'll Learn","text":"<ul> <li>How type-based parsing works in Kagura</li> <li>Using Pydantic models for complex structures</li> <li>Handling lists, dicts, and nested objects</li> <li>Error handling and validation</li> </ul>"},{"location":"en/tutorials/03-type-parsing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Completed Tutorial 01: Basic Agent</li> <li>Basic understanding of Python type hints</li> <li>Familiarity with Pydantic (helpful but not required)</li> </ul>"},{"location":"en/tutorials/03-type-parsing/#why-type-based-parsing","title":"Why Type-Based Parsing?","text":"<p>LLMs return unstructured text, but your application needs structured data. Kagura automatically converts LLM responses to Python types based on your return type annotation.</p> <pre><code># Without parsing: raw string\nasync def get_age(name: str) -&gt; str:\n    \"\"\"What is {{ name }}'s age?\"\"\"\n    pass\n\nresult = await get_age(\"Alice\")\n# result = \"Alice is 25 years old.\"  \u2190 Hard to use in code\n\n# With parsing: structured data\nasync def get_age(name: str) -&gt; int:\n    \"\"\"What is {{ name }}'s age? Return only the number.\"\"\"\n    pass\n\nresult = await get_age(\"Alice\")\n# result = 25  \u2190 Easy to use!\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#basic-types","title":"Basic Types","text":""},{"location":"en/tutorials/03-type-parsing/#strings","title":"Strings","text":"<pre><code>from kagura import agent\n\n@agent\nasync def summarize(text: str) -&gt; str:\n    \"\"\"Summarize this in one sentence: {{ text }}\"\"\"\n    pass\n\nresult = await summarize(\"Long article...\")\n# result: str = \"Article summary.\"\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#numbers","title":"Numbers","text":"<pre><code>@agent\nasync def count_words(text: str) -&gt; int:\n    \"\"\"Count the words in: {{ text }}. Return only the number.\"\"\"\n    pass\n\nresult = await count_words(\"Hello world\")\n# result: int = 2\n\n@agent\nasync def calculate_average(numbers: list[int]) -&gt; float:\n    \"\"\"Calculate the average of {{ numbers }}. Return only the number.\"\"\"\n    pass\n\nresult = await calculate_average([1, 2, 3, 4, 5])\n# result: float = 3.0\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#booleans","title":"Booleans","text":"<pre><code>@agent\nasync def is_positive(text: str) -&gt; bool:\n    \"\"\"Is this text positive in sentiment? {{ text }}\n    Return only 'true' or 'false'.\"\"\"\n    pass\n\nresult = await is_positive(\"I love this!\")\n# result: bool = True\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#collections","title":"Collections","text":""},{"location":"en/tutorials/03-type-parsing/#lists","title":"Lists","text":"<pre><code>from typing import List\n\n@agent\nasync def extract_keywords(text: str) -&gt; List[str]:\n    \"\"\"Extract keywords from: {{ text }}\n    Return as JSON array.\"\"\"\n    pass\n\nresult = await extract_keywords(\"Python is great for AI\")\n# result: List[str] = [\"Python\", \"AI\", \"programming\"]\n</code></pre> <p>Supported List Types: - <code>List[str]</code>: List of strings - <code>List[int]</code>: List of integers - <code>List[float]</code>: List of floats - <code>List[YourModel]</code>: List of Pydantic models</p>"},{"location":"en/tutorials/03-type-parsing/#dictionaries","title":"Dictionaries","text":"<pre><code>from typing import Dict\n\n@agent\nasync def extract_metadata(text: str) -&gt; Dict[str, str]:\n    \"\"\"Extract metadata from: {{ text }}\n    Return as JSON object.\"\"\"\n    pass\n\nresult = await extract_metadata(\"Title: Hello\\nAuthor: Alice\")\n# result: Dict[str, str] = {\"title\": \"Hello\", \"author\": \"Alice\"}\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#pydantic-models","title":"Pydantic Models","text":"<p>For complex structures, use Pydantic models:</p> <pre><code>from pydantic import BaseModel, Field\nfrom typing import List\n\nclass Person(BaseModel):\n    name: str\n    age: int\n    email: str\n\n@agent\nasync def extract_person(text: str) -&gt; Person:\n    \"\"\"Extract person information from: {{ text }}\n    Return as JSON object with fields: name, age, email.\"\"\"\n    pass\n\nresult = await extract_person(\"Alice (25) - alice@example.com\")\n# result: Person = Person(name=\"Alice\", age=25, email=\"alice@example.com\")\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#model-validation","title":"Model Validation","text":"<p>Pydantic automatically validates the data:</p> <pre><code>from pydantic import BaseModel, EmailStr, validator\n\nclass User(BaseModel):\n    name: str\n    email: EmailStr  # Validates email format\n    age: int\n\n    @validator('age')\n    def age_must_be_positive(cls, v):\n        if v &lt; 0:\n            raise ValueError('age must be positive')\n        return v\n\n@agent\nasync def extract_user(text: str) -&gt; User:\n    \"\"\"Extract user info from: {{ text }}\n    Return as JSON: {name, email, age}\"\"\"\n    pass\n\n# Valid input\nresult = await extract_user(\"Bob, bob@example.com, 30\")\n# result: User(name=\"Bob\", email=\"bob@example.com\", age=30)\n\n# Invalid input (bad email)\n# Will raise ValidationError\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#field-descriptions","title":"Field Descriptions","text":"<p>Help the LLM understand fields:</p> <pre><code>class Article(BaseModel):\n    title: str = Field(description=\"The article title\")\n    summary: str = Field(description=\"Brief summary, max 100 words\")\n    tags: List[str] = Field(description=\"Relevant tags, 3-5 items\")\n    published: bool = Field(description=\"Whether article is published\")\n\n@agent\nasync def analyze_article(content: str) -&gt; Article:\n    \"\"\"Analyze this article: {{ content }}\n    Return as JSON with: title, summary, tags, published.\"\"\"\n    pass\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#nested-structures","title":"Nested Structures","text":""},{"location":"en/tutorials/03-type-parsing/#nested-models","title":"Nested Models","text":"<pre><code>class Address(BaseModel):\n    street: str\n    city: str\n    country: str\n\nclass Company(BaseModel):\n    name: str\n    address: Address\n    employees: int\n\n@agent\nasync def extract_company(text: str) -&gt; Company:\n    \"\"\"Extract company information from: {{ text }}\n    Return as JSON with nested address object.\"\"\"\n    pass\n\nresult = await extract_company(\"Acme Corp, 123 Main St, NYC, USA, 500 employees\")\n# result: Company(\n#     name=\"Acme Corp\",\n#     address=Address(street=\"123 Main St\", city=\"NYC\", country=\"USA\"),\n#     employees=500\n# )\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#lists-of-models","title":"Lists of Models","text":"<pre><code>class Task(BaseModel):\n    title: str\n    priority: str\n    estimated_hours: int\n\n@agent\nasync def extract_tasks(text: str) -&gt; List[Task]:\n    \"\"\"Extract tasks from: {{ text }}\n    Return as JSON array of objects.\"\"\"\n    pass\n\nresult = await extract_tasks(\"\"\"\n    1. Fix bug - High priority - 3 hours\n    2. Write docs - Low priority - 5 hours\n\"\"\")\n# result: List[Task] = [\n#     Task(title=\"Fix bug\", priority=\"High\", estimated_hours=3),\n#     Task(title=\"Write docs\", priority=\"Low\", estimated_hours=5)\n# ]\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#advanced-patterns","title":"Advanced Patterns","text":""},{"location":"en/tutorials/03-type-parsing/#optional-fields","title":"Optional Fields","text":"<pre><code>from typing import Optional\n\nclass Product(BaseModel):\n    name: str\n    price: float\n    discount: Optional[float] = None\n    description: Optional[str] = None\n\n@agent\nasync def extract_product(text: str) -&gt; Product:\n    \"\"\"Extract product info from: {{ text }}\n    Return as JSON. discount and description are optional.\"\"\"\n    pass\n\nresult = await extract_product(\"Laptop $999\")\n# result: Product(name=\"Laptop\", price=999.0, discount=None, description=None)\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#union-types","title":"Union Types","text":"<pre><code>from typing import Union\n\n@agent\nasync def parse_value(text: str) -&gt; Union[int, str]:\n    \"\"\"Parse the value from: {{ text }}\n    Return as number if numeric, otherwise as string.\"\"\"\n    pass\n\nresult1 = await parse_value(\"42\")        # returns int: 42\nresult2 = await parse_value(\"hello\")     # returns str: \"hello\"\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#enums","title":"Enums","text":"<pre><code>from enum import Enum\n\nclass Priority(str, Enum):\n    LOW = \"low\"\n    MEDIUM = \"medium\"\n    HIGH = \"high\"\n\nclass Issue(BaseModel):\n    title: str\n    priority: Priority\n\n@agent\nasync def extract_issue(text: str) -&gt; Issue:\n    \"\"\"Extract issue from: {{ text }}\n    Priority must be: low, medium, or high.\"\"\"\n    pass\n\nresult = await extract_issue(\"Fix login bug - high priority\")\n# result: Issue(title=\"Fix login bug\", priority=Priority.HIGH)\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#best-practices","title":"Best Practices","text":""},{"location":"en/tutorials/03-type-parsing/#1-clear-return-format-instructions","title":"1. Clear Return Format Instructions","text":"<pre><code># \u2705 Good: Explicit format\n@agent\nasync def extract_data(text: str) -&gt; Person:\n    \"\"\"Extract person from: {{ text }}\n    Return as JSON: {\"name\": str, \"age\": int, \"email\": str}\"\"\"\n    pass\n\n# \u274c Bad: Unclear format\n@agent\nasync def extract_data(text: str) -&gt; Person:\n    \"\"\"Get person from: {{ text }}\"\"\"\n    pass\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#2-use-field-descriptions","title":"2. Use Field Descriptions","text":"<pre><code># \u2705 Good: Descriptive fields\nclass Report(BaseModel):\n    summary: str = Field(description=\"Executive summary, 2-3 sentences\")\n    findings: List[str] = Field(description=\"Key findings, bullet points\")\n    score: int = Field(description=\"Overall score 0-100\")\n\n# \u274c Bad: No descriptions\nclass Report(BaseModel):\n    summary: str\n    findings: List[str]\n    score: int\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#3-validate-constraints","title":"3. Validate Constraints","text":"<pre><code>from pydantic import validator, Field\n\nclass Temperature(BaseModel):\n    celsius: float = Field(ge=-273.15, description=\"Temperature in Celsius\")\n\n    @validator('celsius')\n    def validate_temp(cls, v):\n        if v &lt; -273.15:\n            raise ValueError('Temperature below absolute zero')\n        return v\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#4-handle-errors-gracefully","title":"4. Handle Errors Gracefully","text":"<pre><code>from pydantic import ValidationError\n\n@agent\nasync def extract_safe(text: str) -&gt; Optional[Person]:\n    \"\"\"Extract person from: {{ text }}\n    Return as JSON or null if not found.\"\"\"\n    pass\n\ntry:\n    result = await extract_safe(\"No person here\")\nexcept ValidationError as e:\n    print(f\"Validation failed: {e}\")\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#error-handling","title":"Error Handling","text":""},{"location":"en/tutorials/03-type-parsing/#validation-errors","title":"Validation Errors","text":"<pre><code>from pydantic import ValidationError\n\n@agent\nasync def parse_age(text: str) -&gt; int:\n    \"\"\"Extract age from: {{ text }}. Return only the number.\"\"\"\n    pass\n\ntry:\n    result = await parse_age(\"Alice is twenty-five\")\n    # LLM returns \"twenty-five\" instead of 25\nexcept ValidationError as e:\n    print(f\"Failed to parse: {e}\")\n    # Handle error: retry, use default, etc.\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#missing-fields","title":"Missing Fields","text":"<pre><code>class Contact(BaseModel):\n    name: str\n    email: str\n    phone: str  # Required\n\n@agent\nasync def extract_contact(text: str) -&gt; Contact:\n    \"\"\"Extract contact from: {{ text }}\n    Return JSON with: name, email, phone.\"\"\"\n    pass\n\n# If LLM omits phone, ValidationError is raised\ntry:\n    result = await extract_contact(\"John, john@example.com\")\nexcept ValidationError as e:\n    print(\"Missing required field:\", e)\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#type-mismatches","title":"Type Mismatches","text":"<pre><code>@agent\nasync def get_count(text: str) -&gt; int:\n    \"\"\"Count items in: {{ text }}. Return only the number.\"\"\"\n    pass\n\n# If LLM returns \"five\" instead of 5\ntry:\n    result = await get_count(\"five items\")\nexcept ValidationError:\n    # Retry with more explicit instructions\n    @agent\n    async def get_count_strict(text: str) -&gt; int:\n        \"\"\"Count items in: {{ text }}.\n        Return ONLY a numeric digit, no words.\"\"\"\n        pass\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#common-patterns","title":"Common Patterns","text":""},{"location":"en/tutorials/03-type-parsing/#progressive-extraction","title":"Progressive Extraction","text":"<pre><code># Step 1: Extract basic info\n@agent\nasync def extract_basic(text: str) -&gt; Dict[str, str]:\n    \"\"\"Extract key-value pairs from: {{ text }}\"\"\"\n    pass\n\n# Step 2: Parse into model\nbasic = await extract_basic(text)\nperson = Person(**basic)\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#fallback-values","title":"Fallback Values","text":"<pre><code>class Config(BaseModel):\n    timeout: int = 30  # Default value\n    retries: int = 3\n    debug: bool = False\n\n@agent\nasync def parse_config(text: str) -&gt; Config:\n    \"\"\"Parse config from: {{ text }}\n    Use defaults for missing values.\"\"\"\n    pass\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#multi-step-validation","title":"Multi-Step Validation","text":"<pre><code>class ValidatedData(BaseModel):\n    data: str\n\n    @validator('data')\n    def clean_data(cls, v):\n        # Clean and validate\n        return v.strip().lower()\n\n@agent\nasync def extract_and_validate(text: str) -&gt; ValidatedData:\n    \"\"\"Extract data from: {{ text }}\"\"\"\n    pass\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#practice-exercises","title":"Practice Exercises","text":""},{"location":"en/tutorials/03-type-parsing/#exercise-1-contact-extractor","title":"Exercise 1: Contact Extractor","text":"<p>Create a model for contact information:</p> <pre><code>class Contact(BaseModel):\n    # TODO: Add fields for name, email, phone, company\n    pass\n\n@agent\nasync def extract_contact(text: str) -&gt; Contact:\n    \"\"\"# TODO: Write prompt to extract contact info\"\"\"\n    pass\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#exercise-2-product-list-parser","title":"Exercise 2: Product List Parser","text":"<p>Parse a list of products:</p> <pre><code>class Product(BaseModel):\n    # TODO: Add fields for name, price, stock\n    pass\n\n@agent\nasync def parse_products(text: str) -&gt; List[Product]:\n    \"\"\"# TODO: Write prompt to parse product list\"\"\"\n    pass\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#exercise-3-nested-organization","title":"Exercise 3: Nested Organization","text":"<p>Create a nested structure:</p> <pre><code>class Employee(BaseModel):\n    # TODO: name, role, salary\n    pass\n\nclass Department(BaseModel):\n    # TODO: name, employees list, budget\n    pass\n\n@agent\nasync def parse_org(text: str) -&gt; Department:\n    \"\"\"# TODO: Write prompt to parse organization\"\"\"\n    pass\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#troubleshooting","title":"Troubleshooting","text":""},{"location":"en/tutorials/03-type-parsing/#llm-returns-wrong-format","title":"LLM Returns Wrong Format","text":"<pre><code># Problem: LLM returns \"The age is 25\" instead of just \"25\"\n\n# Solution: Be more explicit\n@agent\nasync def get_age(name: str) -&gt; int:\n    \"\"\"What is {{ name }}'s age?\n    IMPORTANT: Return ONLY the numeric age, nothing else.\n    Example: 25\"\"\"\n    pass\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#validation-fails-repeatedly","title":"Validation Fails Repeatedly","text":"<pre><code># Problem: LLM returns data that fails validation\n\n# Solution: Relax constraints or provide examples\nclass Person(BaseModel):\n    age: int = Field(ge=0, le=150, description=\"Age between 0-150\")\n\n@agent\nasync def extract_person(text: str) -&gt; Person:\n    \"\"\"Extract person from: {{ text }}\n    Return JSON: {\"name\": \"string\", \"age\": number between 0-150}\n    Example: {\"name\": \"Alice\", \"age\": 25}\"\"\"\n    pass\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#next-steps","title":"Next Steps","text":"<ul> <li>Tutorial 04: Code Execution - Execute Python code with AI</li> <li>API Reference: Type Parsing - Complete parsing documentation</li> <li>Pydantic Documentation - Learn more about Pydantic</li> </ul>"},{"location":"en/tutorials/03-type-parsing/#additional-resources","title":"Additional Resources","text":"<ul> <li>Type Hints Cheat Sheet</li> <li>Pydantic Field Types</li> </ul>"},{"location":"en/tutorials/04-code-execution/","title":"Tutorial 04: Code Execution","text":"<p>Learn how to safely execute Python code generated by AI agents.</p>"},{"location":"en/tutorials/04-code-execution/#what-youll-learn","title":"What You'll Learn","text":"<ul> <li>How to use the <code>execute_code</code> agent</li> <li>Security constraints and sandboxing</li> <li>Working with execution results</li> <li>Building code-generating workflows</li> <li>Best practices for code execution</li> </ul>"},{"location":"en/tutorials/04-code-execution/#prerequisites","title":"Prerequisites","text":"<ul> <li>Completed Tutorial 01: Basic Agent</li> <li>Understanding of Python basics</li> <li>Familiarity with security concepts (helpful)</li> </ul>"},{"location":"en/tutorials/04-code-execution/#why-code-execution","title":"Why Code Execution?","text":"<p>Sometimes the best way to solve a problem is to write and execute code. Kagura provides a safe way to let AI agents generate and run Python code:</p> <pre><code>from kagura.agents import execute_code\n\nresult = await execute_code(\"Calculate the factorial of 10\")\n\nif result[\"success\"]:\n    print(result[\"result\"])  # 3628800\n    print(result[\"code\"])    # Shows the generated code\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#basic-usage","title":"Basic Usage","text":""},{"location":"en/tutorials/04-code-execution/#simple-calculations","title":"Simple Calculations","text":"<pre><code>from kagura.agents import execute_code\n\n# Mathematical operations\nresult = await execute_code(\"What is 2^10?\")\nprint(result[\"result\"])  # 1024\n\n# Data processing\nresult = await execute_code(\"Sum the numbers from 1 to 100\")\nprint(result[\"result\"])  # 5050\n\n# String operations\nresult = await execute_code(\"Reverse the string 'hello'\")\nprint(result[\"result\"])  # \"olleh\"\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#understanding-the-result","title":"Understanding the Result","text":"<p>The <code>execute_code</code> function returns a dictionary:</p> <pre><code>result = {\n    \"success\": True,         # Whether execution succeeded\n    \"result\": 3628800,       # The value of the `result` variable\n    \"code\": \"...\",          # The generated Python code\n    \"error\": None           # Error message if failed\n}\n</code></pre> <p>Important: The executed code must set a variable named <code>result</code>:</p> <pre><code># \u2705 Good: Sets result variable\nresult = await execute_code(\"Calculate 5 * 5\")\n# Generated code: result = 5 * 5\n\n# \u274c Bad: Doesn't set result\nresult = await execute_code(\"Print hello world\")\n# No result variable \u2192 result[\"result\"] is None\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#data-processing","title":"Data Processing","text":""},{"location":"en/tutorials/04-code-execution/#working-with-lists","title":"Working with Lists","text":"<pre><code># Filter data\nresult = await execute_code(\"\"\"\nFind all even numbers in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\"\"\")\nprint(result[\"result\"])  # [2, 4, 6, 8, 10]\n\n# Transform data\nresult = await execute_code(\"\"\"\nSquare each number in [1, 2, 3, 4, 5]\n\"\"\")\nprint(result[\"result\"])  # [1, 4, 9, 16, 25]\n\n# Aggregate data\nresult = await execute_code(\"\"\"\nCalculate the average of [10, 20, 30, 40, 50]\n\"\"\")\nprint(result[\"result\"])  # 30.0\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#working-with-dictionaries","title":"Working with Dictionaries","text":"<pre><code># Extract data\nresult = await execute_code(\"\"\"\nFrom this data: {'name': 'Alice', 'age': 25, 'city': 'NYC'}\nExtract the age\n\"\"\")\nprint(result[\"result\"])  # 25\n\n# Transform data\nresult = await execute_code(\"\"\"\nConvert this data to uppercase keys:\n{'name': 'Alice', 'role': 'engineer'}\n\"\"\")\nprint(result[\"result\"])  # {'NAME': 'Alice', 'ROLE': 'engineer'}\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#json-processing","title":"JSON Processing","text":"<pre><code>import json\n\n# Parse and analyze JSON\njson_data = json.dumps({\n    \"users\": [\n        {\"name\": \"Alice\", \"score\": 95},\n        {\"name\": \"Bob\", \"score\": 87},\n        {\"name\": \"Charlie\", \"score\": 92}\n    ]\n})\n\nresult = await execute_code(f\"\"\"\nParse this JSON and find the average score:\n{json_data}\n\"\"\")\nprint(result[\"result\"])  # 91.33...\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#advanced-features","title":"Advanced Features","text":""},{"location":"en/tutorials/04-code-execution/#multi-step-calculations","title":"Multi-Step Calculations","text":"<pre><code>result = await execute_code(\"\"\"\n1. Create a list of numbers from 1 to 20\n2. Filter only prime numbers\n3. Calculate their sum\n\"\"\")\n\nprint(result[\"code\"])    # See the generated algorithm\nprint(result[\"result\"])  # Sum of primes\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#custom-algorithms","title":"Custom Algorithms","text":"<pre><code>result = await execute_code(\"\"\"\nImplement the Fibonacci sequence up to the 10th number\n\"\"\")\n\nprint(result[\"result\"])  # [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#data-analysis","title":"Data Analysis","text":"<pre><code>result = await execute_code(\"\"\"\nGiven these test scores: [78, 92, 85, 88, 95, 72, 90]\nCalculate:\n- Mean\n- Median\n- Mode (if exists)\nReturn as a dictionary\n\"\"\")\n\nprint(result[\"result\"])\n# {'mean': 85.71, 'median': 88, 'mode': None}\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#security","title":"Security","text":"<p>Kagura executes code in a sandboxed environment with strict security constraints.</p>"},{"location":"en/tutorials/04-code-execution/#allowed-modules","title":"Allowed Modules","text":"<pre><code># \u2705 Allowed: Safe standard library modules\nresult = await execute_code(\"\"\"\nimport math\nresult = math.sqrt(16)\n\"\"\")\n# Success: 4.0\n\nresult = await execute_code(\"\"\"\nimport json\nresult = json.dumps({'key': 'value'})\n\"\"\")\n# Success: '{\"key\": \"value\"}'\n\nresult = await execute_code(\"\"\"\nfrom datetime import datetime\nresult = datetime.now().year\n\"\"\")\n# Success: 2025\n</code></pre> <p>Allowed modules: - <code>math</code>, <code>random</code>, <code>statistics</code> - <code>json</code>, <code>re</code>, <code>string</code> - <code>datetime</code>, <code>collections</code>, <code>itertools</code> - <code>functools</code>, <code>operator</code>, <code>copy</code></p>"},{"location":"en/tutorials/04-code-execution/#forbidden-operations","title":"Forbidden Operations","text":"<pre><code># \u274c File system access\nresult = await execute_code(\"Read file config.txt\")\n# Error: Forbidden import: os\n\n# \u274c Network access\nresult = await execute_code(\"Fetch data from https://api.example.com\")\n# Error: Forbidden import: requests\n\n# \u274c System commands\nresult = await execute_code(\"Run shell command ls\")\n# Error: Forbidden import: subprocess\n\n# \u274c Code execution\nresult = await execute_code(\"Execute eval('1+1')\")\n# Error: Forbidden operation: eval\n</code></pre> <p>Forbidden modules/operations: - File I/O: <code>os</code>, <code>sys</code>, <code>io</code>, <code>pathlib</code>, <code>open()</code> - Network: <code>socket</code>, <code>urllib</code>, <code>requests</code> - Execution: <code>eval</code>, <code>exec</code>, <code>compile</code>, <code>__import__</code> - System: <code>subprocess</code>, <code>multiprocessing</code></p>"},{"location":"en/tutorials/04-code-execution/#timeout-protection","title":"Timeout Protection","text":"<pre><code>from kagura.core.executor import CodeExecutor\n\n# Default timeout: 5 seconds\nexecutor = CodeExecutor()\n\n# Custom timeout\nexecutor = CodeExecutor(timeout=10.0)\n\nresult = await executor.execute(\"\"\"\nimport time\ntime.sleep(15)  # Will timeout after 10 seconds\nresult = \"done\"\n\"\"\")\n\nprint(result.success)  # False\nprint(result.error)    # \"Execution timeout\"\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#custom-codeexecutor","title":"Custom CodeExecutor","text":"<p>For advanced use cases, use <code>CodeExecutor</code> directly:</p> <pre><code>from kagura.core.executor import CodeExecutor\n\n# Create executor with custom settings\nexecutor = CodeExecutor(\n    timeout=10.0,           # 10 second timeout\n    max_output_size=1000    # Limit output size\n)\n\n# Execute code\nresult = await executor.execute(\"\"\"\nresult = sum(range(1, 1001))\n\"\"\")\n\nprint(result.success)    # True\nprint(result.result)     # 500500\nprint(result.code)       # Generated code\nprint(result.error)      # None\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#execution-result-object","title":"Execution Result Object","text":"<pre><code>from kagura.core.executor import ExecutionResult\n\nresult = await executor.execute(\"result = 42\")\n\n# Result attributes\nprint(result.success)    # bool: True/False\nprint(result.result)     # Any: The result value\nprint(result.code)       # str: Executed code\nprint(result.error)      # Optional[str]: Error message\nprint(result.stdout)     # str: Standard output\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#building-code-workflows","title":"Building Code Workflows","text":""},{"location":"en/tutorials/04-code-execution/#plan-code-execute-pattern","title":"Plan-Code-Execute Pattern","text":"<pre><code>from kagura import agent\nfrom kagura.agents import execute_code\n\n@agent\nasync def plan_solution(problem: str) -&gt; str:\n    \"\"\"\n    Analyze this problem and describe the algorithm:\n    {{ problem }}\n\n    Provide step-by-step approach.\n    \"\"\"\n    pass\n\nasync def solve_with_code(problem: str):\n    # Step 1: Plan\n    plan = await plan_solution(problem)\n    print(f\"Plan: {plan}\")\n\n    # Step 2: Execute\n    result = await execute_code(problem)\n\n    # Step 3: Verify\n    if result[\"success\"]:\n        print(f\"Result: {result['result']}\")\n        print(f\"Code:\\n{result['code']}\")\n    else:\n        print(f\"Error: {result['error']}\")\n\n# Use it\nawait solve_with_code(\"Find all prime numbers between 1 and 50\")\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#iterative-refinement","title":"Iterative Refinement","text":"<pre><code>async def solve_with_retry(problem: str, max_retries: int = 3):\n    for attempt in range(max_retries):\n        result = await execute_code(problem)\n\n        if result[\"success\"]:\n            return result[\"result\"]\n\n        # If failed, try with more specific instructions\n        problem = f\"{problem}\\n\\nPrevious error: {result['error']}\\nPlease fix and try again.\"\n\n    raise Exception(f\"Failed after {max_retries} attempts\")\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#code-review-agent","title":"Code Review Agent","text":"<pre><code>@agent\nasync def review_code(code: str) -&gt; str:\n    \"\"\"\n    Review this Python code for:\n    - Correctness\n    - Efficiency\n    - Best practices\n\n    Code:\n    ```python\n    {{ code }}\n    ```\n    \"\"\"\n    pass\n\nasync def code_and_review(problem: str):\n    # Generate code\n    result = await execute_code(problem)\n\n    if result[\"success\"]:\n        # Review the code\n        review = await review_code(result[\"code\"])\n        print(f\"Review: {review}\")\n\n        return result[\"result\"]\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#best-practices","title":"Best Practices","text":""},{"location":"en/tutorials/04-code-execution/#1-clear-specifications","title":"1. Clear Specifications","text":"<pre><code># \u2705 Good: Clear requirements\nresult = await execute_code(\"\"\"\nCalculate the factorial of 10.\nStore the result in a variable named 'result'.\n\"\"\")\n\n# \u274c Bad: Vague request\nresult = await execute_code(\"Do factorial stuff\")\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#2-handle-errors","title":"2. Handle Errors","text":"<pre><code># \u2705 Good: Error handling\nresult = await execute_code(problem)\n\nif result[\"success\"]:\n    process_result(result[\"result\"])\nelse:\n    logger.error(f\"Code execution failed: {result['error']}\")\n    fallback_solution()\n\n# \u274c Bad: No error handling\nresult = await execute_code(problem)\nprocess_result(result[\"result\"])  # May fail!\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#3-validate-results","title":"3. Validate Results","text":"<pre><code># \u2705 Good: Validate output\nresult = await execute_code(\"Calculate sum of [1,2,3]\")\n\nif result[\"success\"]:\n    value = result[\"result\"]\n    if isinstance(value, (int, float)) and value &gt; 0:\n        use_result(value)\n    else:\n        raise ValueError(f\"Unexpected result: {value}\")\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#4-provide-context","title":"4. Provide Context","text":"<pre><code># \u2705 Good: Context and examples\nresult = await execute_code(f\"\"\"\nGiven this data: {json.dumps(data)}\nExtract all items where status is 'active'\nReturn as a list\n\nExample output: [item1, item2, ...]\n\"\"\")\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#5-use-appropriate-timeout","title":"5. Use Appropriate Timeout","text":"<pre><code># \u2705 Good: Adjust timeout based on task\nexecutor = CodeExecutor(timeout=1.0)   # Quick tasks\nresult = await executor.execute(\"result = 2 + 2\")\n\nexecutor = CodeExecutor(timeout=30.0)  # Complex tasks\nresult = await executor.execute(\"Analyze large dataset...\")\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#common-patterns","title":"Common Patterns","text":""},{"location":"en/tutorials/04-code-execution/#data-transformation-pipeline","title":"Data Transformation Pipeline","text":"<pre><code>async def transform_data(data: list, operations: list[str]):\n    \"\"\"Apply multiple transformations to data\"\"\"\n    current_data = data\n\n    for operation in operations:\n        result = await execute_code(f\"\"\"\nApply this operation to the data: {operation}\nData: {current_data}\n\"\"\")\n        if result[\"success\"]:\n            current_data = result[\"result\"]\n        else:\n            raise Exception(f\"Failed: {result['error']}\")\n\n    return current_data\n\n# Use it\ndata = [1, 2, 3, 4, 5]\noperations = [\n    \"Multiply each by 2\",\n    \"Filter numbers &gt; 5\",\n    \"Sum all numbers\"\n]\nresult = await transform_data(data, operations)\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#calculator-agent","title":"Calculator Agent","text":"<pre><code>@agent\nasync def calculate(expression: str) -&gt; float:\n    \"\"\"A calculator agent that evaluates expressions\"\"\"\n    result = await execute_code(f\"Calculate: {expression}\")\n\n    if result[\"success\"]:\n        return result[\"result\"]\n    else:\n        raise ValueError(f\"Calculation failed: {result['error']}\")\n\n# Use it\nanswer = await calculate(\"(5 + 3) * 2 - 10\")\nprint(answer)  # 6.0\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#data-analysis-agent","title":"Data Analysis Agent","text":"<pre><code>async def analyze_dataset(data: list[dict], query: str):\n    \"\"\"Analyze structured data with natural language\"\"\"\n    data_str = json.dumps(data)\n\n    result = await execute_code(f\"\"\"\nDataset: {data_str}\nQuery: {query}\n\nAnalyze the dataset and answer the query.\n\"\"\")\n\n    return result[\"result\"] if result[\"success\"] else None\n\n# Use it\nsales_data = [\n    {\"product\": \"A\", \"revenue\": 1000},\n    {\"product\": \"B\", \"revenue\": 1500},\n    {\"product\": \"C\", \"revenue\": 800}\n]\n\nresult = await analyze_dataset(\n    sales_data,\n    \"What is the total revenue?\"\n)\nprint(result)  # 3300\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#practice-exercises","title":"Practice Exercises","text":""},{"location":"en/tutorials/04-code-execution/#exercise-1-prime-number-finder","title":"Exercise 1: Prime Number Finder","text":"<pre><code># TODO: Create a function that finds prime numbers\nasync def find_primes(n: int):\n    \"\"\"Find all prime numbers up to n\"\"\"\n    result = await execute_code(f\"\"\"\n    Find all prime numbers up to {n}\n    Return as a list\n    \"\"\")\n    return result[\"result\"] if result[\"success\"] else []\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#exercise-2-data-aggregator","title":"Exercise 2: Data Aggregator","text":"<pre><code># TODO: Create a function that aggregates data\nasync def aggregate_sales(sales: list[dict]) -&gt; dict:\n    \"\"\"Calculate total, average, min, max from sales data\"\"\"\n    # Use execute_code to analyze the sales list\n    pass\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#exercise-3-text-analyzer","title":"Exercise 3: Text Analyzer","text":"<pre><code># TODO: Create a function that analyzes text\nasync def analyze_text(text: str) -&gt; dict:\n    \"\"\"\n    Analyze text and return:\n    - word_count\n    - unique_words\n    - most_common_word\n    - average_word_length\n    \"\"\"\n    pass\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#troubleshooting","title":"Troubleshooting","text":""},{"location":"en/tutorials/04-code-execution/#result-is-none","title":"Result is None","text":"<pre><code># Problem: result[\"result\"] is None\n\n# Cause: Code doesn't set 'result' variable\nresult = await execute_code(\"print(42)\")  # Only prints\n\n# Solution: Ask for explicit result\nresult = await execute_code(\"Calculate 42 and store in result variable\")\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#timeout-errors","title":"Timeout Errors","text":"<pre><code># Problem: Execution timeout\n\n# Cause: Complex operation or infinite loop\nresult = await execute_code(\"Calculate factorial of 100000\")\n\n# Solution: Increase timeout or simplify\nexecutor = CodeExecutor(timeout=30.0)\nresult = await executor.execute(\"Calculate factorial of 100\")\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#security-errors","title":"Security Errors","text":"<pre><code># Problem: Forbidden import error\n\n# Cause: Trying to use restricted module\nresult = await execute_code(\"Read file data.txt\")\n\n# Solution: Use allowed modules or provide data\nresult = await execute_code(f\"Process this data: {data}\")\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#next-steps","title":"Next Steps","text":"<ul> <li>Tutorial 05: Interactive REPL - Interactive development environment</li> <li>API Reference: Code Execution - Complete executor documentation</li> <li>Examples: Code Generator - Full example</li> </ul>"},{"location":"en/tutorials/04-code-execution/#additional-resources","title":"Additional Resources","text":"<ul> <li>Python Security Best Practices</li> <li>AST Module Documentation</li> </ul>"},{"location":"en/tutorials/05-repl/","title":"Tutorial 5: Using the Interactive REPL","text":"<p>Learn how to use Kagura AI's interactive REPL for rapid prototyping and testing.</p>"},{"location":"en/tutorials/05-repl/#what-is-the-repl","title":"What is the REPL?","text":"<p>REPL stands for Read-Eval-Print Loop - an interactive environment where you can: - Define agents on the fly - Test them immediately - Iterate quickly without writing files - Experiment with different prompts and models</p>"},{"location":"en/tutorials/05-repl/#starting-the-repl","title":"Starting the REPL","text":"<pre><code>kagura repl\n</code></pre> <p>You'll see the welcome screen:</p> <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Kagura AI REPL                       \u2502\n\u2502 Python-First AI Agent Framework      \u2502\n\u2502                                      \u2502\n\u2502 Type /help for commands, /exit to    \u2502\n\u2502 quit                                 \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n&gt;&gt;&gt;\n</code></pre>"},{"location":"en/tutorials/05-repl/#basic-usage","title":"Basic Usage","text":""},{"location":"en/tutorials/05-repl/#import-and-define","title":"Import and Define","text":"<pre><code>&gt;&gt;&gt; from kagura import agent\n&gt;&gt;&gt;\n&gt;&gt;&gt; @agent\n... async def hello(name: str) -&gt; str:\n...     '''Say hello to {{ name }}'''\n...     pass\n...\nAgent 'hello' defined\n</code></pre>"},{"location":"en/tutorials/05-repl/#call-the-agent","title":"Call the Agent","text":"<pre><code>&gt;&gt;&gt; await hello(\"World\")\nHello, World! How can I help you today?\n</code></pre> <p>That's it! No files, no boilerplate - just define and run.</p>"},{"location":"en/tutorials/05-repl/#repl-commands","title":"REPL Commands","text":"<p>Commands start with <code>/</code>:</p>"},{"location":"en/tutorials/05-repl/#help-show-help","title":"/help - Show Help","text":"<pre><code>&gt;&gt;&gt; /help\nAvailable Commands:\n  /help      - Show this help message\n  /agents    - List all defined agents\n  /exit      - Exit REPL\n  /clear     - Clear screen\n  /model     - Show or set default model\n  /temp      - Show or set default temperature\n</code></pre>"},{"location":"en/tutorials/05-repl/#agents-list-agents","title":"/agents - List Agents","text":"<pre><code>&gt;&gt;&gt; /agents\nDefined Agents:\n  hello(name: str) -&gt; str\n  translate(text: str, lang: str) -&gt; str\n</code></pre>"},{"location":"en/tutorials/05-repl/#model-change-model","title":"/model - Change Model","text":"<pre><code>&gt;&gt;&gt; /model\nCurrent model: gpt-4o-mini\n\n&gt;&gt;&gt; /model gpt-4o\nModel changed to: gpt-4o\n</code></pre>"},{"location":"en/tutorials/05-repl/#temp-change-temperature","title":"/temp - Change Temperature","text":"<pre><code>&gt;&gt;&gt; /temp\nCurrent temperature: 0.7\n\n&gt;&gt;&gt; /temp 1.2\nTemperature changed to: 1.2\n</code></pre>"},{"location":"en/tutorials/05-repl/#clear-clear-screen","title":"/clear - Clear Screen","text":"<pre><code>&gt;&gt;&gt; /clear\n# Screen clears\n</code></pre>"},{"location":"en/tutorials/05-repl/#exit-exit-repl","title":"/exit - Exit REPL","text":"<pre><code>&gt;&gt;&gt; /exit\nGoodbye!\n</code></pre>"},{"location":"en/tutorials/05-repl/#multi-line-input","title":"Multi-line Input","text":"<p>The REPL automatically detects multi-line statements:</p> <pre><code>&gt;&gt;&gt; from pydantic import BaseModel\n&gt;&gt;&gt;\n&gt;&gt;&gt; class Person(BaseModel):\n...     name: str\n...     age: int\n...     occupation: str\n...\n&gt;&gt;&gt;\n&gt;&gt;&gt; @agent\n... async def extract_person(text: str) -&gt; Person:\n...     '''Extract person info from: {{ text }}'''\n...     pass\n...\nAgent 'extract_person' defined\n</code></pre>"},{"location":"en/tutorials/05-repl/#practical-workflow","title":"Practical Workflow","text":""},{"location":"en/tutorials/05-repl/#1-quick-testing","title":"1. Quick Testing","text":"<p>Test ideas quickly:</p> <pre><code>&gt;&gt;&gt; @agent\n... async def v1(text: str) -&gt; str:\n...     '''Summarize: {{ text }}'''\n...     pass\n...\n&gt;&gt;&gt; await v1(\"Long text here...\")\nSummary here...\n\n&gt;&gt;&gt; @agent\n... async def v2(text: str) -&gt; str:\n...     '''Summarize in bullet points: {{ text }}'''\n...     pass\n...\n&gt;&gt;&gt; await v2(\"Long text here...\")\n- Point 1\n- Point 2\n</code></pre>"},{"location":"en/tutorials/05-repl/#2-iterative-refinement","title":"2. Iterative Refinement","text":"<p>Refine your prompts:</p> <pre><code>&gt;&gt;&gt; @agent\n... async def summarize_v1(text: str) -&gt; str:\n...     '''Summarize: {{ text }}'''\n...     pass\n...\n&gt;&gt;&gt; result1 = await summarize_v1(\"Long article...\")\n&gt;&gt;&gt; # Not quite right, let's try again\n\n&gt;&gt;&gt; @agent\n... async def summarize_v2(text: str) -&gt; str:\n...     '''Provide a concise summary in 2-3 sentences: {{ text }}'''\n...     pass\n...\n&gt;&gt;&gt; result2 = await summarize_v2(\"Long article...\")\n&gt;&gt;&gt; # Better!\n</code></pre>"},{"location":"en/tutorials/05-repl/#3-debugging","title":"3. Debugging","text":"<p>Inspect results:</p> <pre><code>&gt;&gt;&gt; result = await extract_person(\"Alice is 30 years old and works as an engineer\")\n&gt;&gt;&gt; print(result)\nPerson(name='Alice', age=30, occupation='engineer')\n\n&gt;&gt;&gt; print(type(result))\n&lt;class '__main__.Person'&gt;\n\n&gt;&gt;&gt; print(result.model_dump())\n{'name': 'Alice', 'age': 30, 'occupation': 'engineer'}\n</code></pre>"},{"location":"en/tutorials/05-repl/#4-composition","title":"4. Composition","text":"<p>Chain agents together:</p> <pre><code>&gt;&gt;&gt; @agent\n... async def extract_topic(text: str) -&gt; str:\n...     '''Extract the main topic from: {{ text }}'''\n...     pass\n...\n&gt;&gt;&gt; @agent\n... async def elaborate(topic: str) -&gt; str:\n...     '''Elaborate on: {{ topic }}'''\n...     pass\n...\n&gt;&gt;&gt; topic = await extract_topic(\"Quantum computing is revolutionary...\")\n&gt;&gt;&gt; await elaborate(topic)\nQuantum computing is a revolutionary technology...\n</code></pre>"},{"location":"en/tutorials/05-repl/#advanced-features","title":"Advanced Features","text":""},{"location":"en/tutorials/05-repl/#using-code-execution","title":"Using Code Execution","text":"<pre><code>&gt;&gt;&gt; from kagura.agents import execute_code\n&gt;&gt;&gt;\n&gt;&gt;&gt; result = await execute_code(\"Calculate fibonacci(15)\")\n&gt;&gt;&gt; result[\"result\"]\n610\n</code></pre>"},{"location":"en/tutorials/05-repl/#trying-different-models","title":"Trying Different Models","text":"<pre><code>&gt;&gt;&gt; @agent(model=\"gpt-4o\")\n... async def advanced(query: str) -&gt; str:\n...     '''Answer with deep analysis: {{ query }}'''\n...     pass\n...\n&gt;&gt;&gt; @agent(model=\"gpt-4o-mini\")\n... async def simple(query: str) -&gt; str:\n...     '''Answer briefly: {{ query }}'''\n...     pass\n...\n</code></pre>"},{"location":"en/tutorials/05-repl/#custom-temperature","title":"Custom Temperature","text":"<pre><code>&gt;&gt;&gt; @agent(temperature=0.1)  # Very deterministic\n... async def factual(query: str) -&gt; str:\n...     '''Provide factual answer: {{ query }}'''\n...     pass\n...\n&gt;&gt;&gt; @agent(temperature=1.5)  # More creative\n... async def creative(topic: str) -&gt; str:\n...     '''Write a creative story about: {{ topic }}'''\n...     pass\n...\n</code></pre>"},{"location":"en/tutorials/05-repl/#tips-and-tricks","title":"Tips and Tricks","text":""},{"location":"en/tutorials/05-repl/#1-use-variables","title":"1. Use Variables","text":"<p>Store results for reuse:</p> <pre><code>&gt;&gt;&gt; text = \"Long article text here...\"\n&gt;&gt;&gt; summary = await summarize(text)\n&gt;&gt;&gt; keywords = await extract_keywords(summary)\n</code></pre>"},{"location":"en/tutorials/05-repl/#2-quick-imports","title":"2. Quick Imports","text":"<p>Import common modules at the start:</p> <pre><code>&gt;&gt;&gt; from kagura import agent\n&gt;&gt;&gt; from pydantic import BaseModel\n&gt;&gt;&gt; from typing import List, Optional\n</code></pre>"},{"location":"en/tutorials/05-repl/#3-test-error-handling","title":"3. Test Error Handling","text":"<pre><code>&gt;&gt;&gt; try:\n...     result = await my_agent(\"test\")\n... except Exception as e:\n...     print(f\"Error: {e}\")\n</code></pre>"},{"location":"en/tutorials/05-repl/#4-save-working-code","title":"4. Save Working Code","text":"<p>Once you have working code, copy it to a <code>.py</code> file:</p> <pre><code># From REPL:\n&gt;&gt;&gt; @agent\n... async def working_agent(x: str) -&gt; str:\n...     '''Process {{ x }}'''\n...     pass\n\n# Copy to agent.py:\nfrom kagura import agent\n\n@agent\nasync def working_agent(x: str) -&gt; str:\n    '''Process {{ x }}'''\n    pass\n</code></pre>"},{"location":"en/tutorials/05-repl/#common-workflows","title":"Common Workflows","text":""},{"location":"en/tutorials/05-repl/#workflow-1-prompt-engineering","title":"Workflow 1: Prompt Engineering","text":"<pre><code># Start REPL\n$ kagura repl\n\n# Test different prompts\n&gt;&gt;&gt; @agent\n... async def v1(text: str) -&gt; str:\n...     '''{{ text }}'''\n...     pass\n&gt;&gt;&gt; await v1(\"Summarize this\")\n\n&gt;&gt;&gt; @agent\n... async def v2(text: str) -&gt; str:\n...     '''Provide a detailed summary of: {{ text }}'''\n...     pass\n&gt;&gt;&gt; await v2(\"Summarize this\")\n\n# Find the best prompt, save to file\n</code></pre>"},{"location":"en/tutorials/05-repl/#workflow-2-model-comparison","title":"Workflow 2: Model Comparison","text":"<pre><code>&gt;&gt;&gt; @agent(model=\"gpt-4o-mini\")\n... async def fast(q: str) -&gt; str:\n...     '''Answer: {{ q }}'''\n...     pass\n\n&gt;&gt;&gt; @agent(model=\"gpt-4o\")\n... async def accurate(q: str) -&gt; str:\n...     '''Answer: {{ q }}'''\n...     pass\n\n&gt;&gt;&gt; await fast(\"Explain quantum computing\")\n&gt;&gt;&gt; await accurate(\"Explain quantum computing\")\n# Compare outputs\n</code></pre>"},{"location":"en/tutorials/05-repl/#workflow-3-data-extraction-testing","title":"Workflow 3: Data Extraction Testing","text":"<pre><code>&gt;&gt;&gt; from pydantic import BaseModel\n&gt;&gt;&gt; from typing import List\n\n&gt;&gt;&gt; class Item(BaseModel):\n...     name: str\n...     price: float\n\n&gt;&gt;&gt; @agent\n... async def extract_items(text: str) -&gt; List[Item]:\n...     '''Extract items and prices from: {{ text }}'''\n...     pass\n\n&gt;&gt;&gt; test_text = \"Apple $1.50, Banana $0.75\"\n&gt;&gt;&gt; await extract_items(test_text)\n[Item(name='Apple', price=1.5), Item(name='Banana', price=0.75)]\n</code></pre>"},{"location":"en/tutorials/05-repl/#keyboard-shortcuts","title":"Keyboard Shortcuts","text":"<ul> <li>\u2191/\u2193: Navigate command history</li> <li>Tab: Auto-complete (when available)</li> <li>Ctrl+C: Cancel current input</li> <li>Ctrl+D: Exit REPL</li> </ul>"},{"location":"en/tutorials/05-repl/#troubleshooting","title":"Troubleshooting","text":""},{"location":"en/tutorials/05-repl/#import-errors","title":"Import Errors","text":"<pre><code>&gt;&gt;&gt; from kagura import agent\nModuleNotFoundError: No module named 'kagura'\n</code></pre> <p>Solution: Ensure Kagura AI is installed in the current environment: <pre><code>pip install kagura-ai\n</code></pre></p>"},{"location":"en/tutorials/05-repl/#api-key-errors","title":"API Key Errors","text":"<pre><code>&gt;&gt;&gt; await hello(\"test\")\nAuthenticationError: API key not found\n</code></pre> <p>Solution: Set your API key: <pre><code>export OPENAI_API_KEY=\"your-key-here\"\nkagura repl\n</code></pre></p>"},{"location":"en/tutorials/05-repl/#memory-issues","title":"Memory Issues","text":"<p>If the REPL becomes slow: - Exit and restart: <code>/exit</code> - Clear large variables: <code>del big_variable</code></p>"},{"location":"en/tutorials/05-repl/#best-practices","title":"Best Practices","text":"<ol> <li>Start Simple: Begin with basic agents, then add complexity</li> <li>Test Incrementally: Test each change before moving on</li> <li>Save Working Code: Copy successful agents to files</li> <li>Use Variables: Store reusable data in variables</li> <li>Clean Up: Delete large variables when done</li> </ol>"},{"location":"en/tutorials/05-repl/#example-session","title":"Example Session","text":"<p>Complete example of a REPL session:</p> <pre><code>$ kagura repl\n\n&gt;&gt;&gt; from kagura import agent\n&gt;&gt;&gt; from pydantic import BaseModel\n\n&gt;&gt;&gt; class Task(BaseModel):\n...     title: str\n...     priority: int\n\n&gt;&gt;&gt; @agent\n... async def extract_task(text: str) -&gt; Task:\n...     '''Extract task from: {{ text }}'''\n...     pass\n...\nAgent 'extract_task' defined\n\n&gt;&gt;&gt; task = await extract_task(\"Fix the login bug (high priority)\")\n&gt;&gt;&gt; print(task)\nTask(title='Fix the login bug', priority=3)\n\n&gt;&gt;&gt; @agent\n... async def create_issue(task: Task) -&gt; str:\n...     '''Create a GitHub issue for task: {{ task.title }} (priority: {{ task.priority }})'''\n...     pass\n...\nAgent 'create_issue' defined\n\n&gt;&gt;&gt; issue = await create_issue(task)\n&gt;&gt;&gt; print(issue)\nGitHub Issue:\nTitle: Fix the login bug\nPriority: High (3)\nDescription: This is a high-priority bug that needs immediate attention...\n\n&gt;&gt;&gt; /exit\nGoodbye!\n</code></pre>"},{"location":"en/tutorials/05-repl/#summary","title":"Summary","text":"<p>You learned: - \u2713 How to start and use the REPL - \u2713 REPL commands (/help, /agents, /model, etc.) - \u2713 Multi-line input for complex definitions - \u2713 Practical workflows for testing and iteration - \u2713 Tips for efficient REPL usage</p> <p>The REPL is your playground for experimentation. Use it to: - Test ideas quickly - Refine prompts - Compare models - Debug agents</p> <p>Happy coding! \ud83c\udf89</p>"},{"location":"en/tutorials/05-repl/#next-steps","title":"Next Steps","text":"<ul> <li>API Reference: CLI - Detailed CLI documentation</li> <li>Examples - More code examples</li> <li>FAQ - Common questions</li> </ul>"},{"location":"en/tutorials/agent-publishing-guide/","title":"Kagura Agent Publishing Guide","text":"<p>This guide provides instructions on how to create, test, and publish agents for the Kagura platform.</p>"},{"location":"en/tutorials/agent-publishing-guide/#repository-structure","title":"Repository Structure","text":"<pre><code>kagura-agents/\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 agent_name/\n\u2502       \u251c\u2500\u2500 agent.yml\n\u2502       \u251c\u2500\u2500 state_model.yml\n\u2502       \u2514\u2500\u2500 tools.py\n\u251c\u2500\u2500 tests/\n\u2502   \u2514\u2500\u2500 agent_name/\n\u2502       \u2514\u2500\u2500 test_agent.py\n\u251c\u2500\u2500 examples/\n\u2502   \u2514\u2500\u2500 agent_name/\n\u2502       \u2514\u2500\u2500 example.py\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 uv.lock\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"en/tutorials/agent-publishing-guide/#creating-an-agent","title":"Creating an Agent","text":"<p>Before creating a new agent, make sure to install the Kagura CLI and create a new agent template.</p>"},{"location":"en/tutorials/agent-publishing-guide/#building-an-agent","title":"Building An Agent","text":"<p>See: Building Your First Agent</p>"},{"location":"en/tutorials/agent-publishing-guide/#testing-testsagent_nametest_agentpy","title":"Testing (tests/agent_name/test_agent.py)","text":"<pre><code>import pytest\nfrom kagura.core.agent import Agent\n\n@pytest.mark.asyncio\nasync def test_agent():\n    agent = Agent.assigner(\"agent_name\")\n    result = await agent.execute({\n        \"input\": \"test data\"\n    })\n    assert result.SUCCESS\n</code></pre> <p>Make sure to run the tests before publishing the agent. Also see the CONTIBUTING guide for more information.</p> <pre><code>pytest tests/agent_name/test_agent.py\n</code></pre>"},{"location":"en/tutorials/agent-publishing-guide/#example-usage-examplesagent_nameexamplepy","title":"Example Usage (examples/agent_name/example.py)","text":"<pre><code>from kagura.core.agent import Agent\n\nasync def run_example():\n    agent = Agent.assigner(\"agent_name\")\n    result = await agent.execute({\n        \"input\": \"example data\"\n    })\n    print(result.output)\n</code></pre>"},{"location":"en/tutorials/agent-publishing-guide/#agent-documentation-agentsagent_namereadmemd","title":"Agent Documentation (agents/agent_name/README.md)","text":"<pre><code># Agent Name\n\n## Purpose\nBrief description of what the agent does.\n\n## Configuration\nKey configuration options and their meanings.\n\n## Usage\nExample of how to use the agent.\n\n## Dependencies\nList of required packages.\n</code></pre>"},{"location":"en/tutorials/agent-publishing-guide/#publishing","title":"Publishing","text":"<ol> <li> <p>Create GitHub repository <pre><code>git init\ngit add .\ngit commit -m \"Initial commit\"\ngit remote add origin https://github.com/username/kagura-agents.git\ngit push -u origin main\n</code></pre></p> </li> <li> <p>Install agents using Kagura CLI <pre><code>kagura install https://github.com/username/kagura-agents\n</code></pre></p> </li> </ol>"},{"location":"en/tutorials/agent-publishing-guide/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Documentation</p> <ul> <li>Include clear README for each agent</li> <li>Document all configuration options</li> <li>Provide usage examples</li> </ul> </li> <li> <p>Testing</p> <ul> <li>Write unit tests for each agent</li> <li>Include edge cases</li> <li>Test multilingual support</li> </ul> </li> <li> <p>Dependencies</p> <ul> <li>List all requirements</li> <li>Use version constraints</li> <li>Keep dependencies minimal</li> </ul> </li> <li> <p>Code Quality</p> <ul> <li>Follow Python style guide</li> <li>Use type hints</li> <li>Add proper error handling</li> </ul> </li> </ol>"},{"location":"en/tutorials/coding-examples/","title":"Coding Examples","text":"<p>This guide provides practical coding examples for Kagura AI. Each example demonstrates a specific use case and includes complete, runnable code with detailed comments.</p>"},{"location":"en/tutorials/coding-examples/#1-basic-chat-agent-example","title":"1. Basic Chat Agent Example","text":"<p>Simple example of creating a chat interaction with Kagura AI.</p> <pre><code>from kagura.core.agent import Agent\n\nasync def chat():\n    # Initialize the default chat agent\n    # This uses the configuration from ~/.config/kagura/agents/chat/\n    agent = Agent.assigner(\"chat\")\n\n    # Execute the agent with a query and stream the response\n    # Streaming allows real-time display of the agent's response\n    async for response in await agent.execute(\"Who are you?\"):\n        print(response, end=\"\")  # Print each chunk of the response as it arrives\n\n    print()  # Add a newline after completion\n\nif __name__ == \"__main__\":\n    import asyncio\n    # Run the async function in the event loop\n    asyncio.run(chat())\n</code></pre>"},{"location":"en/tutorials/coding-examples/#2-content-fetching-example","title":"2. Content Fetching Example","text":"<p>Example of fetching content from a URL using the content fetcher agent.</p> <p>Copy <code>examples/agents</code> to <code>~/.config/kagura/agents</code> before running this example. Sample scripts are in the <code>examples/scripts</code> directory of the Kagura AI repository.</p> <pre><code>from kagura.core.agent import Agent\nfrom kagura.core.utils.console import KaguraConsole\nfrom kagura.core.models import StateModel\n\nasync def arun(agent_name: str, state: Dict[str, Any]):\n    # Initialize the content fetcher agent with the given state\n    # The state must include a 'url' field for the content source\n    agent = Agent.assigner(agent_name, state)\n\n    # Execute the agent to fetch the content\n    # The agent will handle URL validation and content retrieval\n    result = await agent.execute()\n\n    # Initialize the console for pretty printing\n    # KaguraConsole provides formatted output for better readability\n    console = KaguraConsole()\n\n    # Display the result in a formatted table\n    # model_dump() converts the Pydantic model to a dictionary\n    console.print_data_table(result.model_dump())\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    # Specify the agent and initial state\n    agent_name = \"content_fetcher\"\n    state = {\n        \"url\": \"https://www.kagura-ai.com\"  # URL to fetch content from\n    }\n    # Run the async function\n    asyncio.run(arun(agent_name, state))\n</code></pre>"},{"location":"en/tutorials/coding-examples/#3-content-summarization-example","title":"3. Content Summarization Example","text":"<p>Example of summarizing text content using the summarizer agent.</p> <pre><code>from kagura.core.agent import Agent\nfrom kagura.core.utils.console import KaguraConsole\n\nasync def arun(agent_name: str, state: Dict[str, Any]):\n    # Initialize the summarizer agent with the input text\n    # The state must include content.text field with the text to summarize\n    agent = Agent.assigner(agent_name, state)\n\n    # Execute the agent to generate the summary\n    # The agent will process the text and create a concise summary\n    result = await agent.execute()\n\n    # Initialize the console for formatted output\n    console = KaguraConsole()\n\n    # Display the full result including metadata\n    console.print_data_table(result.model_dump())\n\n    # Print the generated summary separately for clarity\n    print(\"Summary:\")\n    print(result.summary)\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    # Sample text to summarize\n    text = \"\"\"\n    # Kagura AI\n    Kagura is a powerful yet simple AI agent framework that enables you to build,\n    configure, and orchestrate AI agents using YAML files...\n    \"\"\"\n\n    # Configure the agent and state\n    agent_name = \"summarizer\"\n    state = {\n        \"content\": {\n            \"text\": text,  # Text to be summarized\n        }\n    }\n    # Run the async function\n    asyncio.run(arun(agent_name, state))\n</code></pre>"},{"location":"en/tutorials/coding-examples/#4-search-intent-analysis-example","title":"4. Search Intent Analysis Example","text":"<p>Example of analyzing search intents and creating search plans.</p> <pre><code>from kagura.core.agent import Agent\n\nasync def arun():\n    # Configure the search intent extractor\n    agent_name = \"user_search_intent_extractor\"\n    user_query = \"What is the best way to fine-tune the learning rate of an AI model?\"\n\n    # Initialize state with the user's query\n    state = {\"user_query\": user_query}\n\n    # Extract search intents from the query\n    # This agent analyzes the query to understand user's search intentions\n    user_intent_agent = Agent.assigner(agent_name, state)\n    result = await user_intent_agent.execute()\n\n    # Extract the search intents from the result\n    user_search_intents = result.model_dump()[\"user_search_intents\"]\n    print(user_search_intents)\n\n    # Create a search plan based on the extracted intents\n    # The planner agent will create a structured plan for the search\n    state = {\"user_search_intents\": user_search_intents}\n    planner_agent = Agent.assigner(\"search_planner\", state)\n    search_plan = await planner_agent.execute()\n\n    # Display the generated search plan\n    print(search_plan)\n\nif __name__ == \"__main__\":\n    import asyncio\n    # Run the async function\n    asyncio.run(arun())\n</code></pre>"},{"location":"en/tutorials/coding-examples/#5-workflow-integration-example","title":"5. Workflow Integration Example","text":"<p>Example of using a workflow that combines multiple agents.</p> <pre><code>from kagura.core.agent import Agent\nfrom kagura.core.utils.console import KaguraConsole\n\nasync def arun(agent_name: str, state: Dict[str, Any]):\n    # Initialize the workflow agent\n    # This agent coordinates multiple sub-agents in a defined workflow\n    agent = Agent.assigner(agent_name, state)\n\n    # Check if the agent is configured as a workflow\n    if agent.is_workflow:\n        # Initialize console for progress display\n        console = KaguraConsole()\n\n        # Execute the workflow and display updates\n        # The workflow will process through multiple stages\n        async for update in await agent.execute():\n            # Display the state update after each step\n            console.print_data_table(update)\n    else:\n        # Warn if the agent is not a workflow\n        print(f\"{agent_name} is not a workflow agent\")\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    # Configure the workflow\n    agent_name = \"content_summarizer\"  # This workflow fetches and summarizes content\n    state = {\n        \"url\": \"https://github.com\"  # Starting URL for the workflow\n    }\n    # Run the async function\n    asyncio.run(arun(agent_name, state))\n</code></pre> <p>Each example is a complete, standalone script that you can run directly. The comments explain what each part of the code does and why. Make sure you have Kagura AI properly installed and configured before running these examples. For more detailed information about each agent type and their configurations, refer to the full documentation.</p>"},{"location":"en/tutorials/first-agent/","title":"Building Your First Agent: Review Analyzer","text":"<p>This tutorial guides you through creating a review analysis agent that processes customer reviews to extract sentiment, key points, and suggestions.</p>"},{"location":"en/tutorials/first-agent/#project-setup","title":"Project Setup","text":"<ol> <li> <p>Create the agent directory: <pre><code>mkdir -p ~/.config/kagura/agents/review_analyzer\n</code></pre></p> </li> <li> <p>Initialize agent files: <pre><code>touch ~/.config/kagura/agents/review_analyzer/agent.yml\ntouch ~/.config/kagura/agents/review_analyzer/state_model.yml\n</code></pre></p> </li> </ol>"},{"location":"en/tutorials/first-agent/#state-model-configuration","title":"State Model Configuration","text":"<p>Create state_model.yml: <pre><code>custom_models:\n  - name: Sentiment\n    fields:\n      - name: score\n        type: float\n        description:\n          - language: en\n            text: Sentiment score from -1.0 (negative) to 1.0 (positive)\n      - name: confidence\n        type: float\n        description:\n          - language: en\n            text: Confidence level of sentiment analysis (0.0 to 1.0)\n\n  - name: ReviewPoint\n    fields:\n      - name: category\n        type: str\n        description:\n          - language: en\n            text: Category of the point (positive, negative, suggestion)\n      - name: text\n        type: str\n        description:\n          - language: en\n            text: Description of the point\n      - name: importance\n        type: float\n        description:\n          - language: en\n            text: Importance score (0.0 to 1.0)\n\n  - name: AnalysisResult\n    fields:\n      - name: sentiment\n        type: Sentiment\n        description:\n          - language: en\n            text: Overall sentiment analysis\n      - name: key_points\n        type: List[ReviewPoint]\n        description:\n          - language: en\n            text: List of extracted key points\n      - name: suggestions\n        type: List[str]\n        description:\n          - language: en\n            text: Improvement suggestions based on the review\n\nstate_fields:\n  - name: review_text\n    type: str\n    description:\n      - language: en\n        text: Input review text to analyze\n  - name: analysis\n    type: AnalysisResult\n    description:\n      - language: en\n        text: Complete analysis result\n</code></pre></p>"},{"location":"en/tutorials/first-agent/#agent-configuration","title":"Agent Configuration","text":"<p>Create agent.yml: <pre><code>type: atomic\ndescription:\n  - language: en\n    text: Analyzes customer reviews to extract sentiment, key points, and actionable suggestions\n\ninstructions:\n  - language: en\n    description: |\n      Analyze customer reviews to:\n      1. Determine overall sentiment with confidence score\n      2. Extract key positive and negative points\n      3. Generate actionable suggestions\n      4. Assign importance scores to findings\n\n      Maintain objectivity and focus on constructive feedback.\n\nprompt:\n  - language: en\n    template: |\n      Analyze this customer review:\n      {review_text}\n\n      Provide a structured analysis including:\n      1. Overall sentiment (score and confidence)\n      2. Key points (positive and negative)\n      3. Actionable suggestions\n      4. Importance scores for each point\n\n      Focus on specific, actionable insights rather than general observations.\n\nllm:\n  model: openai/gpt-4o-mini\n  max_tokens: 1024\n  retry_count: 3\n\nresponse_fields:\n  - analysis\ninput_fields:\n  - review_text\n</code></pre></p>"},{"location":"en/tutorials/first-agent/#using-the-agent","title":"Using the Agent","text":"<pre><code>from kagura.core.agent import Agent\n\nasync def analyze_review():\n    # Create agent instance\n    agent = Agent.assigner(\"review_analyzer\")\n\n    # Sample review\n    review = \"\"\"\n    The product has great build quality and the battery life is impressive.\n    However, the software is a bit confusing and customer support took too\n    long to respond. Would be better with clearer documentation and faster\n    support response times.\n    \"\"\"\n\n    # Execute analysis\n    result = await agent.execute({\"review_text\": review})\n\n    # Access results\n    analysis = result.analysis\n    print(f\"Sentiment Score: {analysis.sentiment.score}\")\n    print(\"\\nKey Points:\")\n    for point in analysis.key_points:\n        print(f\"- [{point.category}] {point.text} (Importance: {point.importance})\")\n    print(\"\\nSuggestions:\")\n    for suggestion in analysis.suggestions:\n        print(f\"- {suggestion}\")\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(analyze_review())\n</code></pre>"},{"location":"en/tutorials/first-agent/#testing","title":"Testing","text":"<pre><code>import pytest\nfrom kagura.core.agent import Agent\n\n@pytest.mark.asyncio\nasync def test_review_analyzer():\n    agent = Agent.assigner(\"review_analyzer\")\n    test_review = \"Good product but needs improvement in user interface...\"\n\n    result = await agent.execute({\"review_text\": test_review})\n\n    assert result.SUCCESS\n    assert -1.0 &lt;= result.analysis.sentiment.score &lt;= 1.0\n    assert 0.0 &lt;= result.analysis.sentiment.confidence &lt;= 1.0\n    assert len(result.analysis.key_points) &gt; 0\n    assert len(result.analysis.suggestions) &gt; 0\n\n@pytest.mark.asyncio\nasync def test_empty_review():\n    agent = Agent.assigner(\"review_analyzer\")\n\n    result = await agent.execute({\"review_text\": \"\"})\n    assert not result.SUCCESS\n    assert result.ERROR_MESSAGE\n</code></pre>"}]}