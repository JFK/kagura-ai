{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Kagura AI 2.0","text":"<p>Python-First AI Agent Framework with Code Execution</p> <p>Kagura AI 2.0 is a modern framework that makes building AI agents as simple as writing a Python function. With a single <code>@agent</code> decorator, you can transform any async function into a powerful AI agent.</p>"},{"location":"#what-is-kagura-ai","title":"What is Kagura AI?","text":"<p>Kagura AI 2.0 is a modern framework focused on developer experience and simplicity. You write agents in pure Python with familiar async/await patterns.</p> <pre><code>from kagura import agent\n\n@agent\nasync def hello(name: str) -&gt; str:\n    '''Say hello to {{ name }}'''\n    pass\n\nresult = await hello(\"World\")\n# \"Hello, World!\"\n</code></pre>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>One-Line Agent Creation: <code>@agent</code> decorator converts functions to AI agents</li> <li>Jinja2 Templates: Dynamic prompts using template syntax in docstrings</li> <li>Type-Based Parsing: Automatic response conversion using Python type hints</li> <li>Pydantic Support: First-class structured output with Pydantic models</li> <li>Code Execution: Built-in safe Python code generation and execution</li> <li>Interactive REPL: <code>kagura repl</code> for rapid prototyping</li> <li>Multi-LLM Support: Works with OpenAI, Anthropic, Google, and more</li> </ul>"},{"location":"#core-concepts","title":"Core Concepts","text":""},{"location":"#1-agent-decorator","title":"1. Agent Decorator","text":"<p>Transform any async function into an AI agent:</p> <pre><code>@agent\nasync def my_agent(input: str) -&gt; str:\n    '''Process {{ input }}'''\n    pass\n</code></pre> <p>The decorator: - Extracts the function signature - Uses the docstring as a Jinja2 template - Calls the LLM with rendered prompt - Parses the response based on return type</p>"},{"location":"#2-template-engine","title":"2. Template Engine","text":"<p>Use Jinja2 templates in docstrings for dynamic prompts:</p> <pre><code>@agent\nasync def translator(text: str, lang: str = \"ja\") -&gt; str:\n    '''Translate to {{ lang }}: {{ text }}'''\n    pass\n</code></pre>"},{"location":"#3-type-based-parser","title":"3. Type-Based Parser","text":"<p>Automatic response parsing based on return type hints:</p> <pre><code>from pydantic import BaseModel\n\nclass Person(BaseModel):\n    name: str\n    age: int\n\n@agent\nasync def extract_person(text: str) -&gt; Person:\n    '''Extract person info from: {{ text }}'''\n    pass\n</code></pre> <p>Returns a fully validated Pydantic model instance.</p>"},{"location":"#4-code-execution","title":"4. Code Execution","text":"<p>Safe Python code generation and execution:</p> <pre><code>from kagura.agents import execute_code\n\nresult = await execute_code(\"Calculate the factorial of 10\")\n# Generates code, executes safely, returns result\n</code></pre>"},{"location":"#architecture","title":"Architecture","text":"<p>Kagura AI 2.0 follows a clean, layered architecture:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         @agent Decorator            \u2502\n\u2502  (Function \u2192 Agent transformation)  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502       Template Engine (Jinja2)      \u2502\n\u2502    (Docstring \u2192 Rendered prompt)    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         LLM Layer (LiteLLM)         \u2502\n\u2502   (Prompt \u2192 LLM \u2192 Raw response)     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    Parser (Type-based parsing)      \u2502\n\u2502  (Raw response \u2192 Typed Python obj)  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"#design-philosophy","title":"Design Philosophy","text":"<p>Kagura AI 2.0 is built on these principles:</p> <ul> <li>Python-First: No external configuration files</li> <li>Type Safety: Leverages Python's type system</li> <li>Developer Experience: Simple API, fast iteration</li> <li>Composability: Agents are just async functions</li> <li>Explicitness: Clear data flow, no magic</li> </ul>"},{"location":"#get-started","title":"Get Started","text":"<p>Ready to build your first agent?</p> <ul> <li>Installation Guide - Install Kagura AI</li> <li>Quick Start Tutorial - Build your first agent in 5 minutes</li> <li>API Reference - Detailed API documentation</li> <li>Examples - More examples and patterns</li> </ul> <p>Get Started \u2192</p>"},{"location":"en/installation/","title":"Installation","text":""},{"location":"en/installation/#requirements","title":"Requirements","text":"<ul> <li>Python 3.11 or higher</li> <li>pip or uv package manager</li> </ul>"},{"location":"en/installation/#install-from-pypi","title":"Install from PyPI","text":""},{"location":"en/installation/#using-pip","title":"Using pip","text":"<pre><code>pip install kagura-ai\n</code></pre>"},{"location":"en/installation/#using-uv-recommended","title":"Using uv (recommended)","text":"<pre><code>uv add kagura-ai\n</code></pre>"},{"location":"en/installation/#verify-installation","title":"Verify Installation","text":"<p>Check that Kagura AI is installed correctly:</p> <pre><code>kagura version\n</code></pre> <p>You should see output like:</p> <pre><code>Kagura AI v2.0.0-alpha.1\n</code></pre>"},{"location":"en/installation/#set-api-key","title":"Set API Key","text":"<p>Kagura AI uses LiteLLM, which supports multiple LLM providers. You need to set the appropriate API key for your chosen provider.</p>"},{"location":"en/installation/#openai","title":"OpenAI","text":"<pre><code>export OPENAI_API_KEY=\"your-key-here\"\n</code></pre> <p>Or in Python: <pre><code>import os\nos.environ[\"OPENAI_API_KEY\"] = \"your-key-here\"\n</code></pre></p>"},{"location":"en/installation/#anthropic-claude","title":"Anthropic (Claude)","text":"<pre><code>export ANTHROPIC_API_KEY=\"your-key-here\"\n</code></pre>"},{"location":"en/installation/#google-gemini","title":"Google (Gemini)","text":"<pre><code>export GOOGLE_API_KEY=\"your-key-here\"\n</code></pre>"},{"location":"en/installation/#azure-openai","title":"Azure OpenAI","text":"<pre><code>export AZURE_API_KEY=\"your-key-here\"\nexport AZURE_API_BASE=\"https://your-endpoint.openai.azure.com/\"\nexport AZURE_API_VERSION=\"2023-05-15\"\n</code></pre>"},{"location":"en/installation/#test-your-installation","title":"Test Your Installation","text":"<p>Create a simple test file:</p> <pre><code># test_kagura.py\nfrom kagura import agent\n\n@agent\nasync def hello(name: str) -&gt; str:\n    '''Say hello to {{ name }}'''\n    pass\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    async def main():\n        result = await hello(\"Kagura AI\")\n        print(result)\n\n    asyncio.run(main())\n</code></pre> <p>Run it:</p> <pre><code>python test_kagura.py\n</code></pre> <p>If successful, you should see a greeting message.</p>"},{"location":"en/installation/#development-installation","title":"Development Installation","text":"<p>For contributing to Kagura AI or running from source:</p>"},{"location":"en/installation/#clone-repository","title":"Clone Repository","text":"<pre><code>git clone https://github.com/JFK/kagura-ai.git\ncd kagura-ai\n</code></pre>"},{"location":"en/installation/#install-dependencies","title":"Install Dependencies","text":"<p>Using uv (recommended):</p> <pre><code>uv sync --dev\n</code></pre> <p>This will install: - All runtime dependencies - Development dependencies (pytest, pyright, ruff, etc.)</p>"},{"location":"en/installation/#run-tests","title":"Run Tests","text":"<pre><code>pytest\n</code></pre>"},{"location":"en/installation/#type-checking","title":"Type Checking","text":"<pre><code>pyright\n</code></pre>"},{"location":"en/installation/#code-formatting","title":"Code Formatting","text":"<pre><code>ruff check src/\n</code></pre>"},{"location":"en/installation/#optional-dependencies","title":"Optional Dependencies","text":""},{"location":"en/installation/#for-mcp-integration","title":"For MCP Integration","text":"<p>To use Kagura agents with Claude Desktop, Claude Code, and other MCP clients:</p> <pre><code>pip install kagura-ai[mcp]\n</code></pre> <p>Or with uv:</p> <pre><code>uv add \"kagura-ai[mcp]\"\n</code></pre> <p>This installs: - <code>mcp&gt;=1.0.0</code> - Model Context Protocol SDK - <code>jsonschema&gt;=4.20.0</code> - JSON Schema validation</p> <p>See MCP Integration Tutorial for setup guide.</p>"},{"location":"en/installation/#for-development","title":"For Development","text":"<p>Development tools are already included with <code>--dev</code> flag:</p> <ul> <li><code>pytest</code> - Testing framework</li> <li><code>pytest-asyncio</code> - Async test support</li> <li><code>pytest-cov</code> - Code coverage</li> <li><code>pyright</code> - Type checker</li> <li><code>ruff</code> - Linter and formatter</li> </ul>"},{"location":"en/installation/#for-documentation","title":"For Documentation","text":"<p>To build documentation locally:</p> <pre><code>pip install mkdocs mkdocs-material\nmkdocs serve\n</code></pre> <p>Then visit <code>http://localhost:8000</code></p>"},{"location":"en/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"en/installation/#import-error","title":"Import Error","text":"<p>If you get import errors:</p> <pre><code>ImportError: cannot import name 'agent' from 'kagura'\n</code></pre> <p>Make sure you're using Python 3.11+:</p> <pre><code>python --version\n</code></pre>"},{"location":"en/installation/#api-key-not-found","title":"API Key Not Found","text":"<p>If you see authentication errors:</p> <pre><code>AuthenticationError: The api_key client option must be set\n</code></pre> <p>Set your API key as described above. The key must be set before importing kagura.</p>"},{"location":"en/installation/#type-errors","title":"Type Errors","text":"<p>If pyright shows errors in your IDE:</p> <ol> <li>Make sure your Python interpreter is set to 3.11+</li> <li>Ensure kagura-ai is installed in your environment</li> <li>Restart your IDE/language server</li> </ol>"},{"location":"en/installation/#upgrading","title":"Upgrading","text":""},{"location":"en/installation/#from-pypi","title":"From PyPI","text":"<pre><code>pip install --upgrade kagura-ai\n</code></pre> <p>or with uv:</p> <pre><code>uv add kagura-ai --upgrade\n</code></pre>"},{"location":"en/installation/#from-git","title":"From Git","text":"<pre><code>cd kagura-ai\ngit pull\nuv sync --dev\n</code></pre>"},{"location":"en/installation/#uninstalling","title":"Uninstalling","text":"<pre><code>pip uninstall kagura-ai\n</code></pre> <p>or with uv:</p> <pre><code>uv remove kagura-ai\n</code></pre>"},{"location":"en/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Quick Start - Build your first agent</li> <li>API Reference - Detailed API documentation</li> <li>Examples - Example code</li> </ul>"},{"location":"en/quickstart/","title":"Quick Start","text":"<p>Get started with Kagura AI 2.0 in 5 minutes.</p>"},{"location":"en/quickstart/#installation","title":"Installation","text":"<pre><code>pip install kagura-ai\n</code></pre> <p>or with uv:</p> <pre><code>uv add kagura-ai\n</code></pre>"},{"location":"en/quickstart/#set-api-key","title":"Set API Key","text":"<p>Kagura AI uses LiteLLM, which supports multiple LLM providers. Set your API key:</p> <pre><code>export OPENAI_API_KEY=\"your-key-here\"\n</code></pre>"},{"location":"en/quickstart/#your-first-agent","title":"Your First Agent","text":"<p>Create a simple conversational agent:</p> <pre><code># chat.py\nfrom kagura import agent\n\n@agent\nasync def chat(message: str) -&gt; str:\n    '''You are a friendly AI assistant. Respond to: {{ message }}'''\n    pass\n\n# Run\nif __name__ == \"__main__\":\n    import asyncio\n\n    async def main():\n        response = await chat(\"Hello! How are you?\")\n        print(response)\n\n    asyncio.run(main())\n</code></pre> <p>Run it: <pre><code>python chat.py\n</code></pre></p> <p>Output: <pre><code>Hello! I'm doing well, thank you for asking! How can I help you today?\n</code></pre></p>"},{"location":"en/quickstart/#structured-output-with-pydantic","title":"Structured Output with Pydantic","text":"<p>Extract structured data using Pydantic models:</p> <pre><code># extract.py\nfrom kagura import agent\nfrom pydantic import BaseModel\n\nclass Person(BaseModel):\n    name: str\n    age: int\n    occupation: str\n\n@agent\nasync def extract_person(text: str) -&gt; Person:\n    '''Extract person information from: {{ text }}'''\n    pass\n\n# Use it\nif __name__ == \"__main__\":\n    import asyncio\n\n    async def main():\n        result = await extract_person(\n            \"Alice is 30 years old and works as a software engineer\"\n        )\n        print(f\"Name: {result.name}\")\n        print(f\"Age: {result.age}\")\n        print(f\"Occupation: {result.occupation}\")\n\n    asyncio.run(main())\n</code></pre> <p>Output: <pre><code>Name: Alice\nAge: 30\nOccupation: software engineer\n</code></pre></p>"},{"location":"en/quickstart/#multiple-parameters","title":"Multiple Parameters","text":"<p>Use multiple parameters in your templates:</p> <pre><code>from kagura import agent\n\n@agent\nasync def translator(text: str, target_lang: str = \"ja\") -&gt; str:\n    '''Translate to {{ target_lang }}: {{ text }}'''\n    pass\n\n# Use with default\nresult = await translator(\"Hello, world!\")\n# Output: \"\u3053\u3093\u306b\u3061\u306f\u3001\u4e16\u754c\uff01\"\n\n# Use with custom language\nresult = await translator(\"Hello, world!\", target_lang=\"fr\")\n# Output: \"Bonjour, le monde!\"\n</code></pre>"},{"location":"en/quickstart/#code-execution","title":"Code Execution","text":"<p>Generate and execute Python code:</p> <pre><code>from kagura.agents import execute_code\n\nresult = await execute_code(\"Calculate the factorial of 10\")\n\nif result[\"success\"]:\n    print(f\"Code:\\n{result['code']}\\n\")\n    print(f\"Result: {result['result']}\")\nelse:\n    print(f\"Error: {result['error']}\")\n</code></pre> <p>Output: <pre><code>Code:\nimport math\nresult = math.factorial(10)\n\nResult: 3628800\n</code></pre></p>"},{"location":"en/quickstart/#interactive-repl","title":"Interactive REPL","text":"<p>Try the interactive REPL for rapid prototyping:</p> <pre><code>kagura repl\n</code></pre> <p>Available commands: - <code>/help</code> - Show available commands - <code>/agents</code> - List defined agents - <code>/exit</code> - Exit REPL - <code>/clear</code> - Clear screen</p> <p>Example REPL session:</p> <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Kagura AI REPL                       \u2502\n\u2502 Python-First AI Agent Framework      \u2502\n\u2502                                      \u2502\n\u2502 Type /help for commands, /exit to    \u2502\n\u2502 quit                                 \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n&gt;&gt;&gt; @agent\n... async def hello(name: str) -&gt; str:\n...     '''Say hello to {{ name }}'''\n...     pass\n...\n\n&gt;&gt;&gt; await hello(\"World\")\nHello, World!\n\n&gt;&gt;&gt; /exit\nGoodbye!\n</code></pre>"},{"location":"en/quickstart/#list-operations","title":"List Operations","text":"<p>Return lists from agents:</p> <pre><code>@agent\nasync def extract_keywords(text: str) -&gt; list[str]:\n    '''Extract keywords from: {{ text }}'''\n    pass\n\nkeywords = await extract_keywords(\n    \"Python is a programming language used for AI and web development\"\n)\nprint(keywords)\n# ['Python', 'programming language', 'AI', 'web development']\n</code></pre>"},{"location":"en/quickstart/#complex-data-structures","title":"Complex Data Structures","text":"<p>Work with nested Pydantic models:</p> <pre><code>from pydantic import BaseModel\nfrom typing import List\n\nclass Task(BaseModel):\n    title: str\n    priority: int\n    completed: bool\n\nclass Project(BaseModel):\n    name: str\n    tasks: List[Task]\n\n@agent\nasync def plan_project(goal: str) -&gt; Project:\n    '''Create a project plan for: {{ goal }}'''\n    pass\n\nproject = await plan_project(\"Build a web application\")\nprint(f\"Project: {project.name}\")\nfor task in project.tasks:\n    status = \"\u2713\" if task.completed else \"\u25cb\"\n    print(f\"{status} [{task.priority}] {task.title}\")\n</code></pre>"},{"location":"en/quickstart/#use-in-claude-desktop","title":"Use in Claude Desktop","text":"<p>New in v2.1.0: Integrate your Kagura agents with Claude Desktop!</p>"},{"location":"en/quickstart/#1-install-mcp-support","title":"1. Install MCP Support","text":"<pre><code>pip install kagura-ai[mcp]\n</code></pre>"},{"location":"en/quickstart/#2-create-an-agent","title":"2. Create an Agent","text":"<pre><code># my_agents.py\nfrom kagura import agent\n\n@agent\nasync def analyze_code(code: str) -&gt; str:\n    \"\"\"Analyze code quality and suggest improvements\"\"\"\n    pass\n</code></pre>"},{"location":"en/quickstart/#3-configure-claude-desktop","title":"3. Configure Claude Desktop","text":"<p>Add to Claude Desktop config file:</p> <p>macOS: <code>~/Library/Application Support/Claude/claude_desktop_config.json</code></p> <pre><code>{\n  \"mcpServers\": {\n    \"kagura\": {\n      \"command\": \"kagura\",\n      \"args\": [\"mcp\", \"serve\"],\n      \"env\": {\n        \"OPENAI_API_KEY\": \"your-api-key\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"en/quickstart/#4-use-in-claude-desktop","title":"4. Use in Claude Desktop","text":"<p>Restart Claude Desktop, and your agents are available as tools!</p> <pre><code>You: Can you analyze this Python code?\n\ndef calc(x):\n    return x * 2 + 3\n\nClaude: [Uses kagura_analyze_code tool]\n</code></pre> <p>See MCP Integration Tutorial for details.</p>"},{"location":"en/quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>MCP Integration - Use agents in Claude Desktop</li> <li>API Reference - Detailed API documentation</li> <li>Examples - More examples and patterns</li> <li>Code Executor - Deep dive into code execution</li> <li>REPL Guide - Advanced REPL usage</li> </ul>"},{"location":"en/api/","title":"API Reference","text":"<p>Complete API documentation for Kagura AI 2.0.</p>"},{"location":"en/api/#core-components","title":"Core Components","text":""},{"location":"en/api/#agent-decorator","title":"@agent Decorator","text":"<p>Convert async functions into AI agents with automatic LLM integration.</p> <pre><code>from kagura import agent\n\n@agent\nasync def hello(name: str) -&gt; str:\n    '''Say hello to {{ name }}'''\n    pass\n</code></pre> <p>Key Features: - One-line agent creation - Type-based response parsing - Jinja2 template support - Multi-LLM support via LiteLLM</p> <p>Read more \u2192</p>"},{"location":"en/api/#code-executor","title":"Code Executor","text":"<p>Safe Python code generation and execution.</p> <pre><code>from kagura.agents import execute_code\n\nresult = await execute_code(\"Calculate factorial of 10\")\nprint(result[\"result\"])  # 3628800\n</code></pre> <p>Key Features: - Natural language \u2192 Python code - AST-based security validation - Resource limits (timeout, memory) - Safe module whitelist</p> <p>Read more \u2192</p>"},{"location":"en/api/#cli-commands","title":"CLI Commands","text":"<p>Command-line interface for Kagura AI.</p> <pre><code># Start interactive REPL\nkagura repl\n\n# Check version\nkagura version\n</code></pre> <p>Key Features: - Interactive REPL for rapid prototyping - Multi-line input support - Syntax highlighting - Command history</p> <p>Read more \u2192</p>"},{"location":"en/api/#quick-links","title":"Quick Links","text":"<ul> <li>Getting Started - Build your first agent</li> <li>Tutorials - Step-by-step guides</li> <li>Examples - Code examples</li> <li>FAQ - Frequently asked questions</li> </ul>"},{"location":"en/api/#api-overview","title":"API Overview","text":""},{"location":"en/api/#core-functions","title":"Core Functions","text":"Function Description <code>@agent</code> Convert function to AI agent <code>execute_code()</code> Generate and execute Python code"},{"location":"en/api/#configuration","title":"Configuration","text":"<p>Agents can be configured with: - <code>model</code>: LLM model to use - <code>temperature</code>: Sampling temperature - <code>max_tokens</code>: Maximum response tokens</p> <p>Example:</p> <pre><code>@agent(model=\"gpt-4o\", temperature=0.5)\nasync def my_agent(query: str) -&gt; str:\n    '''Answer: {{ query }}'''\n    pass\n</code></pre>"},{"location":"en/api/#type-support","title":"Type Support","text":"<p>Supported return types:</p> Type Example Description <code>str</code> <code>-&gt; str</code> Plain text response <code>int</code> <code>-&gt; int</code> Integer value <code>float</code> <code>-&gt; float</code> Floating point number <code>bool</code> <code>-&gt; bool</code> Boolean value <code>list[T]</code> <code>-&gt; list[str]</code> List of items <code>dict</code> <code>-&gt; dict</code> Dictionary <code>BaseModel</code> <code>-&gt; Person</code> Pydantic model <code>Optional[T]</code> <code>-&gt; Optional[str]</code> Optional value"},{"location":"en/api/#template-syntax","title":"Template Syntax","text":"<p>Agent docstrings use Jinja2 syntax:</p> <pre><code>@agent\nasync def greet(name: str, time: str = \"morning\") -&gt; str:\n    '''\n    Good {{ time }}, {{ name }}!\n    {% if time == \"evening\" %}\n    Hope you had a great day.\n    {% endif %}\n    '''\n    pass\n</code></pre> <p>Supported Jinja2 features: - Variable interpolation: <code>{{ variable }}</code> - Conditionals: <code>{% if condition %}</code> - Loops: <code>{% for item in items %}</code> - Filters: <code>{{ text|upper }}</code></p>"},{"location":"en/api/#error-handling","title":"Error Handling","text":"<p>All agents can raise these exceptions:</p> <pre><code>from litellm import APIError\nfrom pydantic import ValidationError\n\ntry:\n    result = await my_agent(\"input\")\nexcept APIError as e:\n    # LLM API error (auth, rate limit, etc.)\n    print(f\"API error: {e}\")\nexcept ValidationError as e:\n    # Pydantic parsing error\n    print(f\"Validation error: {e}\")\nexcept Exception as e:\n    # Other errors\n    print(f\"Unexpected error: {e}\")\n</code></pre>"},{"location":"en/api/#environment-variables","title":"Environment Variables","text":"<p>Kagura AI respects these environment variables:</p> Variable Description <code>OPENAI_API_KEY</code> OpenAI API key <code>ANTHROPIC_API_KEY</code> Anthropic (Claude) API key <code>GOOGLE_API_KEY</code> Google (Gemini) API key <code>AZURE_API_KEY</code> Azure OpenAI API key <p>Set them before running your agents:</p> <pre><code>export OPENAI_API_KEY=\"your-key-here\"\npython my_agent.py\n</code></pre>"},{"location":"en/api/#best-practices","title":"Best Practices","text":""},{"location":"en/api/#1-use-type-hints","title":"1. Use Type Hints","text":"<p>Always specify return types for automatic parsing:</p> <pre><code># Good\n@agent\nasync def extract_keywords(text: str) -&gt; list[str]:\n    '''Extract keywords from: {{ text }}'''\n    pass\n\n# Less good\n@agent\nasync def extract_keywords(text: str):  # No return type\n    '''Extract keywords from: {{ text }}'''\n    pass\n</code></pre>"},{"location":"en/api/#2-clear-instructions","title":"2. Clear Instructions","text":"<p>Write explicit docstrings:</p> <pre><code># Good\n@agent\nasync def summarize(text: str, max_words: int) -&gt; str:\n    '''Summarize the following text in {{ max_words }} words or less.\n\n    Text: {{ text }}\n    '''\n    pass\n\n# Less clear\n@agent\nasync def summarize(text: str, max_words: int) -&gt; str:\n    '''Summarize {{ text }} in {{ max_words }} words'''\n    pass\n</code></pre>"},{"location":"en/api/#3-pydantic-models","title":"3. Pydantic Models","text":"<p>Use Pydantic for structured data:</p> <pre><code>from pydantic import BaseModel, Field\n\nclass Person(BaseModel):\n    name: str = Field(description=\"Full name\")\n    age: int = Field(ge=0, le=150, description=\"Age in years\")\n    email: str = Field(pattern=r\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$\")\n\n@agent\nasync def extract_person(text: str) -&gt; Person:\n    '''Extract person information from: {{ text }}'''\n    pass\n</code></pre>"},{"location":"en/api/#4-error-handling","title":"4. Error Handling","text":"<p>Always handle errors in production:</p> <pre><code>async def safe_agent_call():\n    try:\n        result = await my_agent(\"input\")\n        return {\"success\": True, \"data\": result}\n    except Exception as e:\n        logger.error(f\"Agent failed: {e}\")\n        return {\"success\": False, \"error\": str(e)}\n</code></pre>"},{"location":"en/api/#version-information","title":"Version Information","text":"<p>Check Kagura AI version:</p> <pre><code>import kagura\nprint(kagura.__version__)  # \"2.0.0-alpha.1\"\n</code></pre> <p>Or via CLI:</p> <pre><code>kagura version\n</code></pre>"},{"location":"en/api/#support","title":"Support","text":"<ul> <li>GitHub Issues</li> <li>Discussion Forum</li> <li>Documentation</li> </ul>"},{"location":"en/api/#related","title":"Related","text":"<ul> <li>Quick Start Guide</li> <li>Tutorials</li> <li>Examples</li> <li>FAQ</li> </ul>"},{"location":"en/api/agent/","title":"@agent Decorator","text":"<p>The <code>@agent</code> decorator is the core of Kagura AI 2.0, converting any async function into an AI agent with automatic LLM integration.</p>"},{"location":"en/api/agent/#overview","title":"Overview","text":"<p>The decorator: 1. Extracts function signature and parameters 2. Uses the docstring as a Jinja2 template 3. Calls the LLM with the rendered prompt 4. Parses the response based on return type hints 5. Returns a properly typed result</p>"},{"location":"en/api/agent/#signature","title":"Signature","text":"<pre><code>def agent(\n    fn: Callable = None,\n    *,\n    model: str = \"gpt-4o-mini\",\n    temperature: float = 0.7,\n    max_tokens: int | None = None,\n    **kwargs\n) -&gt; Callable\n</code></pre>"},{"location":"en/api/agent/#parameters","title":"Parameters","text":""},{"location":"en/api/agent/#required-parameters","title":"Required Parameters","text":"<ul> <li>fn (<code>Callable</code>): The async function to convert into an agent. When using <code>@agent</code> without parentheses, this is automatically passed.</li> </ul>"},{"location":"en/api/agent/#optional-parameters","title":"Optional Parameters","text":"<ul> <li>model (<code>str</code>, default: <code>\"gpt-4o-mini\"</code>): The LLM model to use. Supports any model from LiteLLM:</li> <li>OpenAI: <code>\"gpt-4o\"</code>, <code>\"gpt-4o-mini\"</code>, <code>\"gpt-3.5-turbo\"</code></li> <li>Anthropic: <code>\"claude-3-5-sonnet-20241022\"</code>, <code>\"claude-3-haiku-20240307\"</code></li> <li>Google: <code>\"gemini/gemini-pro\"</code>, <code>\"gemini/gemini-1.5-flash\"</code></li> <li> <p>Ollama: <code>\"ollama/llama3.2\"</code>, <code>\"ollama/gemma2\"</code></p> </li> <li> <p>temperature (<code>float</code>, default: <code>0.7</code>): Sampling temperature (0.0 to 2.0). Lower values make output more focused and deterministic.</p> </li> <li> <p>max_tokens (<code>int | None</code>, default: <code>None</code>): Maximum tokens in the response. If not specified, uses the model's default.</p> </li> <li> <p>kwargs: Additional parameters passed to LiteLLM's <code>completion()</code> function.</p> </li> </ul>"},{"location":"en/api/agent/#return-value","title":"Return Value","text":"<p>Returns a wrapped async function with the same signature as the original, but with AI-powered behavior.</p>"},{"location":"en/api/agent/#usage","title":"Usage","text":""},{"location":"en/api/agent/#basic-usage","title":"Basic Usage","text":"<pre><code>from kagura import agent\n\n@agent\nasync def hello(name: str) -&gt; str:\n    '''Say hello to {{ name }}'''\n    pass\n\nresult = await hello(\"World\")\nprint(result)  # \"Hello, World! How can I help you today?\"\n</code></pre>"},{"location":"en/api/agent/#with-custom-model","title":"With Custom Model","text":"<pre><code>@agent(model=\"gpt-4o\")\nasync def analyze(text: str) -&gt; str:\n    '''Analyze the sentiment of: {{ text }}'''\n    pass\n\nresult = await analyze(\"I love this product!\")\nprint(result)  # \"Positive sentiment...\"\n</code></pre>"},{"location":"en/api/agent/#with-temperature-control","title":"With Temperature Control","text":"<pre><code># More deterministic (lower temperature)\n@agent(temperature=0.2)\nasync def translate(text: str, lang: str) -&gt; str:\n    '''Translate to {{ lang }}: {{ text }}'''\n    pass\n\n# More creative (higher temperature)\n@agent(temperature=1.5)\nasync def creative_story(topic: str) -&gt; str:\n    '''Write a creative story about: {{ topic }}'''\n    pass\n</code></pre>"},{"location":"en/api/agent/#with-pydantic-models","title":"With Pydantic Models","text":"<pre><code>from pydantic import BaseModel\n\nclass Person(BaseModel):\n    name: str\n    age: int\n    occupation: str\n\n@agent\nasync def extract_person(text: str) -&gt; Person:\n    '''Extract person information from: {{ text }}'''\n    pass\n\nperson = await extract_person(\"Alice is 30 years old and works as a software engineer\")\nprint(f\"{person.name}, {person.age}, {person.occupation}\")\n# Output: Alice, 30, software engineer\n</code></pre>"},{"location":"en/api/agent/#with-list-return-types","title":"With List Return Types","text":"<pre><code>@agent\nasync def extract_keywords(text: str) -&gt; list[str]:\n    '''Extract keywords from: {{ text }}'''\n    pass\n\nkeywords = await extract_keywords(\"Python is a programming language for AI\")\nprint(keywords)\n# Output: ['Python', 'programming language', 'AI']\n</code></pre>"},{"location":"en/api/agent/#multiple-parameters","title":"Multiple Parameters","text":"<pre><code>@agent\nasync def summarize(text: str, max_words: int = 50) -&gt; str:\n    '''Summarize in {{ max_words }} words or less: {{ text }}'''\n    pass\n\nsummary = await summarize(\"Long text here...\", max_words=30)\n</code></pre>"},{"location":"en/api/agent/#docstring-templates","title":"Docstring Templates","text":"<p>The docstring is treated as a Jinja2 template. All function parameters are available as template variables.</p>"},{"location":"en/api/agent/#simple-variable-interpolation","title":"Simple Variable Interpolation","text":"<pre><code>@agent\nasync def greet(name: str, greeting: str = \"Hello\") -&gt; str:\n    '''{{ greeting }}, {{ name }}! How are you?'''\n    pass\n</code></pre>"},{"location":"en/api/agent/#conditional-logic","title":"Conditional Logic","text":"<pre><code>@agent\nasync def format_response(query: str, formal: bool = False) -&gt; str:\n    '''\n    {% if formal %}\n    Respond formally to: {{ query }}\n    {% else %}\n    Respond casually to: {{ query }}\n    {% endif %}\n    '''\n    pass\n</code></pre>"},{"location":"en/api/agent/#loops","title":"Loops","text":"<pre><code>@agent\nasync def process_items(items: list[str]) -&gt; str:\n    '''\n    Process the following items:\n    {% for item in items %}\n    - {{ item }}\n    {% endfor %}\n    '''\n    pass\n</code></pre>"},{"location":"en/api/agent/#type-based-response-parsing","title":"Type-Based Response Parsing","text":"<p>The decorator automatically parses LLM responses based on the return type annotation:</p> Return Type Parsing Behavior <code>str</code> Returns raw response <code>int</code> Parses as integer <code>float</code> Parses as float <code>bool</code> Parses as boolean <code>list[T]</code> Parses as list of type T <code>dict[K, V]</code> Parses as dictionary <code>Pydantic Model</code> Validates and returns model instance <code>Optional[T]</code> Allows None values"},{"location":"en/api/agent/#error-handling","title":"Error Handling","text":""},{"location":"en/api/agent/#llm-api-errors","title":"LLM API Errors","text":"<pre><code>from litellm import APIError\n\n@agent\nasync def my_agent(query: str) -&gt; str:\n    '''Process: {{ query }}'''\n    pass\n\ntry:\n    result = await my_agent(\"test\")\nexcept APIError as e:\n    print(f\"LLM API error: {e}\")\n</code></pre>"},{"location":"en/api/agent/#parsing-errors","title":"Parsing Errors","text":"<pre><code>from pydantic import ValidationError\n\n@agent\nasync def extract_data(text: str) -&gt; Person:\n    '''Extract person from: {{ text }}'''\n    pass\n\ntry:\n    result = await extract_data(\"invalid text\")\nexcept ValidationError as e:\n    print(f\"Failed to parse response: {e}\")\n</code></pre>"},{"location":"en/api/agent/#advanced-features","title":"Advanced Features","text":""},{"location":"en/api/agent/#accessing-agent-metadata","title":"Accessing Agent Metadata","text":"<pre><code>@agent(model=\"gpt-4o\", temperature=0.5)\nasync def my_agent(query: str) -&gt; str:\n    '''Answer: {{ query }}'''\n    pass\n\n# Check if function is an agent\nprint(hasattr(my_agent, '_is_agent'))  # True\n\n# Access configuration\nprint(my_agent._model)  # \"gpt-4o\"\n</code></pre>"},{"location":"en/api/agent/#agent-composition","title":"Agent Composition","text":"<p>Agents can call other agents:</p> <pre><code>@agent\nasync def extract_topic(text: str) -&gt; str:\n    '''Extract the main topic from: {{ text }}'''\n    pass\n\n@agent\nasync def elaborate(topic: str) -&gt; str:\n    '''Elaborate on: {{ topic }}'''\n    pass\n\n# Compose agents\ntext = \"Quantum computing is revolutionary\"\ntopic = await extract_topic(text)\nelaboration = await elaborate(topic)\n</code></pre>"},{"location":"en/api/agent/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Clear Docstrings: Write explicit instructions in the docstring    <pre><code># Good\n'''Extract the person's name, age, and occupation from: {{ text }}'''\n\n# Less clear\n'''Process {{ text }}'''\n</code></pre></p> </li> <li> <p>Appropriate Return Types: Use the most specific type possible    <pre><code># Good\nasync def extract_person(text: str) -&gt; Person:\n\n# Less good\nasync def extract_person(text: str) -&gt; dict:\n</code></pre></p> </li> <li> <p>Temperature Selection:</p> </li> <li>Use low temperature (0.0-0.3) for factual, deterministic tasks</li> <li>Use medium temperature (0.7-1.0) for balanced responses</li> <li> <p>Use high temperature (1.0-2.0) for creative tasks</p> </li> <li> <p>Model Selection:</p> </li> <li>Use <code>gpt-4o-mini</code> for simple tasks (faster, cheaper)</li> <li>Use <code>gpt-4o</code> or <code>claude-3-5-sonnet</code> for complex reasoning</li> <li>Use <code>claude-3-haiku</code> for fast, cost-effective responses</li> </ol>"},{"location":"en/api/agent/#related","title":"Related","text":"<ul> <li>Template Engine - Jinja2 templating details</li> <li>Type Parser - Response parsing details</li> <li>Quick Start - Getting started guide</li> </ul>"},{"location":"en/api/cli/","title":"CLI Commands","text":"<p>Kagura AI 2.0 provides a command-line interface for version checking, running agents, and interactive development.</p>"},{"location":"en/api/cli/#overview","title":"Overview","text":"<p>The CLI is built with Click and provides: - Version information - Interactive REPL for rapid prototyping - Agent file execution (future)</p>"},{"location":"en/api/cli/#installation","title":"Installation","text":"<p>The CLI is automatically installed with Kagura AI:</p> <pre><code>pip install kagura-ai\n</code></pre> <p>Verify installation:</p> <pre><code>kagura --version\n</code></pre>"},{"location":"en/api/cli/#commands","title":"Commands","text":""},{"location":"en/api/cli/#kagura","title":"kagura","text":"<p>Main command group.</p> <pre><code>kagura [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options: - <code>--help</code>: Show help message - <code>--version</code>: Show version information</p>"},{"location":"en/api/cli/#kagura-version","title":"kagura version","text":"<p>Display Kagura AI version information.</p> <pre><code>kagura version\n</code></pre> <p>Output: <pre><code>Kagura AI v2.0.0-alpha.1\n</code></pre></p>"},{"location":"en/api/cli/#kagura-repl","title":"kagura repl","text":"<p>Start an interactive REPL (Read-Eval-Print Loop) for rapid agent prototyping.</p> <pre><code>kagura repl [OPTIONS]\n</code></pre> <p>Options: - <code>--model TEXT</code>: Default LLM model to use (default: <code>gpt-4o-mini</code>) - <code>--temperature FLOAT</code>: Default temperature (default: <code>0.7</code>) - <code>--help</code>: Show help message</p> <p>Example: <pre><code># Start REPL with default settings\nkagura repl\n\n# Start with custom model\nkagura repl --model gpt-4o\n\n# Start with higher temperature\nkagura repl --temperature 1.0\n</code></pre></p>"},{"location":"en/api/cli/#interactive-repl","title":"Interactive REPL","text":"<p>The REPL provides an interactive Python environment optimized for AI agent development.</p>"},{"location":"en/api/cli/#starting-the-repl","title":"Starting the REPL","text":"<pre><code>kagura repl\n</code></pre> <p>Welcome screen: <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Kagura AI REPL                       \u2502\n\u2502 Python-First AI Agent Framework      \u2502\n\u2502                                      \u2502\n\u2502 Type /help for commands, /exit to    \u2502\n\u2502 quit                                 \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n&gt;&gt;&gt;\n</code></pre></p>"},{"location":"en/api/cli/#repl-commands","title":"REPL Commands","text":"<p>Commands start with <code>/</code> and provide special functionality:</p>"},{"location":"en/api/cli/#help","title":"/help","text":"<p>Show available commands and usage information.</p> <pre><code>&gt;&gt;&gt; /help\n</code></pre> <p>Output: <pre><code>Available Commands:\n  /help      - Show this help message\n  /agents    - List all defined agents\n  /exit      - Exit REPL\n  /clear     - Clear screen\n  /model     - Show or set default model\n  /temp      - Show or set default temperature\n</code></pre></p>"},{"location":"en/api/cli/#agents","title":"/agents","text":"<p>List all agents defined in the current session.</p> <pre><code>&gt;&gt;&gt; /agents\n</code></pre> <p>Output: <pre><code>Defined Agents:\n  hello(name: str) -&gt; str\n  translate(text: str, lang: str) -&gt; str\n  extract_person(text: str) -&gt; Person\n</code></pre></p>"},{"location":"en/api/cli/#exit","title":"/exit","text":"<p>Exit the REPL.</p> <pre><code>&gt;&gt;&gt; /exit\n</code></pre> <p>Output: <pre><code>Goodbye!\n</code></pre></p>"},{"location":"en/api/cli/#clear","title":"/clear","text":"<p>Clear the terminal screen.</p> <pre><code>&gt;&gt;&gt; /clear\n</code></pre>"},{"location":"en/api/cli/#model","title":"/model","text":"<p>Show or set the default model for new agents.</p> <pre><code>&gt;&gt;&gt; /model\nCurrent model: gpt-4o-mini\n\n&gt;&gt;&gt; /model gpt-4o\nModel changed to: gpt-4o\n</code></pre>"},{"location":"en/api/cli/#temp","title":"/temp","text":"<p>Show or set the default temperature.</p> <pre><code>&gt;&gt;&gt; /temp\nCurrent temperature: 0.7\n\n&gt;&gt;&gt; /temp 1.0\nTemperature changed to: 1.0\n</code></pre>"},{"location":"en/api/cli/#defining-agents-in-repl","title":"Defining Agents in REPL","text":"<p>Use Python syntax to define agents:</p> <pre><code>&gt;&gt;&gt; from kagura import agent\n&gt;&gt;&gt;\n&gt;&gt;&gt; @agent\n... async def hello(name: str) -&gt; str:\n...     '''Say hello to {{ name }}'''\n...     pass\n...\nAgent 'hello' defined\n\n&gt;&gt;&gt; await hello(\"World\")\nHello, World! How can I help you today?\n</code></pre>"},{"location":"en/api/cli/#multi-line-input","title":"Multi-line Input","text":"<p>The REPL supports multi-line input for complex definitions:</p> <pre><code>&gt;&gt;&gt; from pydantic import BaseModel\n&gt;&gt;&gt;\n&gt;&gt;&gt; class Person(BaseModel):\n...     name: str\n...     age: int\n...\n&gt;&gt;&gt;\n&gt;&gt;&gt; @agent\n... async def extract_person(text: str) -&gt; Person:\n...     '''Extract person info from: {{ text }}'''\n...     pass\n...\nAgent 'extract_person' defined\n\n&gt;&gt;&gt; result = await extract_person(\"Alice is 30 years old\")\n&gt;&gt;&gt; result.name\nAlice\n&gt;&gt;&gt; result.age\n30\n</code></pre>"},{"location":"en/api/cli/#importing-modules","title":"Importing Modules","text":"<p>Import any Python module as usual:</p> <pre><code>&gt;&gt;&gt; from kagura import agent\n&gt;&gt;&gt; from pydantic import BaseModel\n&gt;&gt;&gt; from typing import List\n&gt;&gt;&gt; import json\n</code></pre>"},{"location":"en/api/cli/#executing-code","title":"Executing Code","text":"<p>Execute arbitrary Python code:</p> <pre><code>&gt;&gt;&gt; x = 10\n&gt;&gt;&gt; y = 20\n&gt;&gt;&gt; x + y\n30\n\n&gt;&gt;&gt; [i**2 for i in range(5)]\n[0, 1, 4, 9, 16]\n</code></pre>"},{"location":"en/api/cli/#using-code-execution","title":"Using Code Execution","text":"<pre><code>&gt;&gt;&gt; from kagura.agents import execute_code\n&gt;&gt;&gt;\n&gt;&gt;&gt; result = await execute_code(\"Calculate fibonacci(10)\")\n&gt;&gt;&gt; result[\"result\"]\n55\n</code></pre>"},{"location":"en/api/cli/#repl-features","title":"REPL Features","text":""},{"location":"en/api/cli/#syntax-highlighting","title":"Syntax Highlighting","text":"<p>Code is syntax-highlighted using Pygments for better readability.</p>"},{"location":"en/api/cli/#command-history","title":"Command History","text":"<p>Use arrow keys to navigate command history: - \u2191 (Up): Previous command - \u2193 (Down): Next command</p>"},{"location":"en/api/cli/#auto-completion","title":"Auto-completion","text":"<p>Tab completion for: - Python keywords - Variable names - Function names - Module names</p>"},{"location":"en/api/cli/#error-handling","title":"Error Handling","text":"<p>Errors are displayed with helpful messages:</p> <pre><code>&gt;&gt;&gt; await hello()\nError: hello() missing 1 required positional argument: 'name'\n\n&gt;&gt;&gt; result = await extract_person(\"invalid\")\nError: Validation error - could not parse response\n</code></pre>"},{"location":"en/api/cli/#examples","title":"Examples","text":""},{"location":"en/api/cli/#example-1-simple-agent","title":"Example 1: Simple Agent","text":"<pre><code>$ kagura repl\n&gt;&gt;&gt; from kagura import agent\n&gt;&gt;&gt;\n&gt;&gt;&gt; @agent\n... async def sentiment(text: str) -&gt; str:\n...     '''Analyze sentiment of: {{ text }}'''\n...     pass\n...\n&gt;&gt;&gt; await sentiment(\"I love this product!\")\nThe sentiment is overwhelmingly positive...\n</code></pre>"},{"location":"en/api/cli/#example-2-data-extraction","title":"Example 2: Data Extraction","text":"<pre><code>$ kagura repl\n&gt;&gt;&gt; from kagura import agent\n&gt;&gt;&gt; from pydantic import BaseModel\n&gt;&gt;&gt; from typing import List\n&gt;&gt;&gt;\n&gt;&gt;&gt; class Task(BaseModel):\n...     title: str\n...     priority: int\n...\n&gt;&gt;&gt; @agent\n... async def extract_tasks(text: str) -&gt; List[Task]:\n...     '''Extract tasks from: {{ text }}'''\n...     pass\n...\n&gt;&gt;&gt; tasks = await extract_tasks(\"1. Fix bug (high), 2. Write docs (low)\")\n&gt;&gt;&gt; for task in tasks:\n...     print(f\"{task.title}: Priority {task.priority}\")\n...\nFix bug: Priority 3\nWrite docs: Priority 1\n</code></pre>"},{"location":"en/api/cli/#example-3-code-generation","title":"Example 3: Code Generation","text":"<pre><code>$ kagura repl --model gpt-4o\n&gt;&gt;&gt; from kagura.agents import execute_code\n&gt;&gt;&gt;\n&gt;&gt;&gt; result = await execute_code(\"Calculate prime numbers up to 20\")\n&gt;&gt;&gt; result[\"result\"]\n[2, 3, 5, 7, 11, 13, 17, 19]\n</code></pre>"},{"location":"en/api/cli/#example-4-agent-composition","title":"Example 4: Agent Composition","text":"<pre><code>$ kagura repl\n&gt;&gt;&gt; from kagura import agent\n&gt;&gt;&gt;\n&gt;&gt;&gt; @agent\n... async def summarize(text: str) -&gt; str:\n...     '''Summarize in one sentence: {{ text }}'''\n...     pass\n...\n&gt;&gt;&gt; @agent\n... async def translate(text: str, lang: str) -&gt; str:\n...     '''Translate to {{ lang }}: {{ text }}'''\n...     pass\n...\n&gt;&gt;&gt; text = \"Long article text here...\"\n&gt;&gt;&gt; summary = await summarize(text)\n&gt;&gt;&gt; japanese = await translate(summary, \"Japanese\")\n&gt;&gt;&gt; print(japanese)\n</code></pre>"},{"location":"en/api/cli/#configuration","title":"Configuration","text":""},{"location":"en/api/cli/#environment-variables","title":"Environment Variables","text":"<ul> <li><code>OPENAI_API_KEY</code>: OpenAI API key</li> <li><code>ANTHROPIC_API_KEY</code>: Anthropic API key</li> <li><code>GOOGLE_API_KEY</code>: Google API key</li> </ul> <p>Set before starting REPL:</p> <pre><code>export OPENAI_API_KEY=\"your-key-here\"\nkagura repl\n</code></pre>"},{"location":"en/api/cli/#model-selection","title":"Model Selection","text":"<p>Use different models for different tasks:</p> <pre><code># Fast, cheap model for simple tasks\nkagura repl --model gpt-4o-mini\n\n# Powerful model for complex reasoning\nkagura repl --model gpt-4o\n\n# Claude for long context\nkagura repl --model claude-3-5-sonnet-20241022\n\n# Local model with Ollama\nkagura repl --model ollama/llama3.2\n</code></pre>"},{"location":"en/api/cli/#tips-and-tricks","title":"Tips and Tricks","text":""},{"location":"en/api/cli/#1-quick-testing","title":"1. Quick Testing","text":"<p>Use REPL for quick agent testing:</p> <pre><code>&gt;&gt;&gt; @agent\n... async def test(x: str) -&gt; str:\n...     '''{{ x }}'''\n...     pass\n...\n&gt;&gt;&gt; await test(\"Is this working?\")\n</code></pre>"},{"location":"en/api/cli/#2-iterative-development","title":"2. Iterative Development","text":"<p>Refine prompts interactively:</p> <pre><code>&gt;&gt;&gt; @agent\n... async def v1(text: str) -&gt; str:\n...     '''Summarize: {{ text }}'''\n...     pass\n...\n&gt;&gt;&gt; @agent\n... async def v2(text: str) -&gt; str:\n...     '''Summarize in technical terms: {{ text }}'''\n...     pass\n...\n&gt;&gt;&gt; await v1(text)  # Try first version\n&gt;&gt;&gt; await v2(text)  # Try improved version\n</code></pre>"},{"location":"en/api/cli/#3-debugging","title":"3. Debugging","text":"<p>Print intermediate results:</p> <pre><code>&gt;&gt;&gt; result = await my_agent(\"test\")\n&gt;&gt;&gt; print(result)\n&gt;&gt;&gt; print(type(result))\n&gt;&gt;&gt; print(result.model_dump())  # For Pydantic models\n</code></pre>"},{"location":"en/api/cli/#4-saving-work","title":"4. Saving Work","text":"<p>Copy working code from REPL to a <code>.py</code> file:</p> <pre><code># In REPL - test and refine\n&gt;&gt;&gt; @agent\n... async def my_agent(x: str) -&gt; str:\n...     '''Process {{ x }}'''\n...     pass\n\n# Then save to agent.py:\n# from kagura import agent\n#\n# @agent\n# async def my_agent(x: str) -&gt; str:\n#     '''Process {{ x }}'''\n#     pass\n</code></pre>"},{"location":"en/api/cli/#troubleshooting","title":"Troubleshooting","text":""},{"location":"en/api/cli/#repl-wont-start","title":"REPL Won't Start","text":"<pre><code>$ kagura repl\nError: 'kagura' command not found\n</code></pre> <p>Solution: Ensure Kagura AI is installed and in your PATH: <pre><code>pip install kagura-ai\nwhich kagura  # Should show path to kagura command\n</code></pre></p>"},{"location":"en/api/cli/#import-errors","title":"Import Errors","text":"<pre><code>&gt;&gt;&gt; from kagura import agent\nModuleNotFoundError: No module named 'kagura'\n</code></pre> <p>Solution: Check your Python environment: <pre><code>python --version  # Should be 3.11+\npip list | grep kagura\n</code></pre></p>"},{"location":"en/api/cli/#api-key-errors","title":"API Key Errors","text":"<pre><code>&gt;&gt;&gt; await hello(\"test\")\nAuthenticationError: API key not found\n</code></pre> <p>Solution: Set your API key: <pre><code>export OPENAI_API_KEY=\"your-key-here\"\n</code></pre></p>"},{"location":"en/api/cli/#memory-issues","title":"Memory Issues","text":"<p>If REPL becomes slow or unresponsive:</p> <ol> <li>Exit and restart: <code>/exit</code></li> <li>Clear variables: <code>del large_variable</code></li> <li>Use <code>/clear</code> to clear screen</li> </ol>"},{"location":"en/api/cli/#mcp-commands","title":"MCP Commands","text":"<p>New in v2.1.0: MCP (Model Context Protocol) commands for Claude Desktop integration.</p>"},{"location":"en/api/cli/#kagura-mcp","title":"kagura mcp","text":"<p>MCP command group for managing Model Context Protocol integration.</p> <pre><code>kagura mcp [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Commands: - <code>serve</code> - Start MCP server - <code>list</code> - List registered agents</p>"},{"location":"en/api/cli/#kagura-mcp-serve","title":"kagura mcp serve","text":"<p>Start MCP server using stdio transport for Claude Desktop, Claude Code, Cline, etc.</p> <pre><code>kagura mcp serve [OPTIONS]\n</code></pre> <p>Options: - <code>--name TEXT</code>: Server name (default: \"kagura-ai\") - <code>--help</code>: Show help message</p> <p>Examples:</p> <pre><code># Start MCP server (called by Claude Desktop)\nkagura mcp serve\n\n# Custom server name\nkagura mcp serve --name my-custom-server\n\n# Verbose logging (stderr)\nkagura -v mcp serve\n</code></pre> <p>Usage in Claude Desktop:</p> <p>Add to Claude Desktop config file:</p> <p>macOS: <code>~/Library/Application Support/Claude/claude_desktop_config.json</code> Windows: <code>%APPDATA%\\Claude\\claude_desktop_config.json</code> Linux: <code>~/.config/Claude/claude_desktop_config.json</code></p> <pre><code>{\n  \"mcpServers\": {\n    \"kagura\": {\n      \"command\": \"kagura\",\n      \"args\": [\"mcp\", \"serve\"],\n      \"env\": {\n        \"OPENAI_API_KEY\": \"your-api-key-here\"\n      }\n    }\n  }\n}\n</code></pre> <p>How it works:</p> <ol> <li>Claude Desktop starts <code>kagura mcp serve</code> as a subprocess</li> <li>Communication happens via stdio (stdin/stdout)</li> <li>Kagura agents are exposed as MCP tools</li> <li>Claude can call agents using the MCP protocol</li> </ol>"},{"location":"en/api/cli/#kagura-mcp-list","title":"kagura mcp list","text":"<p>List all registered Kagura agents available via MCP.</p> <pre><code>kagura mcp list\n</code></pre> <p>Example:</p> <pre><code>$ kagura mcp list\nRegistered agents (3):\n\n  \u2022 analyze_code\n    Analyze code quality and suggest improvements\n\n  \u2022 review_code\n    Review code and provide detailed feedback\n\n  \u2022 generate_tests\n    Generate unit tests for the provided code\n</code></pre> <p>Output:</p> <p>Shows agent names and descriptions extracted from docstrings.</p>"},{"location":"en/api/cli/#mcp-integration-examples","title":"MCP Integration Examples","text":""},{"location":"en/api/cli/#example-1-basic-setup","title":"Example 1: Basic Setup","text":"<pre><code># 1. Install MCP support\npip install kagura-ai[mcp]\n\n# 2. Create agent\ncat &gt; my_agents.py &lt;&lt; 'EOF'\nfrom kagura import agent\n\n@agent\nasync def analyze_code(code: str) -&gt; str:\n    \"\"\"Analyze code quality\"\"\"\n    pass\nEOF\n\n# 3. Test locally\nkagura mcp list\n\n# 4. Configure Claude Desktop (edit config file)\n# See configuration above\n\n# 5. Restart Claude Desktop\n</code></pre>"},{"location":"en/api/cli/#example-2-multiple-agents","title":"Example 2: Multiple Agents","text":"<pre><code># agents.py\nfrom kagura import agent\n\n@agent\nasync def code_review(code: str) -&gt; str:\n    \"\"\"Review code and suggest improvements\"\"\"\n    pass\n\n@agent\nasync def generate_tests(code: str, framework: str = \"pytest\") -&gt; str:\n    \"\"\"Generate unit tests\"\"\"\n    pass\n\n@agent\nasync def explain_code(code: str, audience: str = \"beginner\") -&gt; str:\n    \"\"\"Explain code for different audiences\"\"\"\n    pass\n</code></pre> <p>All three agents are automatically available in Claude Desktop.</p>"},{"location":"en/api/cli/#example-3-debugging","title":"Example 3: Debugging","text":"<pre><code># Check agents are registered\nkagura mcp list\n\n# Start server with verbose logging\nkagura -v mcp serve 2&gt; mcp_debug.log\n\n# In another terminal, check logs\ntail -f mcp_debug.log\n</code></pre>"},{"location":"en/api/cli/#mcp-troubleshooting","title":"MCP Troubleshooting","text":""},{"location":"en/api/cli/#agent-not-appearing","title":"Agent Not Appearing","text":"<ol> <li> <p>Verify agent is registered: <pre><code>kagura mcp list\n</code></pre></p> </li> <li> <p>Check import errors: <pre><code>python -c \"import my_agents\"\n</code></pre></p> </li> <li> <p>Restart Claude Desktop completely:</p> </li> <li>Quit application</li> <li>Start again</li> <li>Check MCP indicator</li> </ol>"},{"location":"en/api/cli/#configuration-issues","title":"Configuration Issues","text":"<ol> <li> <p>Verify config file location: <pre><code># macOS\ncat ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n\n# Linux\ncat ~/.config/Claude/claude_desktop_config.json\n</code></pre></p> </li> <li> <p>Validate JSON syntax: <pre><code>python -m json.tool &lt; claude_desktop_config.json\n</code></pre></p> </li> <li> <p>Check environment variables: <pre><code>{\n  \"mcpServers\": {\n    \"kagura\": {\n      \"env\": {\n        \"OPENAI_API_KEY\": \"${OPENAI_API_KEY}\"\n      }\n    }\n  }\n}\n</code></pre></p> </li> </ol>"},{"location":"en/api/cli/#permission-errors","title":"Permission Errors","text":"<p>On Unix systems: <pre><code>which kagura\nchmod +x $(which kagura)\n</code></pre></p>"},{"location":"en/api/cli/#related","title":"Related","text":"<ul> <li>@agent Decorator - Creating agents</li> <li>MCP Integration Tutorial - Complete MCP guide</li> <li>MCP API Reference - MCP API documentation</li> <li>Quick Start - Getting started</li> <li>REPL Tutorial - Detailed REPL guide</li> </ul>"},{"location":"en/api/executor/","title":"Code Executor","text":"<p>The Code Executor provides safe Python code generation and execution capabilities in Kagura AI 2.0.</p>"},{"location":"en/api/executor/#overview","title":"Overview","text":"<p>The code execution system consists of: 1. CodeExecutor: Low-level code execution with security constraints 2. execute_code(): High-level agent that generates and executes code from natural language</p>"},{"location":"en/api/executor/#execute_code-function","title":"execute_code() Function","text":"<p>The simplest way to use code execution is through the <code>execute_code()</code> convenience function.</p>"},{"location":"en/api/executor/#signature","title":"Signature","text":"<pre><code>async def execute_code(task: str, *, model: str = \"gpt-4o-mini\") -&gt; dict\n</code></pre>"},{"location":"en/api/executor/#parameters","title":"Parameters","text":"<ul> <li>task (<code>str</code>): Natural language description of what to calculate or compute</li> <li>model (<code>str</code>, optional): LLM model to use for code generation</li> </ul>"},{"location":"en/api/executor/#return-value","title":"Return Value","text":"<p>Returns a dictionary with the following keys:</p> <pre><code>{\n    \"success\": bool,          # True if execution succeeded\n    \"code\": str,              # Generated Python code\n    \"result\": Any,            # Value of the 'result' variable\n    \"error\": str | None,      # Error message if failed\n}\n</code></pre>"},{"location":"en/api/executor/#examples","title":"Examples","text":""},{"location":"en/api/executor/#basic-calculation","title":"Basic Calculation","text":"<pre><code>from kagura.agents import execute_code\n\nresult = await execute_code(\"Calculate the factorial of 10\")\n\nif result[\"success\"]:\n    print(f\"Code:\\n{result['code']}\\n\")\n    print(f\"Result: {result['result']}\")\n    # Code:\n    # import math\n    # result = math.factorial(10)\n    #\n    # Result: 3628800\nelse:\n    print(f\"Error: {result['error']}\")\n</code></pre>"},{"location":"en/api/executor/#string-processing","title":"String Processing","text":"<pre><code>result = await execute_code(\"Reverse the string 'Hello, World!' and make it uppercase\")\n\nif result[\"success\"]:\n    print(result['result'])  # \"!DLROW ,OLLEH\"\n</code></pre>"},{"location":"en/api/executor/#list-operations","title":"List Operations","text":"<pre><code>result = await execute_code(\"Create a list of squares of numbers from 1 to 10\")\n\nif result[\"success\"]:\n    print(result['result'])  # [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n</code></pre>"},{"location":"en/api/executor/#statistical-analysis","title":"Statistical Analysis","text":"<pre><code>result = await execute_code(\n    \"Calculate the mean and standard deviation of [10, 20, 30, 40, 50]\"\n)\n\nif result[\"success\"]:\n    print(result['result'])\n    # {'mean': 30.0, 'stdev': 15.811388300841896}\n</code></pre>"},{"location":"en/api/executor/#error-handling","title":"Error Handling","text":"<pre><code>result = await execute_code(\"Divide 100 by 0\")\n\nif not result[\"success\"]:\n    print(f\"Error: {result['error']}\")\n    # Error: division by zero\n</code></pre>"},{"location":"en/api/executor/#codeexecutor-class","title":"CodeExecutor Class","text":"<p>For more control, use the <code>CodeExecutor</code> class directly.</p>"},{"location":"en/api/executor/#signature_1","title":"Signature","text":"<pre><code>class CodeExecutor:\n    def __init__(\n        self,\n        timeout: float = 30.0,\n        max_memory: int = 512 * 1024 * 1024,  # 512MB\n        allowed_imports: set[str] | None = None\n    )\n</code></pre>"},{"location":"en/api/executor/#parameters_1","title":"Parameters","text":"<ul> <li>timeout (<code>float</code>, default: <code>30.0</code>): Maximum execution time in seconds</li> <li>max_memory (<code>int</code>, default: <code>512MB</code>): Maximum memory usage in bytes</li> <li>allowed_imports (<code>set[str] | None</code>): Set of allowed import modules. If <code>None</code>, uses default safe list.</li> </ul>"},{"location":"en/api/executor/#methods","title":"Methods","text":""},{"location":"en/api/executor/#execute","title":"execute()","text":"<pre><code>async def execute(self, code: str) -&gt; ExecutionResult\n</code></pre> <p>Executes Python code and returns the result.</p> <p>Parameters: - code (<code>str</code>): Python code to execute. Must set a variable named <code>result</code>.</p> <p>Returns: - <code>ExecutionResult</code> object with fields:   - <code>success</code> (<code>bool</code>): Whether execution succeeded   - <code>result</code> (<code>Any</code>): Value of the <code>result</code> variable   - <code>error</code> (<code>str | None</code>): Error message if failed   - <code>stdout</code> (<code>str</code>): Captured stdout output   - <code>stderr</code> (<code>str</code>): Captured stderr output</p>"},{"location":"en/api/executor/#examples_1","title":"Examples","text":""},{"location":"en/api/executor/#basic-usage","title":"Basic Usage","text":"<pre><code>from kagura.core.executor import CodeExecutor\n\nexecutor = CodeExecutor()\n\nresult = await executor.execute(\"\"\"\nimport math\nresult = math.sqrt(16)\n\"\"\")\n\nprint(result.success)  # True\nprint(result.result)   # 4.0\n</code></pre>"},{"location":"en/api/executor/#custom-timeout","title":"Custom Timeout","text":"<pre><code>executor = CodeExecutor(timeout=60.0)\n\nresult = await executor.execute(\"\"\"\nimport time\ntime.sleep(2)\nresult = \"completed\"\n\"\"\")\n</code></pre>"},{"location":"en/api/executor/#capturing-output","title":"Capturing Output","text":"<pre><code>result = await executor.execute(\"\"\"\nprint(\"Debug message\")\nresult = 42\n\"\"\")\n\nprint(result.stdout)  # \"Debug message\\n\"\nprint(result.result)  # 42\n</code></pre>"},{"location":"en/api/executor/#security-features","title":"Security Features","text":"<p>The Code Executor has built-in security constraints to prevent malicious code execution.</p>"},{"location":"en/api/executor/#forbidden-imports","title":"Forbidden Imports","text":"<p>The following modules are blocked by default:</p> <ul> <li>System Access: <code>os</code>, <code>sys</code>, <code>subprocess</code>, <code>shutil</code></li> <li>File I/O: <code>open</code> (built-in), <code>io</code> (restricted)</li> <li>Network: <code>socket</code>, <code>urllib</code>, <code>requests</code>, <code>http</code></li> <li>Process Control: <code>multiprocessing</code>, <code>threading</code> (restricted)</li> <li>Code Execution: <code>eval</code>, <code>exec</code>, <code>compile</code> (built-in)</li> <li>Dangerous Modules: <code>pickle</code>, <code>ctypes</code>, <code>importlib</code></li> </ul>"},{"location":"en/api/executor/#allowed-imports","title":"Allowed Imports","text":"<p>Safe modules that are allowed by default:</p> <pre><code>ALLOWED_IMPORTS = {\n    \"math\",\n    \"statistics\",\n    \"random\",\n    \"datetime\",\n    \"json\",\n    \"re\",\n    \"collections\",\n    \"itertools\",\n    \"functools\",\n    \"typing\",\n}\n</code></pre>"},{"location":"en/api/executor/#ast-validation","title":"AST Validation","text":"<p>Before execution, code is analyzed using Python's Abstract Syntax Tree (AST) to detect:</p> <ul> <li>Forbidden function calls (<code>eval</code>, <code>exec</code>, <code>open</code>, etc.)</li> <li>Forbidden imports</li> <li>Dangerous operations</li> </ul> <p>Example validation error:</p> <pre><code>result = await executor.execute(\"\"\"\nimport os\nresult = os.system('ls')\n\"\"\")\n\nprint(result.error)\n# \"Forbidden import: os\"\n</code></pre>"},{"location":"en/api/executor/#resource-limits","title":"Resource Limits","text":"<ul> <li>Timeout: Code execution is terminated after the timeout period</li> <li>Memory: Process memory is monitored (platform-dependent)</li> <li>CPU: No infinite loops allowed (enforced via timeout)</li> </ul>"},{"location":"en/api/executor/#advanced-usage","title":"Advanced Usage","text":""},{"location":"en/api/executor/#custom-allowed-imports","title":"Custom Allowed Imports","text":"<pre><code>executor = CodeExecutor(\n    allowed_imports={\"math\", \"numpy\", \"pandas\"}\n)\n\nresult = await executor.execute(\"\"\"\nimport numpy as np\nresult = np.array([1, 2, 3]).mean()\n\"\"\")\n</code></pre>"},{"location":"en/api/executor/#error-recovery","title":"Error Recovery","text":"<pre><code>executor = CodeExecutor()\n\ncode = \"\"\"\nimport math\nresult = math.factorial(10)\n\"\"\"\n\ntry:\n    result = await executor.execute(code)\n    if result.success:\n        print(f\"Success: {result.result}\")\n    else:\n        print(f\"Execution error: {result.error}\")\nexcept TimeoutError:\n    print(\"Code execution timed out\")\nexcept Exception as e:\n    print(f\"Unexpected error: {e}\")\n</code></pre>"},{"location":"en/api/executor/#combining-with-agents","title":"Combining with Agents","text":"<pre><code>from kagura import agent\nfrom kagura.core.executor import CodeExecutor\n\nexecutor = CodeExecutor()\n\n@agent\nasync def generate_code(task: str) -&gt; str:\n    '''Generate Python code to: {{ task }}\n\n    Return only the code, nothing else.\n    '''\n    pass\n\nasync def run_task(task: str):\n    # Generate code\n    code = await generate_code(task)\n\n    # Execute code\n    result = await executor.execute(code)\n\n    return result\n\n# Use it\nresult = await run_task(\"Calculate fibonacci(15)\")\nprint(result.result)\n</code></pre>"},{"location":"en/api/executor/#best-practices","title":"Best Practices","text":""},{"location":"en/api/executor/#1-always-check-success","title":"1. Always Check Success","text":"<pre><code>result = await execute_code(\"some task\")\n\nif result[\"success\"]:\n    # Use result[\"result\"]\n    process(result[\"result\"])\nelse:\n    # Handle error\n    log_error(result[\"error\"])\n</code></pre>"},{"location":"en/api/executor/#2-set-appropriate-timeouts","title":"2. Set Appropriate Timeouts","text":"<pre><code># Short tasks\nexecutor = CodeExecutor(timeout=5.0)\n\n# Long computations\nexecutor = CodeExecutor(timeout=300.0)\n</code></pre>"},{"location":"en/api/executor/#3-use-result-variable","title":"3. Use result Variable","text":"<p>The executor looks for a variable named <code>result</code>:</p> <pre><code># Good\nresult = await executor.execute(\"\"\"\nx = 10\ny = 20\nresult = x + y\n\"\"\")\n\n# Won't work - no 'result' variable\nresult = await executor.execute(\"\"\"\nx = 10\ny = 20\nprint(x + y)\n\"\"\")\n</code></pre>"},{"location":"en/api/executor/#4-handle-errors-gracefully","title":"4. Handle Errors Gracefully","text":"<pre><code>result = await execute_code(task)\n\nif not result[\"success\"]:\n    # Retry with more explicit instructions\n    task = f\"{task}. Show step by step.\"\n    result = await execute_code(task)\n</code></pre>"},{"location":"en/api/executor/#limitations","title":"Limitations","text":"<ol> <li>No File I/O: Cannot read or write files</li> <li>No Network Access: Cannot make HTTP requests</li> <li>No System Commands: Cannot execute shell commands</li> <li>Limited Libraries: Only safe, pre-approved libraries</li> <li>Memory Constraints: Large data structures may fail</li> <li>Execution Time: Long-running code will timeout</li> </ol>"},{"location":"en/api/executor/#security-considerations","title":"Security Considerations","text":"<p>\u26a0\ufe0f Important: While the Code Executor has security constraints, it should still be used with caution:</p> <ol> <li>User Input: Be careful with untrusted user input</li> <li>Production Use: Consider additional sandboxing for production</li> <li>Resource Limits: Set appropriate timeouts and memory limits</li> <li>Monitoring: Log all code execution for auditing</li> </ol>"},{"location":"en/api/executor/#related","title":"Related","text":"<ul> <li>@agent Decorator - Creating AI agents</li> <li>Code Generator Example - Full example</li> <li>Quick Start - Getting started</li> </ul>"},{"location":"en/api/mcp/","title":"MCP API Reference","text":""},{"location":"en/api/mcp/#overview","title":"Overview","text":"<p>The MCP (Model Context Protocol) module enables Kagura agents to be exposed as MCP tools, allowing integration with Claude Desktop, Claude Code, Cline, and other MCP-compatible clients.</p>"},{"location":"en/api/mcp/#module-kaguramcp","title":"Module: <code>kagura.mcp</code>","text":""},{"location":"en/api/mcp/#create_mcp_servername-str-kagura-ai-server","title":"<code>create_mcp_server(name: str = \"kagura-ai\") -&gt; Server</code>","text":"<p>Creates an MCP server instance that exposes registered Kagura agents as tools.</p> <p>Parameters: - <code>name</code> (str, optional): Server name. Defaults to \"kagura-ai\".</p> <p>Returns: - <code>Server</code>: Configured MCP server instance</p> <p>Example: <pre><code>from kagura.mcp import create_mcp_server\n\nserver = create_mcp_server(\"my-server\")\n</code></pre></p>"},{"location":"en/api/mcp/#module-kaguramcpschema","title":"Module: <code>kagura.mcp.schema</code>","text":""},{"location":"en/api/mcp/#generate_json_schemafunc-callable-dict","title":"<code>generate_json_schema(func: Callable) -&gt; dict</code>","text":"<p>Generates JSON Schema from a Python function signature.</p> <p>Parameters: - <code>func</code> (Callable): Function to generate schema for</p> <p>Returns: - <code>dict</code>: JSON Schema with <code>type</code>, <code>properties</code>, and optionally <code>required</code></p> <p>Example: <pre><code>from kagura.mcp.schema import generate_json_schema\n\ndef my_func(name: str, age: int = 18) -&gt; str:\n    \"\"\"Sample function\n\n    name: Person's name\n    age: Person's age\n    \"\"\"\n    pass\n\nschema = generate_json_schema(my_func)\n# {\n#     \"type\": \"object\",\n#     \"properties\": {\n#         \"name\": {\"type\": \"string\", \"description\": \"Person's name\"},\n#         \"age\": {\"type\": \"integer\", \"description\": \"Person's age\"}\n#     },\n#     \"required\": [\"name\"]\n# }\n</code></pre></p>"},{"location":"en/api/mcp/#python_type_to_json_schemapy_type-type-dict","title":"<code>python_type_to_json_schema(py_type: type) -&gt; dict</code>","text":"<p>Converts a Python type to JSON Schema format.</p> <p>Parameters: - <code>py_type</code> (type): Python type annotation</p> <p>Returns: - <code>dict</code>: JSON Schema representation</p> <p>Supported Types: - Basic: <code>str</code>, <code>int</code>, <code>float</code>, <code>bool</code> - Collections: <code>list[T]</code>, <code>dict[K, V]</code> - Optional: <code>T | None</code>, <code>Optional[T]</code> - Pydantic: <code>BaseModel</code> subclasses</p> <p>Example: <pre><code>from kagura.mcp.schema import python_type_to_json_schema\n\n# Basic types\npython_type_to_json_schema(str)\n# {\"type\": \"string\"}\n\n# Lists\npython_type_to_json_schema(list[int])\n# {\"type\": \"array\", \"items\": {\"type\": \"integer\"}}\n\n# Dicts\npython_type_to_json_schema(dict[str, float])\n# {\"type\": \"object\", \"additionalProperties\": {\"type\": \"number\"}}\n\n# Optional\npython_type_to_json_schema(str | None)\n# {\"type\": [\"string\", \"null\"]}\n</code></pre></p>"},{"location":"en/api/mcp/#module-kaguracoreregistry","title":"Module: <code>kagura.core.registry</code>","text":""},{"location":"en/api/mcp/#class-agentregistry","title":"<code>class AgentRegistry</code>","text":"<p>Global registry for all Kagura agents.</p>"},{"location":"en/api/mcp/#methods","title":"Methods","text":""},{"location":"en/api/mcp/#registername-str-func-callable-none","title":"<code>register(name: str, func: Callable) -&gt; None</code>","text":"<p>Register an agent.</p> <p>Parameters: - <code>name</code> (str): Agent name (must be unique) - <code>func</code> (Callable): Agent function</p> <p>Raises: - <code>ValueError</code>: If agent name is already registered</p> <p>Example: <pre><code>from kagura.core.registry import agent_registry\n\ndef my_agent():\n    pass\n\nagent_registry.register(\"my_agent\", my_agent)\n</code></pre></p>"},{"location":"en/api/mcp/#getname-str-callable-none","title":"<code>get(name: str) -&gt; Callable | None</code>","text":"<p>Get agent by name.</p> <p>Parameters: - <code>name</code> (str): Agent name</p> <p>Returns: - <code>Callable | None</code>: Agent function, or None if not found</p> <p>Example: <pre><code>agent_func = agent_registry.get(\"my_agent\")\nif agent_func:\n    result = await agent_func()\n</code></pre></p>"},{"location":"en/api/mcp/#get_all-dictstr-callable","title":"<code>get_all() -&gt; dict[str, Callable]</code>","text":"<p>Get all registered agents.</p> <p>Returns: - <code>dict[str, Callable]</code>: Dictionary of agent_name -&gt; agent_function</p> <p>Example: <pre><code>agents = agent_registry.get_all()\nfor name, func in agents.items():\n    print(f\"Agent: {name}\")\n</code></pre></p>"},{"location":"en/api/mcp/#list_names-liststr","title":"<code>list_names() -&gt; list[str]</code>","text":"<p>List all agent names.</p> <p>Returns: - <code>list[str]</code>: List of agent names</p> <p>Example: <pre><code>names = agent_registry.list_names()\nprint(f\"Registered agents: {', '.join(names)}\")\n</code></pre></p>"},{"location":"en/api/mcp/#unregistername-str-none","title":"<code>unregister(name: str) -&gt; None</code>","text":"<p>Unregister an agent.</p> <p>Parameters: - <code>name</code> (str): Agent name to remove</p> <p>Raises: - <code>KeyError</code>: If agent name is not registered</p>"},{"location":"en/api/mcp/#clear-none","title":"<code>clear() -&gt; None</code>","text":"<p>Clear all agents from registry.</p>"},{"location":"en/api/mcp/#auto_discovermodule_path-str-none","title":"<code>auto_discover(module_path: str) -&gt; None</code>","text":"<p>Auto-discover agents in a module.</p> <p>Parameters: - <code>module_path</code> (str): Python module path (e.g., \"my_package.agents\")</p> <p>Raises: - <code>ValueError</code>: If module is not found</p> <p>Example: <pre><code># Discover all agents in a module\nagent_registry.auto_discover(\"my_package.agents\")\n\n# All @agent decorated functions in the module are now registered\n</code></pre></p>"},{"location":"en/api/mcp/#global-instance-agent_registry","title":"Global Instance: <code>agent_registry</code>","text":"<p>A global <code>AgentRegistry</code> instance is available for use:</p> <pre><code>from kagura.core.registry import agent_registry\n\n# Agents decorated with @agent are automatically registered here\n</code></pre>"},{"location":"en/api/mcp/#cli-commands","title":"CLI Commands","text":""},{"location":"en/api/mcp/#kagura-mcp-serve","title":"<code>kagura mcp serve</code>","text":"<p>Start MCP server using stdio transport.</p> <p>Usage: <pre><code>kagura mcp serve [OPTIONS]\n</code></pre></p> <p>Options: - <code>--name TEXT</code>: Server name (default: \"kagura-ai\")</p> <p>Example: <pre><code># Start server\nkagura mcp serve\n\n# Custom server name\nkagura mcp serve --name my-server\n\n# Verbose logging\nkagura -v mcp serve\n</code></pre></p>"},{"location":"en/api/mcp/#kagura-mcp-list","title":"<code>kagura mcp list</code>","text":"<p>List all registered agents.</p> <p>Usage: <pre><code>kagura mcp list\n</code></pre></p> <p>Output: <pre><code>Registered agents (3):\n\n  \u2022 analyze_code\n    Analyze code quality and suggest improvements\n\n  \u2022 review_code\n    Review code and provide feedback\n\n  \u2022 generate_tests\n    Generate unit tests for the code\n</code></pre></p>"},{"location":"en/api/mcp/#agent-metadata","title":"Agent Metadata","text":"<p>Agents decorated with <code>@agent</code> have special attributes for MCP integration:</p>"},{"location":"en/api/mcp/#_is_agent-bool","title":"<code>_is_agent: bool</code>","text":"<p>Flag indicating this is a Kagura agent.</p> <pre><code>from kagura import agent\n\n@agent\nasync def my_agent():\n    pass\n\nprint(my_agent._is_agent)  # True\n</code></pre>"},{"location":"en/api/mcp/#_agent_config-llmconfig","title":"<code>_agent_config: LLMConfig</code>","text":"<p>LLM configuration for the agent.</p> <pre><code>print(my_agent._agent_config.model)  # \"gpt-4o-mini\"\nprint(my_agent._agent_config.temperature)  # 0.7\n</code></pre>"},{"location":"en/api/mcp/#_agent_template-str","title":"<code>_agent_template: str</code>","text":"<p>Jinja2 template extracted from docstring.</p> <pre><code>@agent\nasync def greet(name: str):\n    \"\"\"Say hello to {{ name }}\"\"\"\n    pass\n\nprint(greet._agent_template)  # \"Say hello to {{ name }}\"\n</code></pre>"},{"location":"en/api/mcp/#mcp-tool-naming","title":"MCP Tool Naming","text":"<p>Agents are exposed to MCP clients with the <code>kagura_</code> prefix:</p> Agent Function Name MCP Tool Name <code>analyze_code</code> <code>kagura_analyze_code</code> <code>review_code</code> <code>kagura_review_code</code> <code>translate</code> <code>kagura_translate</code> <p>This prefix prevents naming conflicts with other MCP tools.</p>"},{"location":"en/api/mcp/#type-conversion-table","title":"Type Conversion Table","text":""},{"location":"en/api/mcp/#python-json-schema","title":"Python \u2192 JSON Schema","text":"Python Type JSON Schema <code>str</code> <code>{\"type\": \"string\"}</code> <code>int</code> <code>{\"type\": \"integer\"}</code> <code>float</code> <code>{\"type\": \"number\"}</code> <code>bool</code> <code>{\"type\": \"boolean\"}</code> <code>list[T]</code> <code>{\"type\": \"array\", \"items\": {...}}</code> <code>dict[str, T]</code> <code>{\"type\": \"object\", \"additionalProperties\": {...}}</code> <code>T \\| None</code> <code>{\"type\": [\"T\", \"null\"]}</code> <code>BaseModel</code> Pydantic's <code>model_json_schema()</code>"},{"location":"en/api/mcp/#complete-example","title":"Complete Example","text":"<pre><code>from kagura import agent\nfrom kagura.core.registry import agent_registry\nfrom kagura.mcp import create_mcp_server\nfrom kagura.mcp.schema import generate_json_schema\n\n# Define agent\n@agent\nasync def analyze_sentiment(text: str, detailed: bool = False) -&gt; dict:\n    \"\"\"\n    Analyze sentiment of text\n\n    text: Text to analyze\n    detailed: Include detailed breakdown\n    \"\"\"\n    pass\n\n# Agent is automatically registered\nprint(agent_registry.get(\"analyze_sentiment\"))  # &lt;function ...&gt;\n\n# Generate schema\nschema = generate_json_schema(analyze_sentiment)\nprint(schema)\n# {\n#     \"type\": \"object\",\n#     \"properties\": {\n#         \"text\": {\"type\": \"string\", \"description\": \"Text to analyze\"},\n#         \"detailed\": {\"type\": \"boolean\", \"description\": \"Include detailed breakdown\"}\n#     },\n#     \"required\": [\"text\"]\n# }\n\n# Create MCP server\nserver = create_mcp_server()\n\n# Server exposes agent as \"kagura_analyze_sentiment\" tool\n</code></pre>"},{"location":"en/api/mcp/#see-also","title":"See Also","text":"<ul> <li>MCP Integration Tutorial</li> <li>CLI Reference</li> <li>Agent Decorator</li> <li>MCP Specification</li> </ul>"},{"location":"en/tutorials/01-basic-agent/","title":"Tutorial 1: Creating Your First Agent","text":"<p>Learn how to create a basic AI agent using the <code>@agent</code> decorator.</p>"},{"location":"en/tutorials/01-basic-agent/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11 or higher</li> <li>Kagura AI installed (<code>pip install kagura-ai</code>)</li> <li>OpenAI API key (or other LLM provider)</li> </ul>"},{"location":"en/tutorials/01-basic-agent/#goal","title":"Goal","text":"<p>By the end of this tutorial, you will: - Understand the <code>@agent</code> decorator - Create a simple conversational agent - Run and test your agent - Understand how prompts work</p>"},{"location":"en/tutorials/01-basic-agent/#step-1-set-up-your-environment","title":"Step 1: Set Up Your Environment","text":"<p>First, set your API key:</p> <pre><code>export OPENAI_API_KEY=\"your-key-here\"\n</code></pre> <p>Create a new file called <code>hello_agent.py</code>:</p> <pre><code>touch hello_agent.py\n</code></pre>"},{"location":"en/tutorials/01-basic-agent/#step-2-import-kagura","title":"Step 2: Import Kagura","text":"<p>Open <code>hello_agent.py</code> and add the import:</p> <pre><code>import asyncio\nfrom kagura import agent\n</code></pre> <p>Explanation: - <code>asyncio</code>: Python's built-in library for async operations - <code>agent</code>: The core decorator from Kagura AI</p>"},{"location":"en/tutorials/01-basic-agent/#step-3-define-your-first-agent","title":"Step 3: Define Your First Agent","text":"<p>Add this agent definition:</p> <pre><code>@agent\nasync def hello(name: str) -&gt; str:\n    '''Say hello to {{ name }}'''\n    pass\n</code></pre> <p>Let's break this down:</p> <ol> <li><code>@agent</code> - The decorator that converts the function into an AI agent</li> <li><code>async def hello</code> - An async function (required for all agents)</li> <li><code>(name: str)</code> - Function parameter with type hint</li> <li><code>-&gt; str</code> - Return type annotation (tells parser to expect a string)</li> <li><code>'''Say hello to {{ name }}'''</code> - The prompt template using Jinja2 syntax</li> <li><code>pass</code> - Function body (ignored, as decorator replaces it)</li> </ol>"},{"location":"en/tutorials/01-basic-agent/#step-4-create-a-main-function","title":"Step 4: Create a Main Function","text":"<p>Add code to run the agent:</p> <pre><code>async def main():\n    # Call the agent\n    result = await hello(\"World\")\n    print(result)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"en/tutorials/01-basic-agent/#step-5-run-your-agent","title":"Step 5: Run Your Agent","text":"<p>Execute the script:</p> <pre><code>python hello_agent.py\n</code></pre> <p>Expected output: <pre><code>Hello, World! How can I assist you today?\n</code></pre></p> <p>\ud83c\udf89 Congratulations! You've created your first AI agent.</p>"},{"location":"en/tutorials/01-basic-agent/#complete-code","title":"Complete Code","text":"<p>Here's the full <code>hello_agent.py</code>:</p> <pre><code>import asyncio\nfrom kagura import agent\n\n\n@agent\nasync def hello(name: str) -&gt; str:\n    '''Say hello to {{ name }}'''\n    pass\n\n\nasync def main():\n    result = await hello(\"World\")\n    print(result)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"en/tutorials/01-basic-agent/#understanding-what-happened","title":"Understanding What Happened","text":"<p>Let's trace the execution:</p> <ol> <li>You call: <code>await hello(\"World\")</code></li> <li>Decorator extracts: Parameter <code>name = \"World\"</code></li> <li>Template renders: <code>\"Say hello to World\"</code></li> <li>LLM is called: With the rendered prompt</li> <li>Response is parsed: As a string (because <code>-&gt; str</code>)</li> <li>Result returned: <code>\"Hello, World! How can I assist you today?\"</code></li> </ol>"},{"location":"en/tutorials/01-basic-agent/#experiment-different-names","title":"Experiment: Different Names","text":"<p>Try calling with different names:</p> <pre><code>async def main():\n    print(await hello(\"Alice\"))\n    print(await hello(\"Bob\"))\n    print(await hello(\"\u795e\u697d\"))  # Japanese name\n</code></pre> <p>Output: <pre><code>Hello, Alice! How can I help you?\nHello, Bob! Nice to meet you!\n\u3053\u3093\u306b\u3061\u306f\u3001\u795e\u697d\u3055\u3093\uff01\u304a\u624b\u4f1d\u3044\u3067\u304d\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u3059\u304b\uff1f\n</code></pre></p> <p>Notice how the LLM adapts its response based on the input!</p>"},{"location":"en/tutorials/01-basic-agent/#experiment-multiple-parameters","title":"Experiment: Multiple Parameters","text":"<p>Let's create an agent with multiple parameters:</p> <pre><code>@agent\nasync def greet(name: str, time_of_day: str = \"morning\") -&gt; str:\n    '''Good {{ time_of_day }}, {{ name }}! How are you doing?'''\n    pass\n\n\nasync def main():\n    print(await greet(\"Alice\"))\n    print(await greet(\"Bob\", \"evening\"))\n</code></pre> <p>Output: <pre><code>Good morning, Alice! How are you doing?\nI hope you're doing well!\n\nGood evening, Bob! How are you doing?\nI hope you had a great day!\n</code></pre></p>"},{"location":"en/tutorials/01-basic-agent/#experiment-different-prompts","title":"Experiment: Different Prompts","text":"<p>The prompt greatly affects the response. Try these variations:</p>"},{"location":"en/tutorials/01-basic-agent/#formal-greeting","title":"Formal Greeting","text":"<pre><code>@agent\nasync def formal_greet(name: str) -&gt; str:\n    '''Provide a formal business greeting to {{ name }}, a potential client.'''\n    pass\n</code></pre>"},{"location":"en/tutorials/01-basic-agent/#casual-greeting","title":"Casual Greeting","text":"<pre><code>@agent\nasync def casual_greet(name: str) -&gt; str:\n    '''Give a super casual, friendly greeting to {{ name }}, your best friend.'''\n    pass\n</code></pre>"},{"location":"en/tutorials/01-basic-agent/#poetic-greeting","title":"Poetic Greeting","text":"<pre><code>@agent\nasync def poetic_greet(name: str) -&gt; str:\n    '''Write a short, poetic greeting to {{ name }} (2-3 lines).'''\n    pass\n</code></pre>"},{"location":"en/tutorials/01-basic-agent/#key-concepts-learned","title":"Key Concepts Learned","text":""},{"location":"en/tutorials/01-basic-agent/#1-the-agent-decorator","title":"1. The @agent Decorator","text":"<p>Converts a function into an AI agent: - Extracts function signature - Uses docstring as prompt template - Calls LLM automatically - Parses response based on return type</p>"},{"location":"en/tutorials/01-basic-agent/#2-asyncawait","title":"2. Async/Await","text":"<p>All agents are async functions: <pre><code>result = await hello(\"World\")  # \u2713 Correct\nresult = hello(\"World\")        # \u2717 Wrong - missing await\n</code></pre></p>"},{"location":"en/tutorials/01-basic-agent/#3-type-hints","title":"3. Type Hints","text":"<p>Type hints tell the parser how to handle the response: <pre><code>async def hello(name: str) -&gt; str:  # Returns string\n    pass\n</code></pre></p>"},{"location":"en/tutorials/01-basic-agent/#4-prompt-templates","title":"4. Prompt Templates","text":"<p>Docstrings use Jinja2 syntax for dynamic prompts: <pre><code>'''Say hello to {{ name }}'''  # {{ }} injects variables\n</code></pre></p>"},{"location":"en/tutorials/01-basic-agent/#common-mistakes","title":"Common Mistakes","text":""},{"location":"en/tutorials/01-basic-agent/#1-forgetting-asyncawait","title":"1. Forgetting <code>async</code>/<code>await</code>","text":"<pre><code># Wrong\n@agent\ndef hello(name: str) -&gt; str:  # Missing 'async'\n    pass\n\nresult = hello(\"World\")  # Missing 'await'\n\n# Correct\n@agent\nasync def hello(name: str) -&gt; str:\n    pass\n\nresult = await hello(\"World\")\n</code></pre>"},{"location":"en/tutorials/01-basic-agent/#2-missing-return-type","title":"2. Missing Return Type","text":"<pre><code># Less good\n@agent\nasync def hello(name: str):  # No return type\n    pass\n\n# Better\n@agent\nasync def hello(name: str) -&gt; str:  # Explicit return type\n    pass\n</code></pre>"},{"location":"en/tutorials/01-basic-agent/#3-empty-docstring","title":"3. Empty Docstring","text":"<pre><code># Won't work well\n@agent\nasync def hello(name: str) -&gt; str:\n    pass  # No docstring = no prompt!\n\n# Correct\n@agent\nasync def hello(name: str) -&gt; str:\n    '''Say hello to {{ name }}'''\n    pass\n</code></pre>"},{"location":"en/tutorials/01-basic-agent/#next-steps","title":"Next Steps","text":"<p>Now that you understand basic agents, you can:</p> <ol> <li>Learn about templates - Tutorial 2: Template Engine</li> <li>Explore type parsing - Tutorial 3: Type-Based Parsing</li> <li>Try the REPL - Run <code>kagura repl</code> for interactive testing</li> </ol>"},{"location":"en/tutorials/01-basic-agent/#practice-exercises","title":"Practice Exercises","text":""},{"location":"en/tutorials/01-basic-agent/#exercise-1-sentiment-analysis","title":"Exercise 1: Sentiment Analysis","text":"<p>Create an agent that analyzes sentiment:</p> <pre><code>@agent\nasync def analyze_sentiment(text: str) -&gt; str:\n    '''Analyze the sentiment (positive/negative/neutral) of: {{ text }}'''\n    pass\n</code></pre> <p>Test it: <pre><code>print(await analyze_sentiment(\"I love this product!\"))\nprint(await analyze_sentiment(\"This is terrible.\"))\nprint(await analyze_sentiment(\"It's okay.\"))\n</code></pre></p>"},{"location":"en/tutorials/01-basic-agent/#exercise-2-language-translation","title":"Exercise 2: Language Translation","text":"<p>Create a translation agent:</p> <pre><code>@agent\nasync def translate(text: str, target_language: str) -&gt; str:\n    '''Translate to {{ target_language }}: {{ text }}'''\n    pass\n</code></pre> <p>Test it: <pre><code>print(await translate(\"Hello, world!\", \"Japanese\"))\nprint(await translate(\"Hello, world!\", \"French\"))\n</code></pre></p>"},{"location":"en/tutorials/01-basic-agent/#exercise-3-question-answering","title":"Exercise 3: Question Answering","text":"<p>Create a Q&amp;A agent:</p> <pre><code>@agent\nasync def answer_question(question: str) -&gt; str:\n    '''Answer this question concisely: {{ question }}'''\n    pass\n</code></pre> <p>Test it: <pre><code>print(await answer_question(\"What is Python?\"))\nprint(await answer_question(\"How do I install Kagura AI?\"))\n</code></pre></p>"},{"location":"en/tutorials/01-basic-agent/#summary","title":"Summary","text":"<p>You learned: - \u2713 How to use the <code>@agent</code> decorator - \u2713 How to create async agent functions - \u2713 How to use type hints for return types - \u2713 How to write prompt templates with Jinja2 - \u2713 How to call and test agents</p> <p>Continue to Tutorial 2: Template Engine to learn more advanced prompting techniques!</p>"},{"location":"en/tutorials/02-templates/","title":"Tutorial 02: Template Engine","text":"<p>Learn how to use Jinja2 templates in your AI agents to create dynamic prompts.</p>"},{"location":"en/tutorials/02-templates/#what-youll-learn","title":"What You'll Learn","text":"<ul> <li>How to use Jinja2 template syntax in agent docstrings</li> <li>Template variables and expressions</li> <li>Advanced template features (loops, conditionals)</li> <li>Best practices for prompt engineering</li> </ul>"},{"location":"en/tutorials/02-templates/#prerequisites","title":"Prerequisites","text":"<ul> <li>Completed Tutorial 01: Your First Agent</li> <li>Basic understanding of Python f-strings</li> </ul>"},{"location":"en/tutorials/02-templates/#template-basics","title":"Template Basics","text":"<p>Kagura uses Jinja2 template syntax in agent docstrings. Templates are rendered before being sent to the LLM.</p>"},{"location":"en/tutorials/02-templates/#simple-variables","title":"Simple Variables","text":"<pre><code>from kagura import agent\n\n@agent\nasync def greet(name: str) -&gt; str:\n    \"\"\"Say hello to {{ name }}\"\"\"\n    pass\n\n# Template renders to: \"Say hello to Alice\"\nresult = await greet(\"Alice\")\n</code></pre> <p>Key Points: - Use <code>{{ variable }}</code> to insert values - Variable names must match function parameters - Values are automatically escaped</p>"},{"location":"en/tutorials/02-templates/#multiple-variables","title":"Multiple Variables","text":"<pre><code>@agent\nasync def introduce(name: str, age: int, occupation: str) -&gt; str:\n    \"\"\"\n    Introduce yourself as {{ name }}, a {{ age }}-year-old {{ occupation }}.\n    Be friendly and professional.\n    \"\"\"\n    pass\n\nresult = await introduce(\"Bob\", 30, \"engineer\")\n# Template renders to: \"Introduce yourself as Bob, a 30-year-old engineer...\"\n</code></pre>"},{"location":"en/tutorials/02-templates/#template-expressions","title":"Template Expressions","text":"<p>Jinja2 supports Python-like expressions:</p> <pre><code>@agent\nasync def analyze(score: int) -&gt; str:\n    \"\"\"\n    The score is {{ score }}.\n    {% if score &gt;= 80 %}\n    This is excellent performance!\n    {% elif score &gt;= 60 %}\n    This is good performance.\n    {% else %}\n    This needs improvement.\n    {% endif %}\n    \"\"\"\n    pass\n</code></pre> <p>Expressions You Can Use: - Arithmetic: <code>{{ price * 1.1 }}</code> - Comparison: <code>{% if age &gt; 18 %}</code> - String methods: <code>{{ name.upper() }}</code> - List access: <code>{{ items[0] }}</code></p>"},{"location":"en/tutorials/02-templates/#loops","title":"Loops","text":"<p>Process lists and dictionaries in templates:</p> <pre><code>from typing import List\n\n@agent\nasync def summarize_items(items: List[str]) -&gt; str:\n    \"\"\"\n    Summarize the following items:\n    {% for item in items %}\n    - {{ item }}\n    {% endfor %}\n\n    Provide a brief overview.\n    \"\"\"\n    pass\n\nresult = await summarize_items([\"apples\", \"oranges\", \"bananas\"])\n</code></pre> <p>Loop Features: - <code>{% for item in list %}</code>: Iterate over lists - <code>{{ loop.index }}</code>: Current iteration (1-based) - <code>{{ loop.first }}</code>: True on first iteration - <code>{{ loop.last }}</code>: True on last iteration</p>"},{"location":"en/tutorials/02-templates/#filters","title":"Filters","text":"<p>Transform values with filters:</p> <pre><code>@agent\nasync def format_text(text: str) -&gt; str:\n    \"\"\"\n    Original: {{ text }}\n    Uppercase: {{ text | upper }}\n    Capitalized: {{ text | capitalize }}\n    First 50 chars: {{ text[:50] }}\n    \"\"\"\n    pass\n</code></pre> <p>Common Filters: - <code>upper</code>, <code>lower</code>, <code>capitalize</code>: Text transformation - <code>length</code>: Get length of string/list - <code>default(value)</code>: Default value if undefined - <code>join(separator)</code>: Join list items</p>"},{"location":"en/tutorials/02-templates/#complex-data-structures","title":"Complex Data Structures","text":"<p>Work with dictionaries and objects:</p> <pre><code>from pydantic import BaseModel\nfrom typing import Dict\n\nclass User(BaseModel):\n    name: str\n    email: str\n    age: int\n\n@agent\nasync def analyze_user(user: User) -&gt; str:\n    \"\"\"\n    Analyze user profile:\n    - Name: {{ user.name }}\n    - Email: {{ user.email }}\n    - Age: {{ user.age }}\n\n    Provide insights about this user.\n    \"\"\"\n    pass\n\nuser = User(name=\"Alice\", email=\"alice@example.com\", age=25)\nresult = await analyze_user(user)\n</code></pre> <p>Accessing Data: - Dictionary: <code>{{ data['key'] }}</code> or <code>{{ data.key }}</code> - Object attributes: <code>{{ obj.attribute }}</code> - Nested: <code>{{ user.address.city }}</code></p>"},{"location":"en/tutorials/02-templates/#multiline-templates","title":"Multiline Templates","text":"<p>For complex prompts, use multiline docstrings:</p> <pre><code>@agent\nasync def write_email(\n    recipient: str,\n    subject: str,\n    points: List[str],\n    tone: str = \"professional\"\n) -&gt; str:\n    \"\"\"\n    Write an email with the following specifications:\n\n    To: {{ recipient }}\n    Subject: {{ subject }}\n    Tone: {{ tone }}\n\n    Key points to cover:\n    {% for point in points %}\n    {{ loop.index }}. {{ point }}\n    {% endfor %}\n\n    Make it {{ tone }} and concise.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"en/tutorials/02-templates/#best-practices","title":"Best Practices","text":""},{"location":"en/tutorials/02-templates/#1-clear-instructions","title":"1. Clear Instructions","text":"<pre><code># \u2705 Good: Clear instructions\n@agent\nasync def translate(text: str, target_lang: str) -&gt; str:\n    \"\"\"\n    Translate the following text to {{ target_lang }}:\n    {{ text }}\n\n    Return only the translated text, no explanations.\n    \"\"\"\n    pass\n\n# \u274c Bad: Vague instructions\n@agent\nasync def translate(text: str, target_lang: str) -&gt; str:\n    \"\"\"{{ text }} {{ target_lang }}\"\"\"\n    pass\n</code></pre>"},{"location":"en/tutorials/02-templates/#2-structure-your-prompts","title":"2. Structure Your Prompts","text":"<pre><code>@agent\nasync def analyze(data: str) -&gt; str:\n    \"\"\"\n    ## Task\n    Analyze the following data.\n\n    ## Data\n    {{ data }}\n\n    ## Requirements\n    - Identify key trends\n    - Provide insights\n    - Be concise\n    \"\"\"\n    pass\n</code></pre>"},{"location":"en/tutorials/02-templates/#3-use-conditionals-wisely","title":"3. Use Conditionals Wisely","text":"<pre><code>@agent\nasync def respond(message: str, context: str = None) -&gt; str:\n    \"\"\"\n    {% if context %}\n    Context: {{ context }}\n    {% endif %}\n\n    User message: {{ message }}\n\n    Respond appropriately{{ \" based on the context\" if context else \"\" }}.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"en/tutorials/02-templates/#4-validate-input","title":"4. Validate Input","text":"<pre><code>@agent\nasync def process(items: List[str]) -&gt; str:\n    \"\"\"\n    {% if items %}\n    Process these items:\n    {% for item in items %}\n    - {{ item }}\n    {% endfor %}\n    {% else %}\n    No items to process.\n    {% endif %}\n    \"\"\"\n    pass\n</code></pre>"},{"location":"en/tutorials/02-templates/#common-patterns","title":"Common Patterns","text":""},{"location":"en/tutorials/02-templates/#chain-of-thought","title":"Chain of Thought","text":"<pre><code>@agent\nasync def solve_math(problem: str) -&gt; str:\n    \"\"\"\n    Solve this math problem: {{ problem }}\n\n    Think step by step:\n    1. First, identify the operation\n    2. Then, calculate the result\n    3. Finally, verify your answer\n    \"\"\"\n    pass\n</code></pre>"},{"location":"en/tutorials/02-templates/#few-shot-learning","title":"Few-Shot Learning","text":"<pre><code>@agent\nasync def classify(text: str) -&gt; str:\n    \"\"\"\n    Classify the sentiment of the text.\n\n    Examples:\n    Text: \"I love this!\" \u2192 Sentiment: positive\n    Text: \"This is terrible\" \u2192 Sentiment: negative\n    Text: \"It's okay\" \u2192 Sentiment: neutral\n\n    Text: {{ text }} \u2192 Sentiment: ?\n    \"\"\"\n    pass\n</code></pre>"},{"location":"en/tutorials/02-templates/#role-based-prompts","title":"Role-Based Prompts","text":"<pre><code>@agent\nasync def code_review(code: str, language: str) -&gt; str:\n    \"\"\"\n    You are an expert {{ language }} developer.\n    Review this code and provide suggestions:\n\n    ```{{ language }}\n    {{ code }}\n    ```\n\n    Focus on:\n    - Code quality\n    - Best practices\n    - Potential bugs\n    \"\"\"\n    pass\n</code></pre>"},{"location":"en/tutorials/02-templates/#troubleshooting","title":"Troubleshooting","text":""},{"location":"en/tutorials/02-templates/#template-syntax-errors","title":"Template Syntax Errors","text":"<pre><code># \u274c Wrong: Missing closing tag\n\"\"\"\n{% for item in items %}\n{{ item }}\n\"\"\"\n\n# \u2705 Correct: Proper closing\n\"\"\"\n{% for item in items %}\n{{ item }}\n{% endfor %}\n\"\"\"\n</code></pre>"},{"location":"en/tutorials/02-templates/#variable-not-found","title":"Variable Not Found","text":"<pre><code># \u274c Wrong: Variable doesn't match parameter\n@agent\nasync def greet(name: str) -&gt; str:\n    \"\"\"Hello {{ username }}\"\"\"  # username doesn't exist\n    pass\n\n# \u2705 Correct: Variable matches parameter\n@agent\nasync def greet(name: str) -&gt; str:\n    \"\"\"Hello {{ name }}\"\"\"\n    pass\n</code></pre>"},{"location":"en/tutorials/02-templates/#escaping-special-characters","title":"Escaping Special Characters","text":"<pre><code># If you need literal {{ or }}\n@agent\nasync def explain() -&gt; str:\n    \"\"\"\n    In Jinja2, use {% raw %}{{ variable }}{% endraw %} for templates.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"en/tutorials/02-templates/#practice-exercises","title":"Practice Exercises","text":""},{"location":"en/tutorials/02-templates/#exercise-1-user-profile-generator","title":"Exercise 1: User Profile Generator","text":"<p>Create an agent that generates user profiles:</p> <pre><code>from typing import List\n\n@agent\nasync def create_profile(\n    name: str,\n    skills: List[str],\n    experience_years: int\n) -&gt; str:\n    \"\"\"\n    # TODO: Write template that:\n    # - Introduces the person\n    # - Lists their skills\n    # - Mentions experience level\n    \"\"\"\n    pass\n</code></pre>"},{"location":"en/tutorials/02-templates/#exercise-2-conditional-email-writer","title":"Exercise 2: Conditional Email Writer","text":"<p>Create an agent with conditional formatting:</p> <pre><code>@agent\nasync def write_email(\n    recipient: str,\n    is_urgent: bool,\n    has_attachments: bool\n) -&gt; str:\n    \"\"\"\n    # TODO: Write template that:\n    # - Adds [URGENT] to subject if urgent\n    # - Mentions attachments if present\n    \"\"\"\n    pass\n</code></pre>"},{"location":"en/tutorials/02-templates/#exercise-3-data-analyzer","title":"Exercise 3: Data Analyzer","text":"<p>Create an agent that analyzes data with loops:</p> <pre><code>from typing import Dict\n\n@agent\nasync def analyze_metrics(metrics: Dict[str, float]) -&gt; str:\n    \"\"\"\n    # TODO: Write template that:\n    # - Iterates over metrics\n    # - Highlights values &gt; 80\n    # - Provides summary\n    \"\"\"\n    pass\n</code></pre>"},{"location":"en/tutorials/02-templates/#next-steps","title":"Next Steps","text":"<ul> <li>Tutorial 03: Type-Based Parsing - Learn how to parse structured responses</li> <li>API Reference: Templates - Complete template documentation</li> </ul>"},{"location":"en/tutorials/02-templates/#additional-resources","title":"Additional Resources","text":"<ul> <li>Jinja2 Documentation</li> <li>Prompt Engineering Guide</li> </ul>"},{"location":"en/tutorials/03-type-parsing/","title":"Tutorial 03: Type-Based Parsing","text":"<p>Learn how to use Python type hints to automatically parse LLM responses into structured data.</p>"},{"location":"en/tutorials/03-type-parsing/#what-youll-learn","title":"What You'll Learn","text":"<ul> <li>How type-based parsing works in Kagura</li> <li>Using Pydantic models for complex structures</li> <li>Handling lists, dicts, and nested objects</li> <li>Error handling and validation</li> </ul>"},{"location":"en/tutorials/03-type-parsing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Completed Tutorial 01: Basic Agent</li> <li>Basic understanding of Python type hints</li> <li>Familiarity with Pydantic (helpful but not required)</li> </ul>"},{"location":"en/tutorials/03-type-parsing/#why-type-based-parsing","title":"Why Type-Based Parsing?","text":"<p>LLMs return unstructured text, but your application needs structured data. Kagura automatically converts LLM responses to Python types based on your return type annotation.</p> <pre><code># Without parsing: raw string\nasync def get_age(name: str) -&gt; str:\n    \"\"\"What is {{ name }}'s age?\"\"\"\n    pass\n\nresult = await get_age(\"Alice\")\n# result = \"Alice is 25 years old.\"  \u2190 Hard to use in code\n\n# With parsing: structured data\nasync def get_age(name: str) -&gt; int:\n    \"\"\"What is {{ name }}'s age? Return only the number.\"\"\"\n    pass\n\nresult = await get_age(\"Alice\")\n# result = 25  \u2190 Easy to use!\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#basic-types","title":"Basic Types","text":""},{"location":"en/tutorials/03-type-parsing/#strings","title":"Strings","text":"<pre><code>from kagura import agent\n\n@agent\nasync def summarize(text: str) -&gt; str:\n    \"\"\"Summarize this in one sentence: {{ text }}\"\"\"\n    pass\n\nresult = await summarize(\"Long article...\")\n# result: str = \"Article summary.\"\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#numbers","title":"Numbers","text":"<pre><code>@agent\nasync def count_words(text: str) -&gt; int:\n    \"\"\"Count the words in: {{ text }}. Return only the number.\"\"\"\n    pass\n\nresult = await count_words(\"Hello world\")\n# result: int = 2\n\n@agent\nasync def calculate_average(numbers: list[int]) -&gt; float:\n    \"\"\"Calculate the average of {{ numbers }}. Return only the number.\"\"\"\n    pass\n\nresult = await calculate_average([1, 2, 3, 4, 5])\n# result: float = 3.0\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#booleans","title":"Booleans","text":"<pre><code>@agent\nasync def is_positive(text: str) -&gt; bool:\n    \"\"\"Is this text positive in sentiment? {{ text }}\n    Return only 'true' or 'false'.\"\"\"\n    pass\n\nresult = await is_positive(\"I love this!\")\n# result: bool = True\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#collections","title":"Collections","text":""},{"location":"en/tutorials/03-type-parsing/#lists","title":"Lists","text":"<pre><code>from typing import List\n\n@agent\nasync def extract_keywords(text: str) -&gt; List[str]:\n    \"\"\"Extract keywords from: {{ text }}\n    Return as JSON array.\"\"\"\n    pass\n\nresult = await extract_keywords(\"Python is great for AI\")\n# result: List[str] = [\"Python\", \"AI\", \"programming\"]\n</code></pre> <p>Supported List Types: - <code>List[str]</code>: List of strings - <code>List[int]</code>: List of integers - <code>List[float]</code>: List of floats - <code>List[YourModel]</code>: List of Pydantic models</p>"},{"location":"en/tutorials/03-type-parsing/#dictionaries","title":"Dictionaries","text":"<pre><code>from typing import Dict\n\n@agent\nasync def extract_metadata(text: str) -&gt; Dict[str, str]:\n    \"\"\"Extract metadata from: {{ text }}\n    Return as JSON object.\"\"\"\n    pass\n\nresult = await extract_metadata(\"Title: Hello\\nAuthor: Alice\")\n# result: Dict[str, str] = {\"title\": \"Hello\", \"author\": \"Alice\"}\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#pydantic-models","title":"Pydantic Models","text":"<p>For complex structures, use Pydantic models:</p> <pre><code>from pydantic import BaseModel, Field\nfrom typing import List\n\nclass Person(BaseModel):\n    name: str\n    age: int\n    email: str\n\n@agent\nasync def extract_person(text: str) -&gt; Person:\n    \"\"\"Extract person information from: {{ text }}\n    Return as JSON object with fields: name, age, email.\"\"\"\n    pass\n\nresult = await extract_person(\"Alice (25) - alice@example.com\")\n# result: Person = Person(name=\"Alice\", age=25, email=\"alice@example.com\")\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#model-validation","title":"Model Validation","text":"<p>Pydantic automatically validates the data:</p> <pre><code>from pydantic import BaseModel, EmailStr, validator\n\nclass User(BaseModel):\n    name: str\n    email: EmailStr  # Validates email format\n    age: int\n\n    @validator('age')\n    def age_must_be_positive(cls, v):\n        if v &lt; 0:\n            raise ValueError('age must be positive')\n        return v\n\n@agent\nasync def extract_user(text: str) -&gt; User:\n    \"\"\"Extract user info from: {{ text }}\n    Return as JSON: {name, email, age}\"\"\"\n    pass\n\n# Valid input\nresult = await extract_user(\"Bob, bob@example.com, 30\")\n# result: User(name=\"Bob\", email=\"bob@example.com\", age=30)\n\n# Invalid input (bad email)\n# Will raise ValidationError\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#field-descriptions","title":"Field Descriptions","text":"<p>Help the LLM understand fields:</p> <pre><code>class Article(BaseModel):\n    title: str = Field(description=\"The article title\")\n    summary: str = Field(description=\"Brief summary, max 100 words\")\n    tags: List[str] = Field(description=\"Relevant tags, 3-5 items\")\n    published: bool = Field(description=\"Whether article is published\")\n\n@agent\nasync def analyze_article(content: str) -&gt; Article:\n    \"\"\"Analyze this article: {{ content }}\n    Return as JSON with: title, summary, tags, published.\"\"\"\n    pass\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#nested-structures","title":"Nested Structures","text":""},{"location":"en/tutorials/03-type-parsing/#nested-models","title":"Nested Models","text":"<pre><code>class Address(BaseModel):\n    street: str\n    city: str\n    country: str\n\nclass Company(BaseModel):\n    name: str\n    address: Address\n    employees: int\n\n@agent\nasync def extract_company(text: str) -&gt; Company:\n    \"\"\"Extract company information from: {{ text }}\n    Return as JSON with nested address object.\"\"\"\n    pass\n\nresult = await extract_company(\"Acme Corp, 123 Main St, NYC, USA, 500 employees\")\n# result: Company(\n#     name=\"Acme Corp\",\n#     address=Address(street=\"123 Main St\", city=\"NYC\", country=\"USA\"),\n#     employees=500\n# )\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#lists-of-models","title":"Lists of Models","text":"<pre><code>class Task(BaseModel):\n    title: str\n    priority: str\n    estimated_hours: int\n\n@agent\nasync def extract_tasks(text: str) -&gt; List[Task]:\n    \"\"\"Extract tasks from: {{ text }}\n    Return as JSON array of objects.\"\"\"\n    pass\n\nresult = await extract_tasks(\"\"\"\n    1. Fix bug - High priority - 3 hours\n    2. Write docs - Low priority - 5 hours\n\"\"\")\n# result: List[Task] = [\n#     Task(title=\"Fix bug\", priority=\"High\", estimated_hours=3),\n#     Task(title=\"Write docs\", priority=\"Low\", estimated_hours=5)\n# ]\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#advanced-patterns","title":"Advanced Patterns","text":""},{"location":"en/tutorials/03-type-parsing/#optional-fields","title":"Optional Fields","text":"<pre><code>from typing import Optional\n\nclass Product(BaseModel):\n    name: str\n    price: float\n    discount: Optional[float] = None\n    description: Optional[str] = None\n\n@agent\nasync def extract_product(text: str) -&gt; Product:\n    \"\"\"Extract product info from: {{ text }}\n    Return as JSON. discount and description are optional.\"\"\"\n    pass\n\nresult = await extract_product(\"Laptop $999\")\n# result: Product(name=\"Laptop\", price=999.0, discount=None, description=None)\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#union-types","title":"Union Types","text":"<pre><code>from typing import Union\n\n@agent\nasync def parse_value(text: str) -&gt; Union[int, str]:\n    \"\"\"Parse the value from: {{ text }}\n    Return as number if numeric, otherwise as string.\"\"\"\n    pass\n\nresult1 = await parse_value(\"42\")        # returns int: 42\nresult2 = await parse_value(\"hello\")     # returns str: \"hello\"\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#enums","title":"Enums","text":"<pre><code>from enum import Enum\n\nclass Priority(str, Enum):\n    LOW = \"low\"\n    MEDIUM = \"medium\"\n    HIGH = \"high\"\n\nclass Issue(BaseModel):\n    title: str\n    priority: Priority\n\n@agent\nasync def extract_issue(text: str) -&gt; Issue:\n    \"\"\"Extract issue from: {{ text }}\n    Priority must be: low, medium, or high.\"\"\"\n    pass\n\nresult = await extract_issue(\"Fix login bug - high priority\")\n# result: Issue(title=\"Fix login bug\", priority=Priority.HIGH)\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#best-practices","title":"Best Practices","text":""},{"location":"en/tutorials/03-type-parsing/#1-clear-return-format-instructions","title":"1. Clear Return Format Instructions","text":"<pre><code># \u2705 Good: Explicit format\n@agent\nasync def extract_data(text: str) -&gt; Person:\n    \"\"\"Extract person from: {{ text }}\n    Return as JSON: {\"name\": str, \"age\": int, \"email\": str}\"\"\"\n    pass\n\n# \u274c Bad: Unclear format\n@agent\nasync def extract_data(text: str) -&gt; Person:\n    \"\"\"Get person from: {{ text }}\"\"\"\n    pass\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#2-use-field-descriptions","title":"2. Use Field Descriptions","text":"<pre><code># \u2705 Good: Descriptive fields\nclass Report(BaseModel):\n    summary: str = Field(description=\"Executive summary, 2-3 sentences\")\n    findings: List[str] = Field(description=\"Key findings, bullet points\")\n    score: int = Field(description=\"Overall score 0-100\")\n\n# \u274c Bad: No descriptions\nclass Report(BaseModel):\n    summary: str\n    findings: List[str]\n    score: int\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#3-validate-constraints","title":"3. Validate Constraints","text":"<pre><code>from pydantic import validator, Field\n\nclass Temperature(BaseModel):\n    celsius: float = Field(ge=-273.15, description=\"Temperature in Celsius\")\n\n    @validator('celsius')\n    def validate_temp(cls, v):\n        if v &lt; -273.15:\n            raise ValueError('Temperature below absolute zero')\n        return v\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#4-handle-errors-gracefully","title":"4. Handle Errors Gracefully","text":"<pre><code>from pydantic import ValidationError\n\n@agent\nasync def extract_safe(text: str) -&gt; Optional[Person]:\n    \"\"\"Extract person from: {{ text }}\n    Return as JSON or null if not found.\"\"\"\n    pass\n\ntry:\n    result = await extract_safe(\"No person here\")\nexcept ValidationError as e:\n    print(f\"Validation failed: {e}\")\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#error-handling","title":"Error Handling","text":""},{"location":"en/tutorials/03-type-parsing/#validation-errors","title":"Validation Errors","text":"<pre><code>from pydantic import ValidationError\n\n@agent\nasync def parse_age(text: str) -&gt; int:\n    \"\"\"Extract age from: {{ text }}. Return only the number.\"\"\"\n    pass\n\ntry:\n    result = await parse_age(\"Alice is twenty-five\")\n    # LLM returns \"twenty-five\" instead of 25\nexcept ValidationError as e:\n    print(f\"Failed to parse: {e}\")\n    # Handle error: retry, use default, etc.\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#missing-fields","title":"Missing Fields","text":"<pre><code>class Contact(BaseModel):\n    name: str\n    email: str\n    phone: str  # Required\n\n@agent\nasync def extract_contact(text: str) -&gt; Contact:\n    \"\"\"Extract contact from: {{ text }}\n    Return JSON with: name, email, phone.\"\"\"\n    pass\n\n# If LLM omits phone, ValidationError is raised\ntry:\n    result = await extract_contact(\"John, john@example.com\")\nexcept ValidationError as e:\n    print(\"Missing required field:\", e)\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#type-mismatches","title":"Type Mismatches","text":"<pre><code>@agent\nasync def get_count(text: str) -&gt; int:\n    \"\"\"Count items in: {{ text }}. Return only the number.\"\"\"\n    pass\n\n# If LLM returns \"five\" instead of 5\ntry:\n    result = await get_count(\"five items\")\nexcept ValidationError:\n    # Retry with more explicit instructions\n    @agent\n    async def get_count_strict(text: str) -&gt; int:\n        \"\"\"Count items in: {{ text }}.\n        Return ONLY a numeric digit, no words.\"\"\"\n        pass\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#common-patterns","title":"Common Patterns","text":""},{"location":"en/tutorials/03-type-parsing/#progressive-extraction","title":"Progressive Extraction","text":"<pre><code># Step 1: Extract basic info\n@agent\nasync def extract_basic(text: str) -&gt; Dict[str, str]:\n    \"\"\"Extract key-value pairs from: {{ text }}\"\"\"\n    pass\n\n# Step 2: Parse into model\nbasic = await extract_basic(text)\nperson = Person(**basic)\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#fallback-values","title":"Fallback Values","text":"<pre><code>class Config(BaseModel):\n    timeout: int = 30  # Default value\n    retries: int = 3\n    debug: bool = False\n\n@agent\nasync def parse_config(text: str) -&gt; Config:\n    \"\"\"Parse config from: {{ text }}\n    Use defaults for missing values.\"\"\"\n    pass\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#multi-step-validation","title":"Multi-Step Validation","text":"<pre><code>class ValidatedData(BaseModel):\n    data: str\n\n    @validator('data')\n    def clean_data(cls, v):\n        # Clean and validate\n        return v.strip().lower()\n\n@agent\nasync def extract_and_validate(text: str) -&gt; ValidatedData:\n    \"\"\"Extract data from: {{ text }}\"\"\"\n    pass\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#practice-exercises","title":"Practice Exercises","text":""},{"location":"en/tutorials/03-type-parsing/#exercise-1-contact-extractor","title":"Exercise 1: Contact Extractor","text":"<p>Create a model for contact information:</p> <pre><code>class Contact(BaseModel):\n    # TODO: Add fields for name, email, phone, company\n    pass\n\n@agent\nasync def extract_contact(text: str) -&gt; Contact:\n    \"\"\"# TODO: Write prompt to extract contact info\"\"\"\n    pass\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#exercise-2-product-list-parser","title":"Exercise 2: Product List Parser","text":"<p>Parse a list of products:</p> <pre><code>class Product(BaseModel):\n    # TODO: Add fields for name, price, stock\n    pass\n\n@agent\nasync def parse_products(text: str) -&gt; List[Product]:\n    \"\"\"# TODO: Write prompt to parse product list\"\"\"\n    pass\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#exercise-3-nested-organization","title":"Exercise 3: Nested Organization","text":"<p>Create a nested structure:</p> <pre><code>class Employee(BaseModel):\n    # TODO: name, role, salary\n    pass\n\nclass Department(BaseModel):\n    # TODO: name, employees list, budget\n    pass\n\n@agent\nasync def parse_org(text: str) -&gt; Department:\n    \"\"\"# TODO: Write prompt to parse organization\"\"\"\n    pass\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#troubleshooting","title":"Troubleshooting","text":""},{"location":"en/tutorials/03-type-parsing/#llm-returns-wrong-format","title":"LLM Returns Wrong Format","text":"<pre><code># Problem: LLM returns \"The age is 25\" instead of just \"25\"\n\n# Solution: Be more explicit\n@agent\nasync def get_age(name: str) -&gt; int:\n    \"\"\"What is {{ name }}'s age?\n    IMPORTANT: Return ONLY the numeric age, nothing else.\n    Example: 25\"\"\"\n    pass\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#validation-fails-repeatedly","title":"Validation Fails Repeatedly","text":"<pre><code># Problem: LLM returns data that fails validation\n\n# Solution: Relax constraints or provide examples\nclass Person(BaseModel):\n    age: int = Field(ge=0, le=150, description=\"Age between 0-150\")\n\n@agent\nasync def extract_person(text: str) -&gt; Person:\n    \"\"\"Extract person from: {{ text }}\n    Return JSON: {\"name\": \"string\", \"age\": number between 0-150}\n    Example: {\"name\": \"Alice\", \"age\": 25}\"\"\"\n    pass\n</code></pre>"},{"location":"en/tutorials/03-type-parsing/#next-steps","title":"Next Steps","text":"<ul> <li>Tutorial 04: Code Execution - Execute Python code with AI</li> <li>API Reference: Type Parsing - Complete parsing documentation</li> <li>Pydantic Documentation - Learn more about Pydantic</li> </ul>"},{"location":"en/tutorials/03-type-parsing/#additional-resources","title":"Additional Resources","text":"<ul> <li>Type Hints Cheat Sheet</li> <li>Pydantic Field Types</li> </ul>"},{"location":"en/tutorials/04-code-execution/","title":"Tutorial 04: Code Execution","text":"<p>Learn how to safely execute Python code generated by AI agents.</p>"},{"location":"en/tutorials/04-code-execution/#what-youll-learn","title":"What You'll Learn","text":"<ul> <li>How to use the <code>execute_code</code> agent</li> <li>Security constraints and sandboxing</li> <li>Working with execution results</li> <li>Building code-generating workflows</li> <li>Best practices for code execution</li> </ul>"},{"location":"en/tutorials/04-code-execution/#prerequisites","title":"Prerequisites","text":"<ul> <li>Completed Tutorial 01: Basic Agent</li> <li>Understanding of Python basics</li> <li>Familiarity with security concepts (helpful)</li> </ul>"},{"location":"en/tutorials/04-code-execution/#why-code-execution","title":"Why Code Execution?","text":"<p>Sometimes the best way to solve a problem is to write and execute code. Kagura provides a safe way to let AI agents generate and run Python code:</p> <pre><code>from kagura.agents import execute_code\n\nresult = await execute_code(\"Calculate the factorial of 10\")\n\nif result[\"success\"]:\n    print(result[\"result\"])  # 3628800\n    print(result[\"code\"])    # Shows the generated code\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#basic-usage","title":"Basic Usage","text":""},{"location":"en/tutorials/04-code-execution/#simple-calculations","title":"Simple Calculations","text":"<pre><code>from kagura.agents import execute_code\n\n# Mathematical operations\nresult = await execute_code(\"What is 2^10?\")\nprint(result[\"result\"])  # 1024\n\n# Data processing\nresult = await execute_code(\"Sum the numbers from 1 to 100\")\nprint(result[\"result\"])  # 5050\n\n# String operations\nresult = await execute_code(\"Reverse the string 'hello'\")\nprint(result[\"result\"])  # \"olleh\"\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#understanding-the-result","title":"Understanding the Result","text":"<p>The <code>execute_code</code> function returns a dictionary:</p> <pre><code>result = {\n    \"success\": True,         # Whether execution succeeded\n    \"result\": 3628800,       # The value of the `result` variable\n    \"code\": \"...\",          # The generated Python code\n    \"error\": None           # Error message if failed\n}\n</code></pre> <p>Important: The executed code must set a variable named <code>result</code>:</p> <pre><code># \u2705 Good: Sets result variable\nresult = await execute_code(\"Calculate 5 * 5\")\n# Generated code: result = 5 * 5\n\n# \u274c Bad: Doesn't set result\nresult = await execute_code(\"Print hello world\")\n# No result variable \u2192 result[\"result\"] is None\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#data-processing","title":"Data Processing","text":""},{"location":"en/tutorials/04-code-execution/#working-with-lists","title":"Working with Lists","text":"<pre><code># Filter data\nresult = await execute_code(\"\"\"\nFind all even numbers in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\"\"\")\nprint(result[\"result\"])  # [2, 4, 6, 8, 10]\n\n# Transform data\nresult = await execute_code(\"\"\"\nSquare each number in [1, 2, 3, 4, 5]\n\"\"\")\nprint(result[\"result\"])  # [1, 4, 9, 16, 25]\n\n# Aggregate data\nresult = await execute_code(\"\"\"\nCalculate the average of [10, 20, 30, 40, 50]\n\"\"\")\nprint(result[\"result\"])  # 30.0\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#working-with-dictionaries","title":"Working with Dictionaries","text":"<pre><code># Extract data\nresult = await execute_code(\"\"\"\nFrom this data: {'name': 'Alice', 'age': 25, 'city': 'NYC'}\nExtract the age\n\"\"\")\nprint(result[\"result\"])  # 25\n\n# Transform data\nresult = await execute_code(\"\"\"\nConvert this data to uppercase keys:\n{'name': 'Alice', 'role': 'engineer'}\n\"\"\")\nprint(result[\"result\"])  # {'NAME': 'Alice', 'ROLE': 'engineer'}\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#json-processing","title":"JSON Processing","text":"<pre><code>import json\n\n# Parse and analyze JSON\njson_data = json.dumps({\n    \"users\": [\n        {\"name\": \"Alice\", \"score\": 95},\n        {\"name\": \"Bob\", \"score\": 87},\n        {\"name\": \"Charlie\", \"score\": 92}\n    ]\n})\n\nresult = await execute_code(f\"\"\"\nParse this JSON and find the average score:\n{json_data}\n\"\"\")\nprint(result[\"result\"])  # 91.33...\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#advanced-features","title":"Advanced Features","text":""},{"location":"en/tutorials/04-code-execution/#multi-step-calculations","title":"Multi-Step Calculations","text":"<pre><code>result = await execute_code(\"\"\"\n1. Create a list of numbers from 1 to 20\n2. Filter only prime numbers\n3. Calculate their sum\n\"\"\")\n\nprint(result[\"code\"])    # See the generated algorithm\nprint(result[\"result\"])  # Sum of primes\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#custom-algorithms","title":"Custom Algorithms","text":"<pre><code>result = await execute_code(\"\"\"\nImplement the Fibonacci sequence up to the 10th number\n\"\"\")\n\nprint(result[\"result\"])  # [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#data-analysis","title":"Data Analysis","text":"<pre><code>result = await execute_code(\"\"\"\nGiven these test scores: [78, 92, 85, 88, 95, 72, 90]\nCalculate:\n- Mean\n- Median\n- Mode (if exists)\nReturn as a dictionary\n\"\"\")\n\nprint(result[\"result\"])\n# {'mean': 85.71, 'median': 88, 'mode': None}\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#security","title":"Security","text":"<p>Kagura executes code in a sandboxed environment with strict security constraints.</p>"},{"location":"en/tutorials/04-code-execution/#allowed-modules","title":"Allowed Modules","text":"<pre><code># \u2705 Allowed: Safe standard library modules\nresult = await execute_code(\"\"\"\nimport math\nresult = math.sqrt(16)\n\"\"\")\n# Success: 4.0\n\nresult = await execute_code(\"\"\"\nimport json\nresult = json.dumps({'key': 'value'})\n\"\"\")\n# Success: '{\"key\": \"value\"}'\n\nresult = await execute_code(\"\"\"\nfrom datetime import datetime\nresult = datetime.now().year\n\"\"\")\n# Success: 2025\n</code></pre> <p>Allowed modules: - <code>math</code>, <code>random</code>, <code>statistics</code> - <code>json</code>, <code>re</code>, <code>string</code> - <code>datetime</code>, <code>collections</code>, <code>itertools</code> - <code>functools</code>, <code>operator</code>, <code>copy</code></p>"},{"location":"en/tutorials/04-code-execution/#forbidden-operations","title":"Forbidden Operations","text":"<pre><code># \u274c File system access\nresult = await execute_code(\"Read file config.txt\")\n# Error: Forbidden import: os\n\n# \u274c Network access\nresult = await execute_code(\"Fetch data from https://api.example.com\")\n# Error: Forbidden import: requests\n\n# \u274c System commands\nresult = await execute_code(\"Run shell command ls\")\n# Error: Forbidden import: subprocess\n\n# \u274c Code execution\nresult = await execute_code(\"Execute eval('1+1')\")\n# Error: Forbidden operation: eval\n</code></pre> <p>Forbidden modules/operations: - File I/O: <code>os</code>, <code>sys</code>, <code>io</code>, <code>pathlib</code>, <code>open()</code> - Network: <code>socket</code>, <code>urllib</code>, <code>requests</code> - Execution: <code>eval</code>, <code>exec</code>, <code>compile</code>, <code>__import__</code> - System: <code>subprocess</code>, <code>multiprocessing</code></p>"},{"location":"en/tutorials/04-code-execution/#timeout-protection","title":"Timeout Protection","text":"<pre><code>from kagura.core.executor import CodeExecutor\n\n# Default timeout: 5 seconds\nexecutor = CodeExecutor()\n\n# Custom timeout\nexecutor = CodeExecutor(timeout=10.0)\n\nresult = await executor.execute(\"\"\"\nimport time\ntime.sleep(15)  # Will timeout after 10 seconds\nresult = \"done\"\n\"\"\")\n\nprint(result.success)  # False\nprint(result.error)    # \"Execution timeout\"\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#custom-codeexecutor","title":"Custom CodeExecutor","text":"<p>For advanced use cases, use <code>CodeExecutor</code> directly:</p> <pre><code>from kagura.core.executor import CodeExecutor\n\n# Create executor with custom settings\nexecutor = CodeExecutor(\n    timeout=10.0,           # 10 second timeout\n    max_output_size=1000    # Limit output size\n)\n\n# Execute code\nresult = await executor.execute(\"\"\"\nresult = sum(range(1, 1001))\n\"\"\")\n\nprint(result.success)    # True\nprint(result.result)     # 500500\nprint(result.code)       # Generated code\nprint(result.error)      # None\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#execution-result-object","title":"Execution Result Object","text":"<pre><code>from kagura.core.executor import ExecutionResult\n\nresult = await executor.execute(\"result = 42\")\n\n# Result attributes\nprint(result.success)    # bool: True/False\nprint(result.result)     # Any: The result value\nprint(result.code)       # str: Executed code\nprint(result.error)      # Optional[str]: Error message\nprint(result.stdout)     # str: Standard output\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#building-code-workflows","title":"Building Code Workflows","text":""},{"location":"en/tutorials/04-code-execution/#plan-code-execute-pattern","title":"Plan-Code-Execute Pattern","text":"<pre><code>from kagura import agent\nfrom kagura.agents import execute_code\n\n@agent\nasync def plan_solution(problem: str) -&gt; str:\n    \"\"\"\n    Analyze this problem and describe the algorithm:\n    {{ problem }}\n\n    Provide step-by-step approach.\n    \"\"\"\n    pass\n\nasync def solve_with_code(problem: str):\n    # Step 1: Plan\n    plan = await plan_solution(problem)\n    print(f\"Plan: {plan}\")\n\n    # Step 2: Execute\n    result = await execute_code(problem)\n\n    # Step 3: Verify\n    if result[\"success\"]:\n        print(f\"Result: {result['result']}\")\n        print(f\"Code:\\n{result['code']}\")\n    else:\n        print(f\"Error: {result['error']}\")\n\n# Use it\nawait solve_with_code(\"Find all prime numbers between 1 and 50\")\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#iterative-refinement","title":"Iterative Refinement","text":"<pre><code>async def solve_with_retry(problem: str, max_retries: int = 3):\n    for attempt in range(max_retries):\n        result = await execute_code(problem)\n\n        if result[\"success\"]:\n            return result[\"result\"]\n\n        # If failed, try with more specific instructions\n        problem = f\"{problem}\\n\\nPrevious error: {result['error']}\\nPlease fix and try again.\"\n\n    raise Exception(f\"Failed after {max_retries} attempts\")\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#code-review-agent","title":"Code Review Agent","text":"<pre><code>@agent\nasync def review_code(code: str) -&gt; str:\n    \"\"\"\n    Review this Python code for:\n    - Correctness\n    - Efficiency\n    - Best practices\n\n    Code:\n    ```python\n    {{ code }}\n    ```\n    \"\"\"\n    pass\n\nasync def code_and_review(problem: str):\n    # Generate code\n    result = await execute_code(problem)\n\n    if result[\"success\"]:\n        # Review the code\n        review = await review_code(result[\"code\"])\n        print(f\"Review: {review}\")\n\n        return result[\"result\"]\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#best-practices","title":"Best Practices","text":""},{"location":"en/tutorials/04-code-execution/#1-clear-specifications","title":"1. Clear Specifications","text":"<pre><code># \u2705 Good: Clear requirements\nresult = await execute_code(\"\"\"\nCalculate the factorial of 10.\nStore the result in a variable named 'result'.\n\"\"\")\n\n# \u274c Bad: Vague request\nresult = await execute_code(\"Do factorial stuff\")\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#2-handle-errors","title":"2. Handle Errors","text":"<pre><code># \u2705 Good: Error handling\nresult = await execute_code(problem)\n\nif result[\"success\"]:\n    process_result(result[\"result\"])\nelse:\n    logger.error(f\"Code execution failed: {result['error']}\")\n    fallback_solution()\n\n# \u274c Bad: No error handling\nresult = await execute_code(problem)\nprocess_result(result[\"result\"])  # May fail!\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#3-validate-results","title":"3. Validate Results","text":"<pre><code># \u2705 Good: Validate output\nresult = await execute_code(\"Calculate sum of [1,2,3]\")\n\nif result[\"success\"]:\n    value = result[\"result\"]\n    if isinstance(value, (int, float)) and value &gt; 0:\n        use_result(value)\n    else:\n        raise ValueError(f\"Unexpected result: {value}\")\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#4-provide-context","title":"4. Provide Context","text":"<pre><code># \u2705 Good: Context and examples\nresult = await execute_code(f\"\"\"\nGiven this data: {json.dumps(data)}\nExtract all items where status is 'active'\nReturn as a list\n\nExample output: [item1, item2, ...]\n\"\"\")\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#5-use-appropriate-timeout","title":"5. Use Appropriate Timeout","text":"<pre><code># \u2705 Good: Adjust timeout based on task\nexecutor = CodeExecutor(timeout=1.0)   # Quick tasks\nresult = await executor.execute(\"result = 2 + 2\")\n\nexecutor = CodeExecutor(timeout=30.0)  # Complex tasks\nresult = await executor.execute(\"Analyze large dataset...\")\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#common-patterns","title":"Common Patterns","text":""},{"location":"en/tutorials/04-code-execution/#data-transformation-pipeline","title":"Data Transformation Pipeline","text":"<pre><code>async def transform_data(data: list, operations: list[str]):\n    \"\"\"Apply multiple transformations to data\"\"\"\n    current_data = data\n\n    for operation in operations:\n        result = await execute_code(f\"\"\"\nApply this operation to the data: {operation}\nData: {current_data}\n\"\"\")\n        if result[\"success\"]:\n            current_data = result[\"result\"]\n        else:\n            raise Exception(f\"Failed: {result['error']}\")\n\n    return current_data\n\n# Use it\ndata = [1, 2, 3, 4, 5]\noperations = [\n    \"Multiply each by 2\",\n    \"Filter numbers &gt; 5\",\n    \"Sum all numbers\"\n]\nresult = await transform_data(data, operations)\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#calculator-agent","title":"Calculator Agent","text":"<pre><code>@agent\nasync def calculate(expression: str) -&gt; float:\n    \"\"\"A calculator agent that evaluates expressions\"\"\"\n    result = await execute_code(f\"Calculate: {expression}\")\n\n    if result[\"success\"]:\n        return result[\"result\"]\n    else:\n        raise ValueError(f\"Calculation failed: {result['error']}\")\n\n# Use it\nanswer = await calculate(\"(5 + 3) * 2 - 10\")\nprint(answer)  # 6.0\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#data-analysis-agent","title":"Data Analysis Agent","text":"<pre><code>async def analyze_dataset(data: list[dict], query: str):\n    \"\"\"Analyze structured data with natural language\"\"\"\n    data_str = json.dumps(data)\n\n    result = await execute_code(f\"\"\"\nDataset: {data_str}\nQuery: {query}\n\nAnalyze the dataset and answer the query.\n\"\"\")\n\n    return result[\"result\"] if result[\"success\"] else None\n\n# Use it\nsales_data = [\n    {\"product\": \"A\", \"revenue\": 1000},\n    {\"product\": \"B\", \"revenue\": 1500},\n    {\"product\": \"C\", \"revenue\": 800}\n]\n\nresult = await analyze_dataset(\n    sales_data,\n    \"What is the total revenue?\"\n)\nprint(result)  # 3300\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#practice-exercises","title":"Practice Exercises","text":""},{"location":"en/tutorials/04-code-execution/#exercise-1-prime-number-finder","title":"Exercise 1: Prime Number Finder","text":"<pre><code># TODO: Create a function that finds prime numbers\nasync def find_primes(n: int):\n    \"\"\"Find all prime numbers up to n\"\"\"\n    result = await execute_code(f\"\"\"\n    Find all prime numbers up to {n}\n    Return as a list\n    \"\"\")\n    return result[\"result\"] if result[\"success\"] else []\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#exercise-2-data-aggregator","title":"Exercise 2: Data Aggregator","text":"<pre><code># TODO: Create a function that aggregates data\nasync def aggregate_sales(sales: list[dict]) -&gt; dict:\n    \"\"\"Calculate total, average, min, max from sales data\"\"\"\n    # Use execute_code to analyze the sales list\n    pass\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#exercise-3-text-analyzer","title":"Exercise 3: Text Analyzer","text":"<pre><code># TODO: Create a function that analyzes text\nasync def analyze_text(text: str) -&gt; dict:\n    \"\"\"\n    Analyze text and return:\n    - word_count\n    - unique_words\n    - most_common_word\n    - average_word_length\n    \"\"\"\n    pass\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#troubleshooting","title":"Troubleshooting","text":""},{"location":"en/tutorials/04-code-execution/#result-is-none","title":"Result is None","text":"<pre><code># Problem: result[\"result\"] is None\n\n# Cause: Code doesn't set 'result' variable\nresult = await execute_code(\"print(42)\")  # Only prints\n\n# Solution: Ask for explicit result\nresult = await execute_code(\"Calculate 42 and store in result variable\")\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#timeout-errors","title":"Timeout Errors","text":"<pre><code># Problem: Execution timeout\n\n# Cause: Complex operation or infinite loop\nresult = await execute_code(\"Calculate factorial of 100000\")\n\n# Solution: Increase timeout or simplify\nexecutor = CodeExecutor(timeout=30.0)\nresult = await executor.execute(\"Calculate factorial of 100\")\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#security-errors","title":"Security Errors","text":"<pre><code># Problem: Forbidden import error\n\n# Cause: Trying to use restricted module\nresult = await execute_code(\"Read file data.txt\")\n\n# Solution: Use allowed modules or provide data\nresult = await execute_code(f\"Process this data: {data}\")\n</code></pre>"},{"location":"en/tutorials/04-code-execution/#next-steps","title":"Next Steps","text":"<ul> <li>Tutorial 05: Interactive REPL - Interactive development environment</li> <li>API Reference: Code Execution - Complete executor documentation</li> <li>Examples: Code Generator - Full example</li> </ul>"},{"location":"en/tutorials/04-code-execution/#additional-resources","title":"Additional Resources","text":"<ul> <li>Python Security Best Practices</li> <li>AST Module Documentation</li> </ul>"},{"location":"en/tutorials/05-repl/","title":"Tutorial 5: Using the Interactive REPL","text":"<p>Learn how to use Kagura AI's interactive REPL for rapid prototyping and testing.</p>"},{"location":"en/tutorials/05-repl/#what-is-the-repl","title":"What is the REPL?","text":"<p>REPL stands for Read-Eval-Print Loop - an interactive environment where you can: - Define agents on the fly - Test them immediately - Iterate quickly without writing files - Experiment with different prompts and models</p>"},{"location":"en/tutorials/05-repl/#starting-the-repl","title":"Starting the REPL","text":"<pre><code>kagura repl\n</code></pre> <p>You'll see the welcome screen:</p> <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Kagura AI REPL                       \u2502\n\u2502 Python-First AI Agent Framework      \u2502\n\u2502                                      \u2502\n\u2502 Type /help for commands, /exit to    \u2502\n\u2502 quit                                 \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n&gt;&gt;&gt;\n</code></pre>"},{"location":"en/tutorials/05-repl/#environment-setup","title":"Environment Setup","text":""},{"location":"en/tutorials/05-repl/#api-keys-with-env-file","title":"API Keys with .env File","text":"<p>The REPL automatically loads environment variables from a <code>.env</code> file in your project directory. This is the recommended way to manage API keys:</p> <p>Step 1: Create a <code>.env</code> file in your project root:</p> <pre><code># .env\nOPENAI_API_KEY=sk-...\nANTHROPIC_API_KEY=sk-ant-...\nGOOGLE_API_KEY=...\n</code></pre> <p>Step 2: Start the REPL (the <code>.env</code> file is loaded automatically):</p> <pre><code>kagura repl\n</code></pre> <p>That's it! No need to manually export environment variables.</p> <p>Note: Copy <code>.env.example</code> to <code>.env</code> to get started: <pre><code>cp .env.example .env\n# Edit .env and add your API keys\n</code></pre></p>"},{"location":"en/tutorials/05-repl/#command-history","title":"Command History","text":"<p>The REPL automatically saves your command history to <code>~/.kagura_history</code>. This means: - Up/Down arrows work to navigate your previous commands - History persists across REPL sessions - Up to 1000 commands are saved</p> <p>This makes it easy to: - Rerun previous commands - Edit and retry agent definitions - Resume work from previous sessions</p>"},{"location":"en/tutorials/05-repl/#basic-usage","title":"Basic Usage","text":""},{"location":"en/tutorials/05-repl/#import-and-define","title":"Import and Define","text":"<pre><code>&gt;&gt;&gt; from kagura import agent\n&gt;&gt;&gt;\n&gt;&gt;&gt; @agent\n... async def hello(name: str) -&gt; str:\n...     '''Say hello to {{ name }}'''\n...     pass\n...\nAgent 'hello' defined\n</code></pre>"},{"location":"en/tutorials/05-repl/#call-the-agent","title":"Call the Agent","text":"<pre><code>&gt;&gt;&gt; await hello(\"World\")\nHello, World! How can I help you today?\n</code></pre> <p>That's it! No files, no boilerplate - just define and run.</p>"},{"location":"en/tutorials/05-repl/#repl-commands","title":"REPL Commands","text":"<p>Commands start with <code>/</code>:</p>"},{"location":"en/tutorials/05-repl/#help-show-help","title":"/help - Show Help","text":"<pre><code>&gt;&gt;&gt; /help\nAvailable Commands:\n  /help      - Show this help message\n  /agents    - List all defined agents\n  /exit      - Exit REPL\n  /clear     - Clear screen\n  /model     - Show or set default model\n  /temp      - Show or set default temperature\n</code></pre>"},{"location":"en/tutorials/05-repl/#agents-list-agents","title":"/agents - List Agents","text":"<pre><code>&gt;&gt;&gt; /agents\nDefined Agents:\n  hello(name: str) -&gt; str\n  translate(text: str, lang: str) -&gt; str\n</code></pre>"},{"location":"en/tutorials/05-repl/#model-change-model","title":"/model - Change Model","text":"<pre><code>&gt;&gt;&gt; /model\nCurrent model: gpt-4o-mini\n\n&gt;&gt;&gt; /model gpt-4o\nModel changed to: gpt-4o\n</code></pre>"},{"location":"en/tutorials/05-repl/#temp-change-temperature","title":"/temp - Change Temperature","text":"<pre><code>&gt;&gt;&gt; /temp\nCurrent temperature: 0.7\n\n&gt;&gt;&gt; /temp 1.2\nTemperature changed to: 1.2\n</code></pre>"},{"location":"en/tutorials/05-repl/#clear-clear-screen","title":"/clear - Clear Screen","text":"<pre><code>&gt;&gt;&gt; /clear\n# Screen clears\n</code></pre>"},{"location":"en/tutorials/05-repl/#exit-exit-repl","title":"/exit - Exit REPL","text":"<pre><code>&gt;&gt;&gt; /exit\nGoodbye!\n</code></pre>"},{"location":"en/tutorials/05-repl/#multi-line-input","title":"Multi-line Input","text":"<p>The REPL automatically detects multi-line statements:</p> <pre><code>&gt;&gt;&gt; from pydantic import BaseModel\n&gt;&gt;&gt;\n&gt;&gt;&gt; class Person(BaseModel):\n...     name: str\n...     age: int\n...     occupation: str\n...\n&gt;&gt;&gt;\n&gt;&gt;&gt; @agent\n... async def extract_person(text: str) -&gt; Person:\n...     '''Extract person info from: {{ text }}'''\n...     pass\n...\nAgent 'extract_person' defined\n</code></pre>"},{"location":"en/tutorials/05-repl/#practical-workflow","title":"Practical Workflow","text":""},{"location":"en/tutorials/05-repl/#1-quick-testing","title":"1. Quick Testing","text":"<p>Test ideas quickly:</p> <pre><code>&gt;&gt;&gt; @agent\n... async def v1(text: str) -&gt; str:\n...     '''Summarize: {{ text }}'''\n...     pass\n...\n&gt;&gt;&gt; await v1(\"Long text here...\")\nSummary here...\n\n&gt;&gt;&gt; @agent\n... async def v2(text: str) -&gt; str:\n...     '''Summarize in bullet points: {{ text }}'''\n...     pass\n...\n&gt;&gt;&gt; await v2(\"Long text here...\")\n- Point 1\n- Point 2\n</code></pre>"},{"location":"en/tutorials/05-repl/#2-iterative-refinement","title":"2. Iterative Refinement","text":"<p>Refine your prompts:</p> <pre><code>&gt;&gt;&gt; @agent\n... async def summarize_v1(text: str) -&gt; str:\n...     '''Summarize: {{ text }}'''\n...     pass\n...\n&gt;&gt;&gt; result1 = await summarize_v1(\"Long article...\")\n&gt;&gt;&gt; # Not quite right, let's try again\n\n&gt;&gt;&gt; @agent\n... async def summarize_v2(text: str) -&gt; str:\n...     '''Provide a concise summary in 2-3 sentences: {{ text }}'''\n...     pass\n...\n&gt;&gt;&gt; result2 = await summarize_v2(\"Long article...\")\n&gt;&gt;&gt; # Better!\n</code></pre>"},{"location":"en/tutorials/05-repl/#3-debugging","title":"3. Debugging","text":"<p>Inspect results:</p> <pre><code>&gt;&gt;&gt; result = await extract_person(\"Alice is 30 years old and works as an engineer\")\n&gt;&gt;&gt; print(result)\nPerson(name='Alice', age=30, occupation='engineer')\n\n&gt;&gt;&gt; print(type(result))\n&lt;class '__main__.Person'&gt;\n\n&gt;&gt;&gt; print(result.model_dump())\n{'name': 'Alice', 'age': 30, 'occupation': 'engineer'}\n</code></pre>"},{"location":"en/tutorials/05-repl/#4-composition","title":"4. Composition","text":"<p>Chain agents together:</p> <pre><code>&gt;&gt;&gt; @agent\n... async def extract_topic(text: str) -&gt; str:\n...     '''Extract the main topic from: {{ text }}'''\n...     pass\n...\n&gt;&gt;&gt; @agent\n... async def elaborate(topic: str) -&gt; str:\n...     '''Elaborate on: {{ topic }}'''\n...     pass\n...\n&gt;&gt;&gt; topic = await extract_topic(\"Quantum computing is revolutionary...\")\n&gt;&gt;&gt; await elaborate(topic)\nQuantum computing is a revolutionary technology...\n</code></pre>"},{"location":"en/tutorials/05-repl/#advanced-features","title":"Advanced Features","text":""},{"location":"en/tutorials/05-repl/#using-code-execution","title":"Using Code Execution","text":"<pre><code>&gt;&gt;&gt; from kagura.agents import execute_code\n&gt;&gt;&gt;\n&gt;&gt;&gt; result = await execute_code(\"Calculate fibonacci(15)\")\n&gt;&gt;&gt; result[\"result\"]\n610\n</code></pre>"},{"location":"en/tutorials/05-repl/#trying-different-models","title":"Trying Different Models","text":"<pre><code>&gt;&gt;&gt; @agent(model=\"gpt-4o\")\n... async def advanced(query: str) -&gt; str:\n...     '''Answer with deep analysis: {{ query }}'''\n...     pass\n...\n&gt;&gt;&gt; @agent(model=\"gpt-4o-mini\")\n... async def simple(query: str) -&gt; str:\n...     '''Answer briefly: {{ query }}'''\n...     pass\n...\n</code></pre>"},{"location":"en/tutorials/05-repl/#custom-temperature","title":"Custom Temperature","text":"<pre><code>&gt;&gt;&gt; @agent(temperature=0.1)  # Very deterministic\n... async def factual(query: str) -&gt; str:\n...     '''Provide factual answer: {{ query }}'''\n...     pass\n...\n&gt;&gt;&gt; @agent(temperature=1.5)  # More creative\n... async def creative(topic: str) -&gt; str:\n...     '''Write a creative story about: {{ topic }}'''\n...     pass\n...\n</code></pre>"},{"location":"en/tutorials/05-repl/#tips-and-tricks","title":"Tips and Tricks","text":""},{"location":"en/tutorials/05-repl/#1-use-variables","title":"1. Use Variables","text":"<p>Store results for reuse:</p> <pre><code>&gt;&gt;&gt; text = \"Long article text here...\"\n&gt;&gt;&gt; summary = await summarize(text)\n&gt;&gt;&gt; keywords = await extract_keywords(summary)\n</code></pre>"},{"location":"en/tutorials/05-repl/#2-quick-imports","title":"2. Quick Imports","text":"<p>Import common modules at the start:</p> <pre><code>&gt;&gt;&gt; from kagura import agent\n&gt;&gt;&gt; from pydantic import BaseModel\n&gt;&gt;&gt; from typing import List, Optional\n</code></pre>"},{"location":"en/tutorials/05-repl/#3-test-error-handling","title":"3. Test Error Handling","text":"<pre><code>&gt;&gt;&gt; try:\n...     result = await my_agent(\"test\")\n... except Exception as e:\n...     print(f\"Error: {e}\")\n</code></pre>"},{"location":"en/tutorials/05-repl/#4-save-working-code","title":"4. Save Working Code","text":"<p>Once you have working code, copy it to a <code>.py</code> file:</p> <pre><code># From REPL:\n&gt;&gt;&gt; @agent\n... async def working_agent(x: str) -&gt; str:\n...     '''Process {{ x }}'''\n...     pass\n\n# Copy to agent.py:\nfrom kagura import agent\n\n@agent\nasync def working_agent(x: str) -&gt; str:\n    '''Process {{ x }}'''\n    pass\n</code></pre>"},{"location":"en/tutorials/05-repl/#common-workflows","title":"Common Workflows","text":""},{"location":"en/tutorials/05-repl/#workflow-1-prompt-engineering","title":"Workflow 1: Prompt Engineering","text":"<pre><code># Start REPL\n$ kagura repl\n\n# Test different prompts\n&gt;&gt;&gt; @agent\n... async def v1(text: str) -&gt; str:\n...     '''{{ text }}'''\n...     pass\n&gt;&gt;&gt; await v1(\"Summarize this\")\n\n&gt;&gt;&gt; @agent\n... async def v2(text: str) -&gt; str:\n...     '''Provide a detailed summary of: {{ text }}'''\n...     pass\n&gt;&gt;&gt; await v2(\"Summarize this\")\n\n# Find the best prompt, save to file\n</code></pre>"},{"location":"en/tutorials/05-repl/#workflow-2-model-comparison","title":"Workflow 2: Model Comparison","text":"<pre><code>&gt;&gt;&gt; @agent(model=\"gpt-4o-mini\")\n... async def fast(q: str) -&gt; str:\n...     '''Answer: {{ q }}'''\n...     pass\n\n&gt;&gt;&gt; @agent(model=\"gpt-4o\")\n... async def accurate(q: str) -&gt; str:\n...     '''Answer: {{ q }}'''\n...     pass\n\n&gt;&gt;&gt; await fast(\"Explain quantum computing\")\n&gt;&gt;&gt; await accurate(\"Explain quantum computing\")\n# Compare outputs\n</code></pre>"},{"location":"en/tutorials/05-repl/#workflow-3-data-extraction-testing","title":"Workflow 3: Data Extraction Testing","text":"<pre><code>&gt;&gt;&gt; from pydantic import BaseModel\n&gt;&gt;&gt; from typing import List\n\n&gt;&gt;&gt; class Item(BaseModel):\n...     name: str\n...     price: float\n\n&gt;&gt;&gt; @agent\n... async def extract_items(text: str) -&gt; List[Item]:\n...     '''Extract items and prices from: {{ text }}'''\n...     pass\n\n&gt;&gt;&gt; test_text = \"Apple $1.50, Banana $0.75\"\n&gt;&gt;&gt; await extract_items(test_text)\n[Item(name='Apple', price=1.5), Item(name='Banana', price=0.75)]\n</code></pre>"},{"location":"en/tutorials/05-repl/#keyboard-shortcuts","title":"Keyboard Shortcuts","text":"<ul> <li>\u2191/\u2193: Navigate command history (persistent across sessions, saved to <code>~/.kagura_history</code>)</li> <li>Tab: Auto-complete (when available)</li> <li>Ctrl+C: Cancel current input</li> <li>Ctrl+D: Exit REPL (saves history on exit)</li> </ul>"},{"location":"en/tutorials/05-repl/#troubleshooting","title":"Troubleshooting","text":""},{"location":"en/tutorials/05-repl/#import-errors","title":"Import Errors","text":"<pre><code>&gt;&gt;&gt; from kagura import agent\nModuleNotFoundError: No module named 'kagura'\n</code></pre> <p>Solution: Ensure Kagura AI is installed in the current environment: <pre><code>pip install kagura-ai\n</code></pre></p>"},{"location":"en/tutorials/05-repl/#api-key-errors","title":"API Key Errors","text":"<pre><code>&gt;&gt;&gt; await hello(\"test\")\nAuthenticationError: API key not found\n</code></pre> <p>Solution 1 (Recommended): Create a <code>.env</code> file: <pre><code># Create .env file\necho \"OPENAI_API_KEY=your-key-here\" &gt; .env\nkagura repl\n</code></pre></p> <p>Solution 2: Export environment variable: <pre><code>export OPENAI_API_KEY=\"your-key-here\"\nkagura repl\n</code></pre></p>"},{"location":"en/tutorials/05-repl/#memory-issues","title":"Memory Issues","text":"<p>If the REPL becomes slow: - Exit and restart: <code>/exit</code> - Clear large variables: <code>del big_variable</code></p>"},{"location":"en/tutorials/05-repl/#best-practices","title":"Best Practices","text":"<ol> <li>Start Simple: Begin with basic agents, then add complexity</li> <li>Test Incrementally: Test each change before moving on</li> <li>Save Working Code: Copy successful agents to files</li> <li>Use Variables: Store reusable data in variables</li> <li>Clean Up: Delete large variables when done</li> </ol>"},{"location":"en/tutorials/05-repl/#example-session","title":"Example Session","text":"<p>Complete example of a REPL session:</p> <pre><code>$ kagura repl\n\n&gt;&gt;&gt; from kagura import agent\n&gt;&gt;&gt; from pydantic import BaseModel\n\n&gt;&gt;&gt; class Task(BaseModel):\n...     title: str\n...     priority: int\n\n&gt;&gt;&gt; @agent\n... async def extract_task(text: str) -&gt; Task:\n...     '''Extract task from: {{ text }}'''\n...     pass\n...\nAgent 'extract_task' defined\n\n&gt;&gt;&gt; task = await extract_task(\"Fix the login bug (high priority)\")\n&gt;&gt;&gt; print(task)\nTask(title='Fix the login bug', priority=3)\n\n&gt;&gt;&gt; @agent\n... async def create_issue(task: Task) -&gt; str:\n...     '''Create a GitHub issue for task: {{ task.title }} (priority: {{ task.priority }})'''\n...     pass\n...\nAgent 'create_issue' defined\n\n&gt;&gt;&gt; issue = await create_issue(task)\n&gt;&gt;&gt; print(issue)\nGitHub Issue:\nTitle: Fix the login bug\nPriority: High (3)\nDescription: This is a high-priority bug that needs immediate attention...\n\n&gt;&gt;&gt; /exit\nGoodbye!\n</code></pre>"},{"location":"en/tutorials/05-repl/#summary","title":"Summary","text":"<p>You learned: - \u2713 How to start and use the REPL - \u2713 REPL commands (/help, /agents, /model, etc.) - \u2713 Multi-line input for complex definitions - \u2713 Practical workflows for testing and iteration - \u2713 Tips for efficient REPL usage</p> <p>The REPL is your playground for experimentation. Use it to: - Test ideas quickly - Refine prompts - Compare models - Debug agents</p> <p>Happy coding! \ud83c\udf89</p>"},{"location":"en/tutorials/05-repl/#next-steps","title":"Next Steps","text":"<ul> <li>API Reference: CLI - Detailed CLI documentation</li> <li>Examples - More code examples</li> <li>FAQ - Common questions</li> </ul>"},{"location":"en/tutorials/06-mcp-integration/","title":"MCP Integration","text":""},{"location":"en/tutorials/06-mcp-integration/#overview","title":"Overview","text":"<p>Kagura AI supports MCP (Model Context Protocol), enabling your agents to be used as tools in Claude Desktop, Claude Code, Cline, and other MCP-compatible applications.</p> <p>With MCP integration, you can: - Expose Kagura agents as MCP tools - Use agents from Claude Desktop/Code directly - Share agents across MCP-compatible applications - Build agent ecosystems with standard protocols</p>"},{"location":"en/tutorials/06-mcp-integration/#what-is-mcp","title":"What is MCP?","text":"<p>Model Context Protocol (MCP) is an open protocol developed by Anthropic that standardizes how AI applications connect to external tools and data sources.</p>"},{"location":"en/tutorials/06-mcp-integration/#installation","title":"Installation","text":"<p>Install Kagura AI with MCP support:</p> <pre><code>pip install kagura-ai[mcp]\n</code></pre> <p>Or with uv:</p> <pre><code>uv add \"kagura-ai[mcp]\"\n</code></pre> <p>This installs additional dependencies: - <code>mcp&gt;=1.0.0</code> - MCP SDK - <code>jsonschema&gt;=4.20.0</code> - Schema validation</p>"},{"location":"en/tutorials/06-mcp-integration/#quick-start","title":"Quick Start","text":""},{"location":"en/tutorials/06-mcp-integration/#1-create-an-agent","title":"1. Create an Agent","text":"<p>Create a simple agent in <code>my_agents.py</code>:</p> <pre><code>from kagura import agent\n\n@agent\nasync def analyze_code(code: str, language: str = \"python\") -&gt; str:\n    \"\"\"\n    Analyze code quality and suggest improvements.\n\n    code: Source code to analyze\n    language: Programming language (default: python)\n    \"\"\"\n    pass\n</code></pre> <p>That's it! The agent is automatically registered and ready to use via MCP.</p>"},{"location":"en/tutorials/06-mcp-integration/#2-start-mcp-server","title":"2. Start MCP Server","text":"<p>Start the Kagura MCP server:</p> <pre><code>kagura mcp serve\n</code></pre> <p>This starts a stdio-based MCP server that listens for requests.</p>"},{"location":"en/tutorials/06-mcp-integration/#3-configure-claude-desktop","title":"3. Configure Claude Desktop","text":"<p>Add Kagura to your Claude Desktop configuration:</p> <p>macOS: <code>~/Library/Application Support/Claude/claude_desktop_config.json</code> Windows: <code>%APPDATA%\\Claude\\claude_desktop_config.json</code> Linux: <code>~/.config/Claude/claude_desktop_config.json</code></p> <pre><code>{\n  \"mcpServers\": {\n    \"kagura\": {\n      \"command\": \"kagura\",\n      \"args\": [\"mcp\", \"serve\"],\n      \"env\": {\n        \"OPENAI_API_KEY\": \"your-api-key-here\"\n      }\n    }\n  }\n}\n</code></pre> <p>Note: Replace <code>OPENAI_API_KEY</code> with your actual API key, or use <code>ANTHROPIC_API_KEY</code> if using Claude models.</p>"},{"location":"en/tutorials/06-mcp-integration/#4-restart-claude-desktop","title":"4. Restart Claude Desktop","text":"<ol> <li>Quit Claude Desktop completely</li> <li>Restart Claude Desktop</li> <li>Your Kagura agents are now available as tools!</li> </ol>"},{"location":"en/tutorials/06-mcp-integration/#5-use-your-agent-in-claude-desktop","title":"5. Use Your Agent in Claude Desktop","text":"<p>In Claude Desktop, simply ask:</p> <pre><code>Can you analyze this Python code for me?\n\ndef calculate(x):\n    return x * 2 + 3\n</code></pre> <p>Claude will automatically use your <code>analyze_code</code> agent via MCP.</p>"},{"location":"en/tutorials/06-mcp-integration/#configuration-options","title":"Configuration Options","text":""},{"location":"en/tutorials/06-mcp-integration/#custom-server-name","title":"Custom Server Name","text":"<pre><code>kagura mcp serve --name my-custom-server\n</code></pre>"},{"location":"en/tutorials/06-mcp-integration/#environment-variables","title":"Environment Variables","text":"<p>Set API keys and other environment variables in the configuration:</p> <pre><code>{\n  \"mcpServers\": {\n    \"kagura\": {\n      \"command\": \"kagura\",\n      \"args\": [\"mcp\", \"serve\"],\n      \"env\": {\n        \"OPENAI_API_KEY\": \"${OPENAI_API_KEY}\",\n        \"MODEL\": \"gpt-4o-mini\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"en/tutorials/06-mcp-integration/#multiple-agent-files","title":"Multiple Agent Files","text":"<p>If you have agents in multiple files, import them before starting the server:</p> <pre><code># startup.py\nimport my_agents\nimport more_agents\n\n# Agents are automatically registered on import\n</code></pre> <p>Then configure Claude Desktop to run your startup script:</p> <pre><code>{\n  \"mcpServers\": {\n    \"kagura\": {\n      \"command\": \"python\",\n      \"args\": [\"-c\", \"import startup; from kagura.cli.main import cli; cli(['mcp', 'serve'])\"]\n    }\n  }\n}\n</code></pre>"},{"location":"en/tutorials/06-mcp-integration/#managing-agents","title":"Managing Agents","text":""},{"location":"en/tutorials/06-mcp-integration/#list-registered-agents","title":"List Registered Agents","text":"<p>See all agents available via MCP:</p> <pre><code>kagura mcp list\n</code></pre> <p>Output: <pre><code>Registered agents (1):\n\n  \u2022 analyze_code\n    Analyze code quality and suggest improvements\n</code></pre></p>"},{"location":"en/tutorials/06-mcp-integration/#agent-naming-convention","title":"Agent Naming Convention","text":"<p>MCP tool names are prefixed with <code>kagura_</code>: - Agent function: <code>analyze_code</code> - MCP tool name: <code>kagura_analyze_code</code></p> <p>This prevents naming conflicts with other MCP tools.</p>"},{"location":"en/tutorials/06-mcp-integration/#advanced-usage","title":"Advanced Usage","text":""},{"location":"en/tutorials/06-mcp-integration/#multiple-agents","title":"Multiple Agents","text":"<p>Create multiple specialized agents:</p> <pre><code>from kagura import agent\n\n@agent\nasync def review_code(code: str) -&gt; str:\n    \"\"\"Review code and provide feedback\"\"\"\n    pass\n\n@agent\nasync def generate_tests(code: str, framework: str = \"pytest\") -&gt; str:\n    \"\"\"Generate unit tests for the code\"\"\"\n    pass\n\n@agent\nasync def explain_code(code: str, audience: str = \"beginner\") -&gt; str:\n    \"\"\"Explain code for different audiences\"\"\"\n    pass\n</code></pre> <p>All three agents are automatically available in Claude Desktop.</p>"},{"location":"en/tutorials/06-mcp-integration/#complex-input-types","title":"Complex Input Types","text":"<p>Use Pydantic models for structured inputs:</p> <pre><code>from kagura import agent\nfrom pydantic import BaseModel\n\nclass CodeReviewRequest(BaseModel):\n    code: str\n    language: str\n    focus_areas: list[str]\n\n@agent\nasync def detailed_review(request: CodeReviewRequest) -&gt; dict:\n    \"\"\"Perform detailed code review\"\"\"\n    return {\n        \"score\": 8.5,\n        \"issues\": [...],\n        \"suggestions\": [...]\n    }\n</code></pre> <p>The Pydantic model is automatically converted to JSON Schema for MCP.</p>"},{"location":"en/tutorials/06-mcp-integration/#error-handling","title":"Error Handling","text":"<p>Agents should handle errors gracefully:</p> <pre><code>@agent\nasync def safe_analysis(code: str) -&gt; str:\n    \"\"\"Analyze code with error handling\"\"\"\n    try:\n        # Analysis logic\n        return \"Analysis complete\"\n    except Exception as e:\n        return f\"Error during analysis: {str(e)}\"\n</code></pre>"},{"location":"en/tutorials/06-mcp-integration/#integration-with-other-mcp-clients","title":"Integration with Other MCP Clients","text":"<p>Kagura MCP works with any MCP-compatible client:</p>"},{"location":"en/tutorials/06-mcp-integration/#claude-code-vs-code-extension","title":"Claude Code (VS Code Extension)","text":"<p>Add to <code>.vscode/settings.json</code>:</p> <pre><code>{\n  \"mcp.servers\": {\n    \"kagura\": {\n      \"command\": \"kagura\",\n      \"args\": [\"mcp\", \"serve\"]\n    }\n  }\n}\n</code></pre>"},{"location":"en/tutorials/06-mcp-integration/#cline-vs-code-extension","title":"Cline (VS Code Extension)","text":"<p>Similar configuration in Cline settings.</p>"},{"location":"en/tutorials/06-mcp-integration/#custom-mcp-clients","title":"Custom MCP Clients","text":"<p>Use the MCP Python SDK to connect:</p> <pre><code>from mcp import ClientSession\nimport asyncio\n\nasync def test_kagura_mcp():\n    async with ClientSession() as session:\n        # Connect to Kagura MCP server\n        await session.initialize()\n\n        # List tools\n        tools = await session.list_tools()\n        print(f\"Available tools: {[t.name for t in tools]}\")\n\n        # Call agent\n        result = await session.call_tool(\n            \"kagura_analyze_code\",\n            {\"code\": \"def hello(): print('hi')\"}\n        )\n        print(result)\n\nasyncio.run(test_kagura_mcp())\n</code></pre>"},{"location":"en/tutorials/06-mcp-integration/#debugging","title":"Debugging","text":""},{"location":"en/tutorials/06-mcp-integration/#enable-verbose-logging","title":"Enable Verbose Logging","text":"<pre><code>kagura -v mcp serve\n</code></pre>"},{"location":"en/tutorials/06-mcp-integration/#check-agent-registration","title":"Check Agent Registration","text":"<pre><code>kagura mcp list\n</code></pre> <p>If your agent doesn't appear: 1. Ensure the file is imported 2. Check the <code>@agent</code> decorator is applied 3. Verify no import errors</p>"},{"location":"en/tutorials/06-mcp-integration/#test-without-claude-desktop","title":"Test Without Claude Desktop","text":"<p>Use <code>mcp</code> CLI tool to test directly:</p> <pre><code># Install MCP CLI\nnpm install -g @modelcontextprotocol/cli\n\n# Test Kagura MCP server\nmcp call kagura_analyze_code '{\"code\": \"def test(): pass\"}'\n</code></pre>"},{"location":"en/tutorials/06-mcp-integration/#best-practices","title":"Best Practices","text":""},{"location":"en/tutorials/06-mcp-integration/#1-clear-descriptions","title":"1. Clear Descriptions","text":"<p>Write clear docstrings - they become tool descriptions in Claude:</p> <pre><code>@agent\nasync def analyze_code(code: str, language: str = \"python\") -&gt; str:\n    \"\"\"\n    Analyze code quality and suggest improvements.\n\n    This agent examines code structure, identifies potential issues,\n    and provides actionable suggestions for improvement.\n\n    code: Source code to analyze\n    language: Programming language (python, javascript, etc.)\n    \"\"\"\n    pass\n</code></pre>"},{"location":"en/tutorials/06-mcp-integration/#2-type-hints","title":"2. Type Hints","text":"<p>Use type hints for automatic schema generation:</p> <pre><code>@agent\nasync def process_data(\n    data: list[dict[str, Any]],\n    max_items: int = 100,\n    include_metadata: bool = False\n) -&gt; dict[str, Any]:\n    \"\"\"Process data with options\"\"\"\n    pass\n</code></pre>"},{"location":"en/tutorials/06-mcp-integration/#3-default-values","title":"3. Default Values","text":"<p>Provide sensible defaults for optional parameters:</p> <pre><code>@agent\nasync def translate(\n    text: str,\n    target_language: str = \"English\",\n    tone: str = \"neutral\"\n) -&gt; str:\n    \"\"\"Translate text\"\"\"\n    pass\n</code></pre>"},{"location":"en/tutorials/06-mcp-integration/#4-structured-output","title":"4. Structured Output","text":"<p>Return structured data when appropriate:</p> <pre><code>@agent\nasync def analyze_sentiment(text: str) -&gt; dict:\n    \"\"\"\n    Analyze sentiment of text\n\n    Returns:\n        {\n            \"sentiment\": \"positive\" | \"negative\" | \"neutral\",\n            \"confidence\": float,\n            \"keywords\": list[str]\n        }\n    \"\"\"\n    pass\n</code></pre>"},{"location":"en/tutorials/06-mcp-integration/#troubleshooting","title":"Troubleshooting","text":""},{"location":"en/tutorials/06-mcp-integration/#agent-not-appearing-in-claude-desktop","title":"Agent Not Appearing in Claude Desktop","text":"<ol> <li>Check configuration file location</li> <li>macOS: <code>~/Library/Application Support/Claude/claude_desktop_config.json</code></li> <li>Windows: <code>%APPDATA%\\Claude\\claude_desktop_config.json</code></li> <li> <p>Linux: <code>~/.config/Claude/claude_desktop_config.json</code></p> </li> <li> <p>Verify JSON syntax <pre><code># Test JSON validity\ncat ~/Library/Application\\ Support/Claude/claude_desktop_config.json | python -m json.tool\n</code></pre></p> </li> <li> <p>Check server logs <pre><code>kagura -v mcp serve 2&gt; mcp_server.log\n</code></pre></p> </li> <li> <p>Restart Claude Desktop completely</p> </li> <li>Quit application</li> <li>Restart</li> <li>Check MCP indicator in status bar</li> </ol>"},{"location":"en/tutorials/06-mcp-integration/#authentication-errors","title":"Authentication Errors","text":"<p>Make sure API keys are set:</p> <pre><code>{\n  \"mcpServers\": {\n    \"kagura\": {\n      \"command\": \"kagura\",\n      \"args\": [\"mcp\", \"serve\"],\n      \"env\": {\n        \"OPENAI_API_KEY\": \"sk-...\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"en/tutorials/06-mcp-integration/#permission-errors","title":"Permission Errors","text":"<p>On Unix systems, ensure <code>kagura</code> is executable:</p> <pre><code>which kagura\nchmod +x $(which kagura)\n</code></pre>"},{"location":"en/tutorials/06-mcp-integration/#next-steps","title":"Next Steps","text":"<ul> <li>API Reference - MCP API documentation</li> <li>CLI Reference - <code>kagura mcp</code> commands</li> <li>MCP Specification - Learn more about MCP</li> </ul>"},{"location":"en/tutorials/06-mcp-integration/#example-projects","title":"Example Projects","text":"<p>See <code>examples/mcp_integration/</code> for complete examples: - Code analysis agent - Multi-agent workflow - Custom tool integration</p>"}]}