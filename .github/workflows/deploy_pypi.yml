# File: .github/workflows/deploy_pypi.yml
name: Publish Python Package to PyPI

on:
  release:
    types: [published]

jobs:
  release-build:
    name: Build distribution
    runs-on: ubuntu-latest
    needs: [checks]
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: "Set up Python"
      uses: actions/setup-python@v5
      with:
        python-version-file: ".python-version"

    - name: Install the project
      env:
        UV_HTTP_TIMEOUT: 60
      run: uv sync --frozen --extra dev

    - name: Build
      run: uv build

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-dists
        path: dist/

  checks:
    uses: ./.github/workflows/test.yml

  publish-to-pypi:
    needs: [checks]
    runs-on: ubuntu-latest
    environment: pypi
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Publish to TestPyPI for prerelease
        if: github.event.release.prerelease
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          python -m twine upload --repository testpypi dist/*

      - name: Publish to PyPI for full release
        if: "!github.event.release.prerelease"
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: twine upload dist/*
